Abstract class and Interface:
=================================
1.if your design frequently change use interface.

2.if you need common behaviour in application use those cases abstract class,if you not need common behaviour go to 

interface.
3.in code standared level interface provide code safe.

ex: you can't add new mothods in runtime to interface because all subclass of that interface must override that method so 

it not posiible in middle change code.but it possible to add new methods to abstract in runtime.

note:
  Abstract classes allow for default default function definition. This means that whatever class extends the abstract 

class will have access to this. If we have a base class where all the classes will perform the same function, then we can 

define that in our Abstract class

	An interface is a list of functions or properties that if a class implements it, it will have to have those 

functions defined within it.
	
4.Objects that extends an Abstract class “Is-A” base class. Objects that implement “Can-Do-This”. 

5.Abstract classes allow you to provide default functionality for the subclasses.

6.If the base class will be changing often and an interface was used instead of an abstract class.

7.Another general rule is if you are creating something that provides common functionality to unrelated classes, use an 

interface. If you are creating something for objects that are closely related in a hierarchy, use an abstract class.

8.Almost everyone knows that interfaces means you are just defining a list of functions and that abstract classes has the 

option of providing default functionality.

9.An abstract class is a class that you cannot create an instance of. It can provide basic functionality, but in order for 

that functionality to be used, one or more other classes must derive from the abstract class. One of the major benefits of 

abstract classes is that you can reuse code without having to retype it. 

10.Interface provide contract between service provider and service utilizer.

11..If you want common functionality(code or behavior) use an abstract class. If you want different functionality to be 

implemented depending on implemntor choice, then use interface. so that implementor can implement based on his requirement.

for example, 

	to connect to the dbase, i have one method called connectToDB(). The implementor can use any database based on his 

requirements. So we can declare this method as in the interface.Then implementor can write the code as per his db.

	Abstract class: An abstract class may have zero or one or more than one abstract methods. If the class have zero 

abstract methods, then you can declare that class as abstract so that we can't instantiate that class.

===========

Consider the java library collections

                          Collections

            List                                Set

All 3 are interfaces but the major thing , though they have functions which are common that is add , addAll, 

contains,containsAll etc. List implements in its own and set implements in another way ( telling about duplication ). Set 

does not allow duplicates list allows duplicates.

So what I am trying to say is when ever there is no common features for sub-interface of super-interface we have to go for 

interface

But if there is some common functionality which both has then keep it as to be abstract class. 




Inheritance:

http://www.cs.utexas.edu/~lavender/courses/tutorial/java-06.pdf


http://www.kodejava.org/examples/269.html

http://codeofdoom.com/wordpress/2009/02/12/learn-this-when-to-use-an-abstract-class-and-an-interface/

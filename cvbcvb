package com.cnk.travelerpibe.common.persistence.io;

import java.io.Externalizable;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.io.Reader;
import java.net.URL;
import java.net.URLConnection;

import com.cnk.travelerpibe.common.persistence.util.StringUtils;

/**
 * Borrowed gratuitously from Spring under ASL2.0.
 *
 *+
 */

public class ClassPathResource implements Resource,Externalizable  {
    private String      path;
    private ClassLoader classLoader;
    private Class<?>       clazz;
    private long        lastRead;
    
    public ClassPathResource() {
        
    }

    public ClassPathResource(String path) {
        this( path,
              null,
              null );
    }

    public ClassPathResource(String path,
                             Class<?> clazz) {
        this( path,
              clazz,
              null );
    }

    public ClassPathResource(String path,
                             ClassLoader classLoader) {
        this( path,
              null,
              classLoader );
    }

    public ClassPathResource(String path,
                             Class<?> clazz,
                             ClassLoader classLoader) {
        if ( path == null ) {
            throw new IllegalArgumentException( "path cannot be null" );
        }
        this.path = path;
        this.clazz = clazz;
        this.classLoader = classLoader;
    }
    
    public void writeExternal(ObjectOutput out) throws IOException {
        out.writeObject( this.path );
    }

    public void readExternal(ObjectInput in) throws IOException,
                                            ClassNotFoundException {
        this.path = (String) in.readObject();
    }    

    /**
     * This implementation opens an InputStream for the given class path resource.
     * @see java.lang.ClassLoader#getResourceAsStream(String)
     * @see java.lang.Class#getResourceAsStream(String)
     */
    public InputStream getInputStream() throws IOException {
        InputStream is = null;
        if ( this.clazz != null ) {
            is = this.clazz.getResourceAsStream( this.path );
        } else if ( this.classLoader != null ) {
            is = this.classLoader.getResourceAsStream( this.path );
        }

        if ( is == null ) {
            is = Thread.currentThread().getContextClassLoader().getResourceAsStream( this.path );
        }

        if ( is == null ) {
//            is = Class.class.getClassLoader().getSystemClassLoader().getResourceAsStream( this.path );
            is = ClassLoader.getSystemClassLoader().getResourceAsStream( this.path );
        }

        if ( is == null ) {
            throw new FileNotFoundException( "'" + this.path + "' cannot be opened because it does not exist" );
        }
        this.lastRead = getLastModified();
        return is;
    }

    /**
     * This implementation returns a URL for the underlying class path resource.
     * @see java.lang.ClassLoader#getResource(String)
     * @see java.lang.Class#getResource(String)
     */
    public URL getURL() throws IOException {
        URL url = null;
        if ( this.clazz != null ) {
            url = this.clazz.getResource( this.path );
        } else if ( this.classLoader != null ) {
            url = this.classLoader.getResource( this.path );
        }

        if ( url == null ) {
            url = Thread.currentThread().getContextClassLoader().getResource( this.path );
        }

        if ( url == null ) {
//            url = Class.class.getClassLoader().getSystemClassLoader().getResource( this.path );
            url = ClassLoader.getSystemClassLoader().getResource( this.path );
        }

        if ( url == null ) {
            throw new FileNotFoundException( "'" + this.path + "' cannot be opened because it does not exist" );
        }
        return url;
    }

    public boolean hasURL() {
        return true;
    }

    public long getLastModified() {
        try {
            URLConnection conn = getURL().openConnection();
            long date = conn.getLastModified();
            return date;
        } catch ( IOException e ) {
            throw new RuntimeException( "Unable to get LastMofified for ClasspathResource",
                                        e );
        }
    }

    public long getLastRead() {
        return this.lastRead;
    }

    public Reader getReader() throws IOException {
        return new InputStreamReader( getInputStream() );
    }
    
    public boolean isDirectory() {
        try {
            URL url = getURL();

            if ( !"file".equals( url.getProtocol() ) ) {
                return false;
            }

            File file = new File( StringUtils.toURI( url.toString() ).getSchemeSpecificPart() );
            
            return file.isDirectory();
        } catch ( Exception e ) {
            return false;
        }
    }


    public ClassLoader getClassLoader() {
        return this.classLoader;
    }
    
    public boolean equals(Object object) {
        if ( object == null || !(object instanceof ClassPathResource) ) {
            return false;
        }

        ClassPathResource other = (ClassPathResource) object;
        if ( !this.path.equals( other.path ) ) {
            return false;
        }

        return this.clazz == other.clazz && this.classLoader == other.classLoader;
    }

    public int hashCode() {
        return this.path.hashCode();
    }

    public String toString() {
        return "[ClassPathResource path='" + this.path + "']";
    }


}



=================
package com.cnk.travelerpibe.common.persistence.io;

import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.io.Serializable;

/**
 * <p>
 * Generic interface to provide a Reader or InputStream for the underlying IO resource.
 * </p>
 */
public interface Resource extends Serializable {
    /**
     * Open an InputStream to the resource, the user must close this when finished.
     * 
     * @return
     * @throws IOException
     */
    InputStream getInputStream() throws IOException;

    /**
     * Opens a Reader to the resource, the user most close this when finished.
     * @return
     * @throws IOException
     */
    public Reader getReader() throws IOException;

}
======================

package com.cnk.travelerpibe.common.persistence.jdbc;


import java.sql.Connection;

public class JDBCConnectionProvider {
  
	
	private static JDBCConnectionProvider connectionProvider;
	
	private ThreadLocal<Connection> connectionProviderThread = new ThreadLocal<Connection>();
	
	private JDBCConnectionProvider(){
		
	}
	
	public static JDBCConnectionProvider getInstance(){
		
		if (null == connectionProvider){
			synchronized (JDBCConnectionProvider.class) {
				if (null == connectionProvider){
					connectionProvider = new JDBCConnectionProvider();
				}
			}
		}
		return connectionProvider;
	}

	public void allocateConnection(Connection con){
		if (connectionProviderThread.get() != null){
			return;
		}
		connectionProviderThread.set(con);
		
	}
	
//	public void initConnection(DatabaseDetail dbDetail){
//		if (connectionProviderThread.get() != null){
//			return;
//		}
//		try{
//			
//			if(!dbDetailList.contains(dbDetail)){
//				dbDetailList.add( dbDetail );
//				Class.forName(dbDetail.getClassDriverName());
//			}
//			con = DriverManager.getConnection(dbDetail.getUrl(), 
//			    	dbDetail.getUser(), dbDetail.getPassword());
//			con.setAutoCommit(false);
//			connectionProviderThread.set(con);
//				
//		}catch(Exception e){
//			throw new RuntimeException("JDBC properties are not defined properly.");
//		}finally{
//			//clearConnectionProvider();
//		}
//	}
	
    public  void savePointComplete(boolean errorFlag) {
		if (connectionProviderThread.get() != null){
			String errorStep="Closing Connection";
			try{
				if (errorFlag){
					errorStep = "Rolling back from Database";
					connectionProviderThread.get().rollback();
				}
				errorStep = "Closing Connection";
				connectionProviderThread.get().close();
			}catch(Exception e){
				throw new RuntimeException("Error while "+errorStep, e);
			}finally {
				clearConnectionProvider();
			}
		}

    }
	public Connection getConnection(){
		if (connectionProviderThread.get() == null){
			throw new RuntimeException("Connection is not initialized. Make sure initConnection(DBDetail) is invoked prior in getting any connection.");
		}
		return connectionProviderThread.get();
	}
	
	
	private void clearConnectionProvider(){
		connectionProviderThread.remove();
	}
	
	 
}

===================
package com.cnk.travelerpibe.common.persistence.jdbc;

import java.sql.Connection;

public interface JDBCConnector {

	Connection getConnection() throws Exception;

	void closeConnection() throws Exception;
	
	public Object getT();

}
============================


package com.cnk.travelerpibe.common.persistence.model;

/**
 * Generic class to bind attributes values with their respective keys
 * @author vishwanath.dubey
 *
 */
public class AttributeDBMappingModel {
	
	private String name;           //Name of attribute: it should be unique in an entity's attributes list. REQUIRED 
	private boolean isRequired;	   //to qualify if this attribute is mandatory : REQUIRED
	private String targetName;     //target column name : REQUIRED
	private String dataType;	   //Data Type: need to refer to mapping DB data type: REQUIRED 
	private boolean isKey;		   //to qualify if this attribute is part of key for updating the required.: 
	private short KeyColSeq;	   // if it is part of key, then specify key sequence number.
	private boolean isUpdateable=true;  //whether this field is updateable
	private short orderNo;         //specify order No 
	private String defaultValue="";   //default value if any

//	private int length;
//	private int decimalPrecision;
	
	public AttributeDBMappingModel(){
		
	}
	
	public AttributeDBMappingModel(String name, String targetName, String dataType){
		this(name,targetName,dataType,false);
	}

	public AttributeDBMappingModel(String name, String targetName, String dataType, boolean isRequired){
		this(name,targetName,dataType,isRequired,false);
	}
	
	public AttributeDBMappingModel(String name, String targetName, String dataType, boolean isRequired, boolean isKey){
		this.name = name;
		this.targetName = targetName;
		this.dataType = dataType;
		this.isRequired = isRequired;
		this.isKey = isKey;
		if (isKey){ //the key column can not be updateable
			isUpdateable = false;
		}
	}

	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public boolean isRequired() {
		return isRequired;
	}
	public void setRequired(boolean isRequired) {
		this.isRequired = isRequired;
	}
	public String getTargetName() {
		return targetName;
	}
	public void setTargetName(String targetName) {
		this.targetName = targetName;
	}
	public String getDataType() {
		return dataType;
	}
	public void setDataType(String dataType) {
		this.dataType = dataType;
	}
	public boolean isKey() {
		return isKey;
	}
	public void setKey(boolean isKey) {
		this.isKey = isKey;
	}
	public short getKeyColSeq() {
		return KeyColSeq;
	}
	public void setKeyColSeq(short keyColSeq) {
		KeyColSeq = keyColSeq;
	}
	public boolean isUpdateable() {
		return isUpdateable;
	}
	public void setUpdateable(boolean isUpdateable) {
		this.isUpdateable = isUpdateable;
	}
	public short getOrderNo() {
		return orderNo;
	}
	public void setOrderNo(short orderNo) {
		this.orderNo = orderNo;
	}
	public String getDefaultValue() {
		return defaultValue;
	}
	public void setDefaultValue(String defaultValue) {
		this.defaultValue = defaultValue;
	}
	

	
	
}
================================


package com.cnk.travelerpibe.common.persistence.model;

import java.util.ArrayList;
import java.util.List;

/**
 * A generic entity model to be used to bind the entity value records 
 * @author vishwanath.dubey
 *
 */

public class EntityDBMappingModel {

	private String name;
	 
	private String targetObect;  //E.g. Table Name

	private String targetType;	//E.G. DB name
	
	private String path;		//E.g. Schema name of Database

	
	List<AttributeDBMappingModel> attributes = new ArrayList<>(); 
	
	public EntityDBMappingModel(){
		
	}
	public EntityDBMappingModel(String name, String targetObject, String path, String targetType){
		this.name = name;
		this.path = path;
		this.targetObect = targetObject;
		this.targetType = targetType;
	}
	
	
	public String getName() {
		return name; 
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getTargetObect() {
		return targetObect;
	}

	public void setTargetObect(String targetObect) {
		this.targetObect = targetObect;
	}

	public String getTargetType() {
		return targetType;
	}

	public void setTargetType(String targetType) {
		this.targetType = targetType;
	}

	public String getPath() {
		return path;
	}

	public void setPath(String path) {
		this.path = path;
	}

	public List<AttributeDBMappingModel> getAttributes() {
		return attributes;
	}

	public void setAttributes(List<AttributeDBMappingModel> attributes) {
		this.attributes = attributes;
	}
	
	public void addAttribute(AttributeDBMappingModel am) {
		attributes.add(am);
	}

	
}
============================

package com.cnk.travelerpibe.common.persistence.util;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class StatementUtil {

	static String keyPattern = "<<Key>>\\s=\\s\\?";
	static String keyPattern2 = "<<Key>> is null";
	static Pattern pattern = Pattern.compile("[wW][hH][eE][rR][eE]");
	/**
	 * this function will check for empty or null values and modify the predicate clause in 
	 *  sql statement to "is Null" from " = ?".  
	 * @param statement
	 * @param values
	 * @return
	 */
	public static String checkForNullClause(String statement,Map<String,String> values,List<String> keys){
		Matcher matcher = pattern.matcher(statement);
		if (matcher.find()){ //protect for insert instatement...
//			List<String> keys = new ArrayList<String>(values.size());
			for( Entry<String, String> entry:values.entrySet()){
				if (entry.getValue() == null || entry.getValue().isEmpty()){
					String patt = keyPattern.replaceAll("<<Key>>", entry.getKey());
					String patt2 = keyPattern2.replaceAll("<<Key>>", entry.getKey());
					Pattern pattern1 = Pattern.compile(patt);
					Matcher matcher1 = pattern1.matcher(statement);
					if (matcher1.find()){
						statement = statement.replaceAll(patt,patt2);
						keys.add(entry.getKey());
					}
				}
			}
//			for(String key:keys){ //remove key from map values.
//				values.remove(key);
//			}
		}
		return statement;
	}
	
	
	public static final void main(String[] args){
		String str1 = "Select key1, key2, key3, columnA, ColumnB, ColumnC from TableA where key1 = ? and key2 = ? and key3 = ?";
		System.out.println(str1);
		Map<String,String> map = new HashMap<String,String>();
		map.put("key1", "val1");
		map.put("key2", "");
		map.put("key3", "val3");
		String str2 = checkForNullClause(str1, map,new ArrayList<String>());
		System.out.println(str2);

		map.put("key1", "");
		map.put("key2", "val2");
		map.put("key3", "val3");
		str2 = checkForNullClause(str1, map,new ArrayList<String>());
		System.out.println(str2);

		map.put("key1", "val1");
		map.put("key2", "val2");
		map.put("key3", "");
		str2 = checkForNullClause(str1, map,new ArrayList<String>());
		System.out.println(str2);

	}
}
=================

package com.cnk.travelerpibe.common.persistence.util;


import java.io.IOException;
import java.io.Reader;
import java.io.StringWriter;
import java.io.Writer;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

/**
 * Ripped form commons StringUtil, unless specified:
 * 
 * <p>Operations on {@link java.lang.String} that are
 * <code>null</code> safe.</p>
 *
 * <ul>
 *  <li><b>IsEmpty/IsBlank</b>
 *      - checks if a String contains text</li>
 *  <li><b>Trim/Strip</b>
 *      - removes leading and trailing whitespace</li>
 *  <li><b>Equals</b>
 *      - compares two strings null-safe</li>
 *  <li><b>IndexOf/LastIndexOf/Contains</b>
 *      - null-safe index-of checks
 *  <li><b>IndexOfAny/LastIndexOfAny/IndexOfAnyBut/LastIndexOfAnyBut</b>
 *      - index-of any of a set of Strings</li>
 *  <li><b>ContainsOnly/ContainsNone</b>
 *      - does String contains only/none of these characters</li>
 *  <li><b>Substring/Left/Right/Mid</b>
 *      - null-safe substring extractions</li>
 *  <li><b>SubstringBefore/SubstringAfter/SubstringBetween</b>
 *      - substring extraction relative to other strings</li>
 *  <li><b>Split/Join</b>
 *      - splits a String into an array of substrings and vice versa</li>
 *  <li><b>Remove/Delete</b>
 *      - removes part of a String</li>
 *  <li><b>Replace/Overlay</b>
 *      - Searches a String and replaces one String with another</li>
 *  <li><b>Chomp/Chop</b>
 *      - removes the last part of a String</li>
 *  <li><b>LeftPad/RightPad/Center/Repeat</b>
 *      - pads a String</li>
 *  <li><b>UpperCase/LowerCase/SwapCase/Capitalize/Uncapitalize</b>
 *      - changes the case of a String</li>
 *  <li><b>CountMatches</b>
 *      - counts the number of occurrences of one String in another</li>
 *  <li><b>IsAlpha/IsNumeric/IsWhitespace/IsAsciiPrintable</b>
 *      - checks the characters in a String</li>
 *  <li><b>DefaultString</b>
 *      - protects against a null input String</li>
 *  <li><b>Reverse/ReverseDelimited</b>
 *      - reverses a String</li>
 *  <li><b>Abbreviate</b>
 *      - abbreviates a string using ellipsis</li>
 *  <li><b>Difference</b>
 *      - compares two Strings and reports on their differences</li>
 *  <li><b>LevensteinDistance</b>
 *      - the number of changes needed to change one String into another</li>
 * </ul>
 *
 * <p>The <code>StringUtils</code> class defines certain words related to
 * String handling.</p>
 *
 * <ul>
 *  <li>null - <code>null</code></li>
 *  <li>empty - a zero-length string (<code>""</code>)</li>
 *  <li>space - the space character (<code>' '</code>, char 32)</li>
 *  <li>whitespace - the characters defined by {@link Character#isWhitespace(char)}</li>
 *  <li>trim - the characters &lt;= 32 as in {@link String#trim()}</li>
 * </ul>
 *
 * <p><code>StringUtils</code> handles <code>null</code> input Strings quietly.
 * That is to say that a <code>null</code> input will return <code>null</code>.
 * Where a <code>boolean</code> or <code>int</code> is being returned
 * details vary by method.</p>
 *
 * <p>A side effect of the <code>null</code> handling is that a
 * <code>NullPointerException</code> should be considered a bug in
 * <code>StringUtils</code> (except for deprecated methods).</p>
 *
 * <p>Methods in this class give sample code to explain their operation.
 * The symbol <code>*</code> is used to indicate any input including <code>null</code>.</p>
 *
 * @see java.lang.String
 * @author Vishwanath Dubey
 * @since 1.0
 */
public class StringUtils {

    /**
     * An empty immutable <code>String</code> array.
     */
    public static final String[] EMPTY_STRING_ARRAY = new String[0];

    // Performance testing notes (JDK 1.4, Jul03, scolebourne)
    // Whitespace:
    // Character.isWhitespace() is faster than WHITESPACE.indexOf()
    // where WHITESPACE is a string of all whitespace characters
    //
    // Character access:
    // String.charAt(n) versus toCharArray(), then array[n]
    // String.charAt(n) is about 15% worse for a 10K string
    // They are about equal for a length 50 string
    // String.charAt(n) is about 4 times better for a length 3 string
    // String.charAt(n) is best bet overall
    //
    // Append:
    // String.concat about twice as fast as StringBuilder.append
    // (not sure who tested this)

    /**
     * The empty String <code>""</code>.
     * @since 2.0
     */
    public static final String   EMPTY              = "";

    /**
     * Represents a failed index search.
     * @since 2.1
     */
    public static final int      INDEX_NOT_FOUND    = -1;

    /**
     * <p>The maximum size to which the padding constant(s) can expand.</p>
     */
    private static final int     PAD_LIMIT          = 8192;

    /**
     * <p><code>StringUtils</code> instances should NOT be constructed in
     * standard programming. Instead, the class should be used as
     * <code>StringUtils.trim(" foo ");</code>.</p>
     *
     * <p>This constructor is public to permit tools that require a JavaBean
     * instance to operate.</p>
     */
    public StringUtils() {
        super();
    }

    public static String ucFirst(final String name) {
        return name.toUpperCase().charAt( 0 ) + name.substring( 1 );
    }

    // Empty checks
    //-----------------------------------------------------------------------
    /**
     * <p>Checks if a String is empty ("") or null.</p>
     *
     * <pre>
     * StringUtils.isEmpty(null)      = true
     * StringUtils.isEmpty("")        = true
     * StringUtils.isEmpty(" ")       = false
     * StringUtils.isEmpty("bob")     = false
     * StringUtils.isEmpty("  bob  ") = false
     * </pre>
     *
     * <p>NOTE: This method changed in Lang version 2.0.
     * It no longer trims the String.
     * That functionality is available in isBlank().</p>
     *
     * @param str  the String to check, may be null
     * @return <code>true</code> if the String is empty or null
     */
    public static boolean isEmpty(final CharSequence str) {
        if ( str == null || str.length() == 0 ) {
            return true;
        }
        
        for ( int i = 0, length = str.length(); i < length; i++ ){
            if ( str.charAt( i ) != ' ' )  {
                return false;
            }
        }
        
        return true;
    }

    // Padding
    //-----------------------------------------------------------------------
    /**
     * <p>Repeat a String <code>repeat</code> times to form a
     * new String.</p>
     *
     * <pre>
     * StringUtils.repeat(null, 2) = null
     * StringUtils.repeat("", 0)   = ""
     * StringUtils.repeat("", 2)   = ""
     * StringUtils.repeat("a", 3)  = "aaa"
     * StringUtils.repeat("ab", 2) = "abab"
     * StringUtils.repeat("a", -2) = ""
     * </pre>
     *
     * @param str  the String to repeat, may be null
     * @param repeat  number of times to repeat str, negative treated as zero
     * @return a new String consisting of the original String repeated,
     *  <code>null</code> if null String input
     */
    public static String repeat(final String str,
                                final int repeat) {
        // Performance tuned for 2.0 (JDK1.4)

        if ( str == null ) {
            return null;
        }
        if ( repeat <= 0 ) {
            return EMPTY;
        }
        final int inputLength = str.length();
        if ( repeat == 1 || inputLength == 0 ) {
            return str;
        }
        if ( inputLength == 1 && repeat <= PAD_LIMIT ) {
            return padding( repeat,
                            str.charAt( 0 ) );
        }

        final int outputLength = inputLength * repeat;
        switch ( inputLength ) {
            case 1 :
                final char ch = str.charAt( 0 );
                final char[] output1 = new char[outputLength];
                for ( int i = repeat - 1; i >= 0; i-- ) {
                    output1[i] = ch;
                }
                return new String( output1 );
            case 2 :
                final char ch0 = str.charAt( 0 );
                final char ch1 = str.charAt( 1 );
                final char[] output2 = new char[outputLength];
                for ( int i = repeat * 2 - 2; i >= 0; i--, i-- ) {
                    output2[i] = ch0;
                    output2[i + 1] = ch1;
                }
                return new String( output2 );
            default :
                final StringBuilder buf = new StringBuilder( outputLength );
                for ( int i = 0; i < repeat; i++ ) {
                    buf.append( str );
                }
                return buf.toString();
        }
    }

    // Splitting
    //-----------------------------------------------------------------------
    /**
     * <p>Splits the provided text into an array, using whitespace as the
     * separator.
     * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>
     *
     * <p>The separator is not included in the returned String array.
     * Adjacent separators are treated as one separator.
     * For more control over the split use the StrTokenizer class.</p>
     *
     * <p>A <code>null</code> input String returns <code>null</code>.</p>
     *
     * <pre>
     * StringUtils.split(null)       = null
     * StringUtils.split("")         = []
     * StringUtils.split("abc def")  = ["abc", "def"]
     * StringUtils.split("abc  def") = ["abc", "def"]
     * StringUtils.split(" abc ")    = ["abc"]
     * </pre>
     *
     * @param str  the String to parse, may be null
     * @return an array of parsed Strings, <code>null</code> if null String input
     */
    public static String[] split(String str) {
        return split( str,
                      null,
                      -1 );
    }

    /**
     * <p>Splits the provided text into an array, separator specified.
     * This is an alternative to using StringTokenizer.</p>
     *
     * <p>The separator is not included in the returned String array.
     * Adjacent separators are treated as one separator.
     * For more control over the split use the StrTokenizer class.</p>
     *
     * <p>A <code>null</code> input String returns <code>null</code>.</p>
     *
     * <pre>
     * StringUtils.split(null, *)         = null
     * StringUtils.split("", *)           = []
     * StringUtils.split("a.b.c", '.')    = ["a", "b", "c"]
     * StringUtils.split("a..b.c", '.')   = ["a", "b", "c"]
     * StringUtils.split("a:b:c", '.')    = ["a:b:c"]
     * StringUtils.split("a\tb\nc", null) = ["a", "b", "c"]
     * StringUtils.split("a b c", ' ')    = ["a", "b", "c"]
     * </pre>
     *
     * @param str  the String to parse, may be null
     * @param separatorChar  the character used as the delimiter,
     *  <code>null</code> splits on whitespace
     * @return an array of parsed Strings, <code>null</code> if null String input
     * @since 2.0
     */
    public static String[] split(String str,
                                 char separatorChar) {
        return splitWorker( str,
                            separatorChar,
                            false );
    }

    /**
     * <p>Splits the provided text into an array, separators specified.
     * This is an alternative to using StringTokenizer.</p>
     *
     * <p>The separator is not included in the returned String array.
     * Adjacent separators are treated as one separator.
     * For more control over the split use the StrTokenizer class.</p>
     *
     * <p>A <code>null</code> input String returns <code>null</code>.
     * A <code>null</code> separatorChars splits on whitespace.</p>
     *
     * <pre>
     * StringUtils.split(null, *)         = null
     * StringUtils.split("", *)           = []
     * StringUtils.split("abc def", null) = ["abc", "def"]
     * StringUtils.split("abc def", " ")  = ["abc", "def"]
     * StringUtils.split("abc  def", " ") = ["abc", "def"]
     * StringUtils.split("ab:cd:ef", ":") = ["ab", "cd", "ef"]
     * </pre>
     *
     * @param str  the String to parse, may be null
     * @param separatorChars  the characters used as the delimiters,
     *  <code>null</code> splits on whitespace
     * @return an array of parsed Strings, <code>null</code> if null String input
     */
    public static String[] split(String str,
                                 String separatorChars) {
        return splitWorker( str,
                            separatorChars,
                            -1,
                            false );
    }

    /**
     * <p>Splits the provided text into an array with a maximum length,
     * separators specified.</p>
     *
     * <p>The separator is not included in the returned String array.
     * Adjacent separators are treated as one separator.</p>
     *
     * <p>A <code>null</code> input String returns <code>null</code>.
     * A <code>null</code> separatorChars splits on whitespace.</p>
     *
     * <p>If more than <code>min</code> delimited substrings are found, the last
     * returned string includes all characters after the first <code>min - 1</code>
     * returned strings (including separator characters).</p>
     *
     * <pre>
     * StringUtils.split(null, *, *)            = null
     * StringUtils.split("", *, *)              = []
     * StringUtils.split("ab de fg", null, 0)   = ["ab", "cd", "ef"]
     * StringUtils.split("ab   de fg", null, 0) = ["ab", "cd", "ef"]
     * StringUtils.split("ab:cd:ef", ":", 0)    = ["ab", "cd", "ef"]
     * StringUtils.split("ab:cd:ef", ":", 2)    = ["ab", "cd:ef"]
     * </pre>
     *
     * @param str  the String to parse, may be null
     * @param separatorChars  the characters used as the delimiters,
     *  <code>null</code> splits on whitespace
     * @param min  the maximum number of elements to include in the
     *  array. A zero or negative value implies no limit
     * @return an array of parsed Strings, <code>null</code> if null String input
     */
    public static String[] split(String str,
                                 String separatorChars,
                                 int max) {
        return splitWorker( str,
                            separatorChars,
                            max,
                            false );
    }

    //-----------------------------------------------------------------------
    /**
     * <p>Splits the provided text into an array, using whitespace as the
     * separator, preserving all tokens, including empty tokens created by 
     * adjacent separators. This is an alternative to using StringTokenizer.
     * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>
     *
     * <p>The separator is not included in the returned String array.
     * Adjacent separators are treated as separators for empty tokens.
     * For more control over the split use the StrTokenizer class.</p>
     *
     * <p>A <code>null</code> input String returns <code>null</code>.</p>
     *
     * <pre>
     * StringUtils.splitPreserveAllTokens(null)       = null
     * StringUtils.splitPreserveAllTokens("")         = []
     * StringUtils.splitPreserveAllTokens("abc def")  = ["abc", "def"]
     * StringUtils.splitPreserveAllTokens("abc  def") = ["abc", "", "def"]
     * StringUtils.splitPreserveAllTokens(" abc ")    = ["", "abc", ""]
     * </pre>
     *
     * @param str  the String to parse, may be <code>null</code>
     * @return an array of parsed Strings, <code>null</code> if null String input
     * @since 2.1
     */
    public static String[] splitPreserveAllTokens(final String str) {
        return splitWorker( str,
                            null,
                            -1,
                            true );
    }

    /**
     * <p>Splits the provided text into an array, separator specified,
     * preserving all tokens, including empty tokens created by adjacent
     * separators. This is an alternative to using StringTokenizer.</p>
     *
     * <p>The separator is not included in the returned String array.
     * Adjacent separators are treated as separators for empty tokens.
     * For more control over the split use the StrTokenizer class.</p>
     *
     * <p>A <code>null</code> input String returns <code>null</code>.</p>
     *
     * <pre>
     * StringUtils.splitPreserveAllTokens(null, *)         = null
     * StringUtils.splitPreserveAllTokens("", *)           = []
     * StringUtils.splitPreserveAllTokens("a.b.c", '.')    = ["a", "b", "c"]
     * StringUtils.splitPreserveAllTokens("a..b.c", '.')   = ["a", "", "b", "c"]
     * StringUtils.splitPreserveAllTokens("a:b:c", '.')    = ["a:b:c"]
     * StringUtils.splitPreserveAllTokens("a\tb\nc", null) = ["a", "b", "c"]
     * StringUtils.splitPreserveAllTokens("a b c", ' ')    = ["a", "b", "c"]
     * StringUtils.splitPreserveAllTokens("a b c ", ' ')   = ["a", "b", "c", ""]
     * StringUtils.splitPreserveAllTokens("a b c  ", ' ')   = ["a", "b", "c", "", ""]
     * StringUtils.splitPreserveAllTokens(" a b c", ' ')   = ["", a", "b", "c"]
     * StringUtils.splitPreserveAllTokens("  a b c", ' ')  = ["", "", a", "b", "c"]
     * StringUtils.splitPreserveAllTokens(" a b c ", ' ')  = ["", a", "b", "c", ""]
     * </pre>
     *
     * @param str  the String to parse, may be <code>null</code>
     * @param separatorChar  the character used as the delimiter,
     *  <code>null</code> splits on whitespace
     * @return an array of parsed Strings, <code>null</code> if null String input
     * @since 2.1
     */
    public static String[] splitPreserveAllTokens(final String str,
                                                  final char separatorChar) {
        return splitWorker( str,
                            separatorChar,
                            true );
    }

    /**
     * Performs the logic for the <code>split</code> and 
     * <code>splitPreserveAllTokens</code> methods that do not return a
     * maximum array length.
     *
     * @param str  the String to parse, may be <code>null</code>
     * @param separatorChar the separate character
     * @param preserveAllTokens if <code>true</code>, adjacent separators are
     * treated as empty token separators; if <code>false</code>, adjacent
     * separators are treated as one separator.
     * @return an array of parsed Strings, <code>null</code> if null String input
     */
    private static String[] splitWorker(final String str,
                                        final char separatorChar,
                                        final boolean preserveAllTokens) {
        // Performance tuned for 2.0 (JDK1.4)

        if ( str == null ) {
            return null;
        }
        final int len = str.length();
        if ( len == 0 ) {
            return EMPTY_STRING_ARRAY;
        }
        final List<String> list = new ArrayList<String>();
        int i = 0, start = 0;
        boolean match = false;
        boolean lastMatch = false;
        while ( i < len ) {
            if ( str.charAt( i ) == separatorChar ) {
                if ( match || preserveAllTokens ) {
                    list.add( str.substring( start,
                                             i ) );
                    match = false;
                    lastMatch = true;
                }
                start = ++i;
                continue;
            } else {
                lastMatch = false;
            }
            match = true;
            i++;
        }
        if ( match || (preserveAllTokens && lastMatch) ) {
            list.add( str.substring( start,
                                     i ) );
        }
        return (String[]) list.toArray( new String[list.size()] );
    }

    /**
     * <p>Splits the provided text into an array, separators specified, 
     * preserving all tokens, including empty tokens created by adjacent
     * separators. This is an alternative to using StringTokenizer.</p>
     *
     * <p>The separator is not included in the returned String array.
     * Adjacent separators are treated as separators for empty tokens.
     * For more control over the split use the StrTokenizer class.</p>
     *
     * <p>A <code>null</code> input String returns <code>null</code>.
     * A <code>null</code> separatorChars splits on whitespace.</p>
     *
     * <pre>
     * StringUtils.splitPreserveAllTokens(null, *)           = null
     * StringUtils.splitPreserveAllTokens("", *)             = []
     * StringUtils.splitPreserveAllTokens("abc def", null)   = ["abc", "def"]
     * StringUtils.splitPreserveAllTokens("abc def", " ")    = ["abc", "def"]
     * StringUtils.splitPreserveAllTokens("abc  def", " ")   = ["abc", "", def"]
     * StringUtils.splitPreserveAllTokens("ab:cd:ef", ":")   = ["ab", "cd", "ef"]
     * StringUtils.splitPreserveAllTokens("ab:cd:ef:", ":")  = ["ab", "cd", "ef", ""]
     * StringUtils.splitPreserveAllTokens("ab:cd:ef::", ":") = ["ab", "cd", "ef", "", ""]
     * StringUtils.splitPreserveAllTokens("ab::cd:ef", ":")  = ["ab", "", cd", "ef"]
     * StringUtils.splitPreserveAllTokens(":cd:ef", ":")     = ["", cd", "ef"]
     * StringUtils.splitPreserveAllTokens("::cd:ef", ":")    = ["", "", cd", "ef"]
     * StringUtils.splitPreserveAllTokens(":cd:ef:", ":")    = ["", cd", "ef", ""]
     * </pre>
     *
     * @param str  the String to parse, may be <code>null</code>
     * @param separatorChars  the characters used as the delimiters,
     *  <code>null</code> splits on whitespace
     * @return an array of parsed Strings, <code>null</code> if null String input
     * @since 2.1
     */
    public static String[] splitPreserveAllTokens(final String str,
                                                  final String separatorChars) {
        return splitWorker( str,
                            separatorChars,
                            -1,
                            true );
    }

    /**
     * <p>Splits the provided text into an array with a maximum length,
     * separators specified, preserving all tokens, including empty tokens 
     * created by adjacent separators.</p>
     *
     * <p>The separator is not included in the returned String array.
     * Adjacent separators are treated as separators for empty tokens.
     * Adjacent separators are treated as one separator.</p>
     *
     * <p>A <code>null</code> input String returns <code>null</code>.
     * A <code>null</code> separatorChars splits on whitespace.</p>
     *
     * <p>If more than <code>min</code> delimited substrings are found, the last
     * returned string includes all characters after the first <code>min - 1</code>
     * returned strings (including separator characters).</p>
     *
     * <pre>
     * StringUtils.splitPreserveAllTokens(null, *, *)            = null
     * StringUtils.splitPreserveAllTokens("", *, *)              = []
     * StringUtils.splitPreserveAllTokens("ab de fg", null, 0)   = ["ab", "cd", "ef"]
     * StringUtils.splitPreserveAllTokens("ab   de fg", null, 0) = ["ab", "cd", "ef"]
     * StringUtils.splitPreserveAllTokens("ab:cd:ef", ":", 0)    = ["ab", "cd", "ef"]
     * StringUtils.splitPreserveAllTokens("ab:cd:ef", ":", 2)    = ["ab", "cd:ef"]
     * StringUtils.splitPreserveAllTokens("ab   de fg", null, 2) = ["ab", "  de fg"]
     * StringUtils.splitPreserveAllTokens("ab   de fg", null, 3) = ["ab", "", " de fg"]
     * StringUtils.splitPreserveAllTokens("ab   de fg", null, 4) = ["ab", "", "", "de fg"]
     * </pre>
     *
     * @param str  the String to parse, may be <code>null</code>
     * @param separatorChars  the characters used as the delimiters,
     *  <code>null</code> splits on whitespace
     * @param min  the maximum number of elements to include in the
     *  array. A zero or negative value implies no limit
     * @return an array of parsed Strings, <code>null</code> if null String input
     * @since 2.1
     */
    public static String[] splitPreserveAllTokens(final String str,
                                                  final String separatorChars,
                                                  final int max) {
        return splitWorker( str,
                            separatorChars,
                            max,
                            true );
    }

    /**
     * Performs the logic for the <code>split</code> and 
     * <code>splitPreserveAllTokens</code> methods that return a maximum array 
     * length.
     *
     * @param str  the String to parse, may be <code>null</code>
     * @param separatorChars the separate character
     * @param min  the maximum number of elements to include in the
     *  array. A zero or negative value implies no limit.
     * @param preserveAllTokens if <code>true</code>, adjacent separators are
     * treated as empty token separators; if <code>false</code>, adjacent
     * separators are treated as one separator.
     * @return an array of parsed Strings, <code>null</code> if null String input
     */
    private static String[] splitWorker(final String str,
                                        final String separatorChars,
                                        final int max,
                                        final boolean preserveAllTokens) {
        // Performance tuned for 2.0 (JDK1.4)
        // Direct code is quicker than StringTokenizer.
        // Also, StringTokenizer uses isSpace() not isWhitespace()

        if ( str == null ) {
            return null;
        }
        final int len = str.length();
        if ( len == 0 ) {
            return EMPTY_STRING_ARRAY;
        }
        final List<String> list = new ArrayList<String>();
        int sizePlus1 = 1;
        int i = 0, start = 0;
        boolean match = false;
        boolean lastMatch = false;
        if ( separatorChars == null ) {
            // Null separator means use whitespace
            while ( i < len ) {
                if ( Character.isWhitespace( str.charAt( i ) ) ) {
                    if ( match || preserveAllTokens ) {
                        lastMatch = true;
                        if ( sizePlus1++ == max ) {
                            i = len;
                            lastMatch = false;
                        }
                        list.add( str.substring( start,
                                                 i ) );
                        match = false;
                    }
                    start = ++i;
                    continue;
                } else {
                    lastMatch = false;
                }
                match = true;
                i++;
            }
        } else if ( separatorChars.length() == 1 ) {
            // Optimise 1 character case
            final char sep = separatorChars.charAt( 0 );
            while ( i < len ) {
                if ( str.charAt( i ) == sep ) {
                    if ( match || preserveAllTokens ) {
                        lastMatch = true;
                        if ( sizePlus1++ == max ) {
                            i = len;
                            lastMatch = false;
                        }
                        list.add( str.substring( start,
                                                 i ) );
                        match = false;
                    }
                    start = ++i;
                    continue;
                } else {
                    lastMatch = false;
                }
                match = true;
                i++;
            }
        } else {
            // standard case
            while ( i < len ) {
                if ( separatorChars.indexOf( str.charAt( i ) ) >= 0 ) {
                    if ( match || preserveAllTokens ) {
                        lastMatch = true;
                        if ( sizePlus1++ == max ) {
                            i = len;
                            lastMatch = false;
                        }
                        list.add( str.substring( start,
                                                 i ) );
                        match = false;
                    }
                    start = ++i;
                    continue;
                } else {
                    lastMatch = false;
                }
                match = true;
                i++;
            }
        }
        if ( match || (preserveAllTokens && lastMatch) ) {
            list.add( str.substring( start,
                                     i ) );
        }
        return (String[]) list.toArray( new String[list.size()] );
    }

    /**
     * <p>Returns padding using the specified delimiter repeated
     * to a given length.</p>
     *
     * <pre>
     * StringUtils.padding(0, 'e')  = ""
     * StringUtils.padding(3, 'e')  = "eee"
     * StringUtils.padding(-2, 'e') = IndexOutOfBoundsException
     * </pre>
     *
     * <p>Note: this method doesn't not support padding with
     * <a href="http://www.unicode.org/glossary/#supplementary_character">Unicode Supplementary Characters</a>
     * as they require a pair of <code>char</code>s to be represented.
     * If you are needing to support full I18N of your applications
     * consider using {@link #repeat(String, int)} instead. 
     * </p>
     *
     * @param repeat  number of times to repeat delim
     * @param padChar  character to repeat
     * @return String with repeated character
     * @throws IndexOutOfBoundsException if <code>repeat &lt; 0</code>
     * @see #repeat(String, int)
     */
    public static String padding(final int repeat,
                                 final char padChar) throws IndexOutOfBoundsException {
        if ( repeat < 0 ) {
            throw new IndexOutOfBoundsException( "Cannot pad a negative amount: " + repeat );
        }
        final char[] buf = new char[repeat];
        for ( int i = 0; i < buf.length; i++ ) {
            buf[i] = padChar;
        }
        return new String( buf );
    }

    /** @param filePath the name of the file to open. Not sure if it can accept URLs or just filenames. Path handling could be better, and buffer sizes are hardcoded
     */
    public static String readFileAsString(Reader reader) {
        try {
            StringBuilder fileData = new StringBuilder( 1000 );
            char[] buf = new char[1024];
            int numRead = 0;
            while ( (numRead = reader.read( buf )) != -1 ) {
                String readData = String.valueOf( buf,
                                                  0,
                                                  numRead );
                fileData.append( readData );
                buf = new char[1024];
            }
            reader.close();
            return fileData.toString();
        } catch ( IOException e ) {
            throw new RuntimeException( e );
        }
    }
    
    /**
     * <p>Unescapes any Java literals found in the <code>String</code>.
     * For example, it will turn a sequence of <code>'\'</code> and
     * <code>'n'</code> into a newline character, unless the <code>'\'</code>
     * is preceded by another <code>'\'</code>.</p>
     * 
     * @param str  the <code>String</code> to unescape, may be null
     * @return a new unescaped <code>String</code>, <code>null</code> if null string input
     */
    public static String unescapeJava(String str) {
        if (str == null) {
            return null;
        }
        try {
            StringWriter writer = new StringWriter(str.length());
            unescapeJava(writer, str);
            return writer.toString();
        } catch (IOException ioe) {
            // this should never ever happen while writing to a StringWriter
            throw new RuntimeException(ioe);
        }
    }

    /**
     * <p>Unescapes any Java literals found in the <code>String</code> to a
     * <code>Writer</code>.</p>
     *
     * <p>For example, it will turn a sequence of <code>'\'</code> and
     * <code>'n'</code> into a newline character, unless the <code>'\'</code>
     * is preceded by another <code>'\'</code>.</p>
     * 
     * <p>A <code>null</code> string input has no effect.</p>
     * 
     * @param out  the <code>Writer</code> used to output unescaped characters
     * @param str  the <code>String</code> to unescape, may be null
     * @throws IllegalArgumentException if the Writer is <code>null</code>
     * @throws IOException if error occurs on underlying Writer
     */
    public static void unescapeJava(Writer out, String str) throws IOException {
        if (out == null) {
            throw new IllegalArgumentException("The Writer must not be null");
        }
        if (str == null) {
            return;
        }
        int sz = str.length();
        StringBuilder unicode = new StringBuilder(4);
        boolean hadSlash = false;
        boolean inUnicode = false;
        for (int i = 0; i < sz; i++) {
            char ch = str.charAt(i);
            if (inUnicode) {
                // if in unicode, then we're reading unicode
                // values in somehow
                unicode.append(ch);
                if (unicode.length() == 4) {
                    // unicode now contains the four hex digits
                    // which represents our unicode character
                    try {
                        int value = Integer.parseInt(unicode.toString(), 16);
                        out.write((char) value);
                        unicode.setLength(0);
                        inUnicode = false;
                        hadSlash = false;
                    } catch (NumberFormatException nfe) {
                        throw new RuntimeException("Unable to parse unicode value: " + unicode, nfe);
                    }
                }
                continue;
            }
            if (hadSlash) {
                // handle an escaped value
                hadSlash = false;
                switch (ch) {
                    case '\\':
                        out.write('\\');
                        break;
                    case '\'':
                        out.write('\'');
                        break;
                    case '\"':
                        out.write('"');
                        break;
                    case 'r':
                        out.write('\r');
                        break;
                    case 'f':
                        out.write('\f');
                        break;
                    case 't':
                        out.write('\t');
                        break;
                    case 'n':
                        out.write('\n');
                        break;
                    case 'b':
                        out.write('\b');
                        break;
                    case 'u':
                        {
                            // uh-oh, we're in unicode country....
                            inUnicode = true;
                            break;
                        }
                    default :
                        out.write(ch);
                        break;
                }
                continue;
            } else if (ch == '\\') {
                hadSlash = true;
                continue;
            }
            out.write(ch);
        }
        if (hadSlash) {
            // then we're in the weird case of a \ at the end of the
            // string, let's output it anyway.
            out.write('\\');
        }
    }
    
    /**
     * Apply the given relative path to the given path,
     * assuming standard Java folder separation (i.e. "/" separators);
     * @param path the path to start from (usually a full file path)
     * @param relativePath the relative path to apply
     * (relative to the full file path above)
     * @return the full file path that results from applying the relative path
     */
    public static String applyRelativePath(String path, String relativePath) {
        int separatorIndex = path.lastIndexOf(FOLDER_SEPARATOR);
        if (separatorIndex != -1) {
            String newPath = path.substring(0, separatorIndex);
            if (!relativePath.startsWith(FOLDER_SEPARATOR)) {
                newPath += FOLDER_SEPARATOR;
            }
            return newPath + relativePath;
        }
        else {
            return relativePath;
        }
    }

    
    private static final String FOLDER_SEPARATOR = "/";

    private static final String WINDOWS_FOLDER_SEPARATOR = "\\";

    private static final String TOP_PATH = "..";

    private static final String CURRENT_PATH = ".";


    
    /**
     * Normalize the path by suppressing sequences like "path/.." and
     * inner simple dots.
     * <p>The result is convenient for path comparison. For other uses,
     * notice that Windows separators ("\") are replaced by simple slashes.
     * @param path the original path
     * @return the normalized path
     * 
     * Borrowed from Spring, under the ASL2.0 license.
     */
    public static String cleanPath(String path) {
        if (path == null) {
            return null;
        }
        String pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);

        // Strip prefix from path to analyze, to not treat it as part of the
        // first path element. This is necessary to correctly parse paths like
        // "file:core/../core/io/Resource.class", where the ".." should just
        // strip the first "core" directory while keeping the "file:" prefix.
        int prefixIndex = pathToUse.indexOf(":");
        String prefix = "";
        if (prefixIndex != -1) {
            prefix = pathToUse.substring(0, prefixIndex + 1);
            pathToUse = pathToUse.substring(prefixIndex + 1);
        }
        if (pathToUse.startsWith(FOLDER_SEPARATOR)) {
            prefix = prefix + FOLDER_SEPARATOR;
            pathToUse = pathToUse.substring(1);
        }

        String[] pathArray = delimitedListToStringArray(pathToUse, FOLDER_SEPARATOR);
        List<String> pathElements = new LinkedList<String>();
        int tops = 0;

        for (int i = pathArray.length - 1; i >= 0; i--) {
            String element = pathArray[i];
            if (CURRENT_PATH.equals(element)) {
                // Points to current directory - drop it.
            }
            else if (TOP_PATH.equals(element)) {
                // Registering top path found.
                tops++;
            }
            else {
                if (tops > 0) {
                    // Merging path element with element corresponding to top path.
                    tops--;
                }
                else {
                    // Normal path element found.
                    pathElements.add(0, element);
                }
            }
        }

        // Remaining top paths need to be retained.
        for (int i = 0; i < tops; i++) {
            pathElements.add(0, TOP_PATH);
        }

        return prefix + collectionToDelimitedString(pathElements, FOLDER_SEPARATOR);
    }

    /**
     * Convenience method to return a Collection as a delimited (e.g. CSV)
     * String. E.g. useful for <code>toString()</code> implementations.
     * @param coll the Collection to display
     * @param delim the delimiter to use (probably a ",")
     * @param prefix the String to start each element with
     * @param suffix the String to end each element with
     * @return the delimited String
     * 
     * Borrowed from Spring, under the ASL2.0 license.
     */
    public static String collectionToDelimitedString(Collection<String> coll, String delim, String prefix, String suffix) {
        if (coll == null || coll.isEmpty()) {
            return "";
        }
        StringBuilder sb = new StringBuilder();
        Iterator<String> it = coll.iterator();
        while (it.hasNext()) {
            sb.append(prefix).append(it.next()).append(suffix);
            if (it.hasNext()) {
                sb.append(delim);
            }
        }
        return sb.toString();
    }
    
    /**
     * Convenience method to return a Collection as a delimited (e.g. CSV)
     * String. E.g. useful for <code>toString()</code> implementations.
     * @param coll the Collection to display
     * @param delim the delimiter to use (probably a ",")
     * @return the delimited String
     * 
     * Borrowed from Spring, under the ASL2.0 license.
     */
    public static String collectionToDelimitedString(Collection<String> coll, String delim) {
        return collectionToDelimitedString(coll, delim, "", "");
    }
    
    
    /**
     * Replace all occurences of a substring within a string with
     * another string.
     * @param inString String to examine
     * @param oldPattern String to replace
     * @param newPattern String to insert
     * @return a String with the replacements
     * 
     * Borrowed from Spring, under the ASL2.0 license.
     */
    public static String replace(String inString, String oldPattern, String newPattern) {
        if (isEmpty(inString) || isEmpty(oldPattern) || newPattern == null) {
            return inString;
        }
        StringBuilder sbuf = new StringBuilder();
        // output StringBuilder we'll build up
        int pos = 0; // our position in the old string
        int index = inString.indexOf(oldPattern);
        // the index of an occurrence we've found, or -1
        int patLen = oldPattern.length();
        while (index >= 0) {
            sbuf.append(inString.substring(pos, index));
            sbuf.append(newPattern);
            pos = index + patLen;
            index = inString.indexOf(oldPattern, pos);
        }
        sbuf.append(inString.substring(pos));
        // remember to append any characters to the right of a match
        return sbuf.toString();
    }
    
    public static URI toURI(String location) throws URISyntaxException {
        return new URI( StringUtils.replace( location,
                                             " ",
                                             "%20" ) );
    }    
    
    /**
     * Take a String which is a delimited list and convert it to a String array.
     * <p>A single delimiter can consists of more than one character: It will still
     * be considered as single delimiter string, rather than as bunch of potential
     * delimiter characters - in contrast to <code>tokenizeToStringArray</code>.
     * @param str the input String
     * @param delimiter the delimiter between elements (this is a single delimiter,
     * rather than a bunch individual delimiter characters)
     * @return an array of the tokens in the list
     * @see #tokenizeToStringArray
     * 
     * Borrowed from Spring, under the ASL2.0 license.
     */
    public static String[] delimitedListToStringArray(String str, String delimiter) {
        return delimitedListToStringArray(str, delimiter, null);
    }

    /**
     * Take a String which is a delimited list and convert it to a String array.
     * <p>A single delimiter can consists of more than one character: It will still
     * be considered as single delimiter string, rather than as bunch of potential
     * delimiter characters - in contrast to <code>tokenizeToStringArray</code>.
     * @param str the input String
     * @param delimiter the delimiter between elements (this is a single delimiter,
     * rather than a bunch individual delimiter characters)
     * @param charsToDelete a set of characters to delete. Useful for deleting unwanted
     * line breaks: e.g. "\r\n\f" will delete all new lines and line feeds in a String.
     * @return an array of the tokens in the list
     * @see #tokenizeToStringArray
     * 
     * Borrowed from Spring, under the ASL2.0 license.
     */
    public static String[] delimitedListToStringArray(String str, String delimiter, String charsToDelete) {
        if (str == null) {
            return new String[0];
        }
        if (delimiter == null) {
            return new String[] {str};
        }
        List<String> result = new ArrayList<String>();
        if ("".equals(delimiter)) {
            for (int i = 0; i < str.length(); i++) {
                result.add(deleteAny(str.substring(i, i + 1), charsToDelete));
            }
        }
        else {
            int pos = 0;
            int delPos = 0;
            while ((delPos = str.indexOf(delimiter, pos)) != -1) {
                result.add(deleteAny(str.substring(pos, delPos), charsToDelete));
                pos = delPos + delimiter.length();
            }
            if (str.length() > 0 && pos <= str.length()) {
                // Add rest of String, but not in case of empty input.
                result.add(deleteAny(str.substring(pos), charsToDelete));
            }
        }
        return toStringArray(result);
    }
    
    /**
     * Copy the given Collection into a String array.
     * The Collection must contain String elements only.
     * @param collection the Collection to copy
     * @return the String array (<code>null</code> if the passed-in
     * Collection was <code>null</code>)
     * 
     * Borrowed from Spring, under the ASL2.0 license.
     */
    public static String[] toStringArray(Collection<String> collection) {
        if (collection == null) {
            return null;
        }
        return (String[]) collection.toArray(new String[collection.size()]);
    }    
    
    /**
     * Delete any character in a given String.
     * @param inString the original String
     * @param charsToDelete a set of characters to delete.
     * E.g. "az\n" will delete 'a's, 'z's and new lines.
     * @return the resulting String
     * 
     * Borrowed from Spring, under the ASL2.0 license.
     */
    public static String deleteAny(String inString, String charsToDelete) {
        if (isEmpty(inString) || isEmpty(charsToDelete)) {
            return inString;
        }
        StringBuilder out = new StringBuilder();
        for (int i = 0; i < inString.length(); i++) {
            char c = inString.charAt(i);
            if (charsToDelete.indexOf(c) == -1) {
                out.append(c);
            }
        }
        return out.toString();
    } 
}


=======================
package com.cnk.travelerpibe.common.persistence.sql;

//import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//import java.util.Properties;

import com.cnk.travelerpibe.common.persistence.model.AttributeDBMappingModel;
import com.cnk.travelerpibe.common.persistence.model.EntityDBMappingModel;
//import com.cnk.travelerpibe.common.persistence.io.ClassPathResource;
//import com.cnk.travelerpibe.common.persistence.io.Resource;
//import com.mmpnc.icm.io.ClassPathResource;
//import com.mmpnc.icm.io.Resource;
//import com.mmpnc.icm.persistence.AttributeMappingModel;
//import com.mmpnc.icm.persistence.EntityMappingModel;

public abstract class AbstractSQLGenerator implements SQLGenerator {

	protected enum DML{Select, Delete,Update,Insert, Into, Where,From, Values,AND, OR};
	
	
	
	protected String LEFT_BRKT_CONST = "(";
	protected String RIGHT_BRKT_CONST = ")";
	protected String PLACEHOLDER_CONST = "?";
	protected String SPACE_CONST = " ";
	protected String EQUAL_CONST = " = ";
	protected String SET_CONST = " SET ";
	protected String DOT		= ".";
	
	
	protected String[] columnText(EntityDBMappingModel em, final Statement statment){
		StringBuilder retColText = new StringBuilder();
		StringBuilder retPlaceHolderText = new StringBuilder();
		int i=0;
		for(NameValuePair nameValue:getColumns(em,statment)){
			retColText.append(nameValue.name).append(", ");
			retPlaceHolderText.append(nameValue.value).append(", ");
			i++;
		}
		if(i>0){
			int length = retColText.length();
			int length1 = retPlaceHolderText.length();
			retColText.replace(length-2,length,"");
			retPlaceHolderText.replace(length1-2,length1,"");
		}
		return new String[]{retColText.toString(),retPlaceHolderText.toString()};
	}

	protected String predicateText(EntityDBMappingModel em, final Statement statment){
		StringBuilder retColText = new StringBuilder();
		int i=0;
		for(NameValuePair nameValue:getConditions(em,statment)){
			if (i>0){
				retColText.append(SPACE_CONST).append(DML.AND).append(SPACE_CONST);
			}
			
			if(nameValue.blankIfNull){
				retColText.append("(");
				retColText.append(nameValue.name).append(EQUAL_CONST).append(nameValue.value);
				retColText.append(SPACE_CONST).append("OR").append(SPACE_CONST).append(nameValue.name).append(SPACE_CONST).append("IS NULL");
				retColText.append(")");
			} else {
				retColText.append(nameValue.name).append(EQUAL_CONST).append(nameValue.value);
			}
			i++;
		}
		return retColText.toString();
	}

	
//	private List<String> getColumns(EntityMappingModel em){
//		List<String> columns=new ArrayList<String>();
//		for(AttributeMappingModel am:em.getAttributeMapping()){
//			String columName = am.getTargetName();
//			columns.add(columName);
//		}
//		return columns;
//	}

	
	protected List<NameValuePair> getColumns(EntityDBMappingModel em, final Statement statment){
		List<NameValuePair> columns=new ArrayList<NameValuePair>();
		for(AttributeDBMappingModel am:em.getAttributes()){
			String columName = am.getTargetName();
			String defaultValue = am.getDefaultValue();
//			boolean isUpdAlloed=convertBoolean(am.getUpdateable());
			boolean isUpdAlloed=am.isUpdateable();
			
			if (!"".equals(defaultValue) && defaultValue!=null){
				statment.addPlaceholder(columName,am.getDataType(),isUpdAlloed ,defaultValue);
				columns.add(new NameValuePair(columName,PLACEHOLDER_CONST, true));
			}
			else {
				statment.addPlaceholder(columName,am.getDataType(),isUpdAlloed );
				columns.add(new NameValuePair(columName,PLACEHOLDER_CONST, false));
			}
			//columns.add(new NameValuePair(columName,PLACEHOLDER_CONST));
		}
		return columns;
	}

	/*private List<NameValuePair> getConditions(EntityDBMappingModel em, final Statement statment){
		List<NameValuePair> columns=new ArrayList<NameValuePair>();
		for(AttributeDBMappingModel am:em.getAttributes()){
			String columName = am.getTargetName();
			String defaultValue = am.getDefaultValue();
			boolean isUpdAlloed=am.isUpdateable();
			boolean isNotKey = !am.isKey();
			if (isNotKey){
				continue;
			}
//			String value = PLACEHOLDER_CONST;
			
			if (!"".equals(defaultValue) && defaultValue!=null){
				statment.addPlaceholder(columName,am.getDataType(),isUpdAlloed ,defaultValue);
//				value = "\'"+defaultValue+"\'";
				if(defaultValue.startsWith("$BlankIfNull")|| defaultValue.startsWith("$BlankIfNull")){
					columns.add(new NameValuePair(columName,PLACEHOLDER_CONST, true));
				}else{
					columns.add(new NameValuePair(columName,PLACEHOLDER_CONST, false));
				}
			}
			else {
				columns.add(new NameValuePair(columName,PLACEHOLDER_CONST, false));
				statment.addPlaceholder(columName,am.getDataType(),isUpdAlloed );
			}
			//columns.add(new NameValuePair(columName,PLACEHOLDER_CONST));
		}
		return columns;
	}
*/
	
	private List<NameValuePair> getConditions(EntityDBMappingModel em, final Statement statment){
		List<NameValuePair> columns=new ArrayList<NameValuePair>();
		for(AttributeDBMappingModel am:em.getAttributes()){
			String columName = am.getTargetName();
			String defaultValue = am.getDefaultValue();
			boolean isUpdAlloed=am.isUpdateable();
			boolean isNotKey = !am.isKey();
			if (isNotKey){
				continue;
			}
//			String value = PLACEHOLDER_CONST;
			
			if (!"".equals(defaultValue) && defaultValue!=null){
				statment.addPlaceholder(columName,am.getDataType(),isUpdAlloed ,defaultValue);
//				value = "\'"+defaultValue+"\'";
				if(defaultValue.startsWith("$BlankIfNull")|| defaultValue.startsWith("$BlankIfNull")){
					columns.add(new NameValuePair(columName,PLACEHOLDER_CONST, true));
				}else{
					columns.add(new NameValuePair(columName,PLACEHOLDER_CONST, false));
				}
			}
			else {
				columns.add(new NameValuePair(columName,PLACEHOLDER_CONST, false));
				statment.addPlaceholder(columName,am.getDataType(),isUpdAlloed );
			}
			//columns.add(new NameValuePair(columName,PLACEHOLDER_CONST));
		}
		return columns;
	}

	public static boolean convertBoolean(String s){
		if ("Y".equalsIgnoreCase(s)||"Yes".equalsIgnoreCase(s)||"true".equalsIgnoreCase(s)){
			return true;
		}
		return false;
	}
//	protected static Properties loadProperties() throws IOException{
//		Resource resource = new ClassPathResource("dbConf.properties", AbstractSQLGenerator.class.getClassLoader());
//		Properties properties = new Properties();
//		properties.load(resource.getInputStream());
//		return properties;
//	}
	
}
=========================
package com.cnk.travelerpibe.common.persistence.sql;

import java.util.Date;

public class CurrentDateDefaultValue implements DefaultValue {

	public Object getValue() {
		return new Date();
	}

}
===============================


package com.cnk.travelerpibe.common.persistence.sql;

public interface DefaultValue {

	Object getValue();
}
===============================

package com.cnk.travelerpibe.common.persistence.sql;

import java.util.HashMap;
import java.util.Map;


public class DefaultValueProvider {

	private Map<String,DefaultValue> defaultValues;
	
	
	private static DefaultValueProvider defaultValueProvide;
	public static DefaultValueProvider getInstance(){
		if (defaultValueProvide == null){
			synchronized (DefaultValueProvider.class) { //in case of lazy initialization
				if (defaultValueProvide == null){
					defaultValueProvide = new DefaultValueProvider();
				}
			}
		}
		return defaultValueProvide;
	}
	
	private DefaultValueProvider(){
		defaultValues = new HashMap<String, DefaultValue>();
	}

	public DefaultValue getValue(String key){
		return defaultValues.get(key);
	}
	
	public void setValue(String key, DefaultValue obj){
		defaultValues.put(key,obj);
	}
}
============================

package com.cnk.travelerpibe.common.persistence.sql;

//import java.util.Properties;

import com.cnk.travelerpibe.common.persistence.model.EntityDBMappingModel;

public class DeleteSQLGenerator extends AbstractSQLGenerator implements SQLGenerator {
	private static DeleteSQLGenerator generator = new DeleteSQLGenerator();
	private DeleteSQLGenerator(){
	}
	
	public static DeleteSQLGenerator getInstance(){
		return generator;
	}
	public Statement generate(EntityDBMappingModel em) throws Exception {
//		Properties prop = loadProperties();
//		String addSchemaBeforeTableName = (String) prop.get("addSchemaBeforeTableName");
//		String tableName="";
//		if("Y".equals(addSchemaBeforeTableName)){
//			tableName = em.getPath()+DOT+em.getTargetObect();
//		}else{
//			tableName = em.getTargetObect();
//		}
		Statement stmt = new Statement();

		StringBuilder sqlStmt = new StringBuilder();
		sqlStmt.append(DML.Delete).append(SPACE_CONST);
		sqlStmt.append(DML.From).append(SPACE_CONST);
		//append(em.getPath()+DOT+em.getTargetObect()).append(SPACE_CONST);
		if (!em.getPath().isEmpty()){
			sqlStmt.append(em.getPath()).append(DOT);
		}
		sqlStmt.append(em.getTargetObect()).append(SPACE_CONST);
//		append(tableName).append(SPACE_CONST);
		stmt.refresh(); //need to reset
		String pstr=predicateText(em,stmt);
		if (pstr != null && !"".equals(pstr)){
			sqlStmt.append(DML.Where).append(SPACE_CONST).append(pstr);
		}
		
		stmt.statement = sqlStmt.toString();
		return stmt;
	}
//	public static final void main(String[] args) throws Exception{
//        EMUnmarshaller unmarshaller = new EMUnmarshaller();
//      String xmlDocument = "<EntityMapping><PublishCriteria>GroupBy</PublishCriteria><Path>VPI</Path><TargetObject>ANSWER_TABLE</TargetObject><AttributeMapping><ParentId/><ParentName/><DataType>VARCHAR</DataType><IsParent>N</IsParent><TargetName>GTABLECODE1</TargetName><updateable>Y</updateable><KeyColSeq>0</KeyColSeq><DefaultValue>COVERAGE_TYPE</DefaultValue><Name/><IsKey>Y</IsKey><IsMandatory>Y</IsMandatory></AttributeMapping><AttributeMapping><ParentId/><ParentName/><DataType>VARCHAR</DataType><IsParent>N</IsParent><TargetName>GTABLECODE2</TargetName><updateable>N</updateable><KeyColSeq/><DefaultValue/><Name>GTABLECODE2</Name><IsKey>Y</IsKey><IsMandatory>N</IsMandatory></AttributeMapping><AttributeMapping><ParentId/><ParentName/><updateablCol>Y</updateablCol><DataType>VARCHAR</DataType><IsParent>N</IsParent><TargetName>GTABLENAME</TargetName><KeyColSeq/><DefaultValue/><Name>GTABLENAME</Name><IsKey>N</IsKey><IsMandatory>N</IsMandatory></AttributeMapping><AttributeMapping><ParentId/><ParentName/><DataType>DATE</DataType><IsParent>N</IsParent><TargetName>ANS_DATE_GENERATE</TargetName><updateable>Y</updateable><KeyColSeq/><DefaultValue/><Name>ANS_DATE_GENERATE</Name><IsKey>N</IsKey><IsMandatory>N</IsMandatory></AttributeMapping><TargetType>Database</TargetType></EntityMapping>";
//      EntityMappingModel em = unmarshaller.unmarshal(xmlDocument);
//      
//      Statement statment =  new DeleteSQLGenerator().generate(em);
//      System.out.println(statment.statement);
//	}
	
}

====================================

package com.cnk.travelerpibe.common.persistence.sql;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class GroupByValues {
	
	
	Set<String> igroupByFValues = new HashSet<String>();
	List<FieldWithValue[]> groupByValues  = new ArrayList<FieldWithValue[]>();

	public void setFieldValues(FieldWithValue[] values){
		String combField="";
		for(FieldWithValue s:values){
			combField+=s.value;
		}
		if (igroupByFValues.add(combField)){
			groupByValues.add(values);
		}
	}
	
	public  List<FieldWithValue[]> getGroupByFValues(){
		return groupByValues;
	}
	
	public static final void main(String[] args){
		
		GroupByValues gv = new GroupByValues();
		gv.setFieldValues(new FieldWithValue[]{gv.new FieldWithValue("","aaa",1),
				gv.new FieldWithValue("","bb",1),gv.new FieldWithValue("","cc",1)});
		
		gv.setFieldValues(new FieldWithValue[]{gv.new FieldWithValue("","aaa",1),
				gv.new FieldWithValue("","bb",1),gv.new FieldWithValue("","cc",1)});
		gv.setFieldValues(new FieldWithValue[]{gv.new FieldWithValue("","aaa",1),
				gv.new FieldWithValue("","bb",1),gv.new FieldWithValue("","ddd",1)});

		for(FieldWithValue[] s:gv.getGroupByFValues()){
			System.out.println(s);
		}
	}
	
	public class FieldWithValue{
		public String field;
		public int index;
		public String value;
		
		public FieldWithValue(String field,String value, int index){
			this.field = field;
			this.index = index;
			this.value = value;
		}
		
		
	}
}

===========================

package com.cnk.travelerpibe.common.persistence.sql;

//import java.util.Properties;

import com.cnk.travelerpibe.common.persistence.model.EntityDBMappingModel;

public class InsertSQLGenerator extends AbstractSQLGenerator implements SQLGenerator {

	private static InsertSQLGenerator generator = new InsertSQLGenerator();
	private InsertSQLGenerator(){
	}
	
	public static InsertSQLGenerator getInstance(){
		return generator;
	}
	
	public Statement generate(EntityDBMappingModel em) throws Exception {
//		Properties prop = loadProperties();
//		String addSchemaBeforeTableName = (String) prop.get("addSchemaBeforeTableName");
//		
//		String tableName="";
//		if("Y".equals(addSchemaBeforeTableName)){
//			tableName = em.getPath()+DOT+em.getTargetObect();
//		}else{
//			tableName = em.getTargetObect();
//		}
		Statement stmt = new Statement();
		
		String[] columns =  columnText(em,stmt);
		StringBuilder sqlStmt = new StringBuilder();
		sqlStmt.append(DML.Insert).append(SPACE_CONST);
		sqlStmt.append(DML.Into).append(SPACE_CONST);
		//sqlStmt.append(em.getPath()+DOT+em.getTargetObect()).append(SPACE_CONST).
		if (!em.getPath().isEmpty()){
			sqlStmt.append(em.getPath()).append(DOT);
		}
		sqlStmt.append(em.getTargetObect()).append(SPACE_CONST).append(LEFT_BRKT_CONST).append(SPACE_CONST);
		sqlStmt.append(columns[0]).append(SPACE_CONST).append(RIGHT_BRKT_CONST).append(SPACE_CONST);

		sqlStmt.append(DML.Values).append(SPACE_CONST);
		sqlStmt.append(LEFT_BRKT_CONST).append(SPACE_CONST);
		sqlStmt.append(columns[1]).append(SPACE_CONST).append(RIGHT_BRKT_CONST).append(SPACE_CONST);
		
		stmt.statement = sqlStmt.toString();
		
		return stmt;
	}
//	public static final void main(String[] args) throws Exception{
//        EMUnmarshaller unmarshaller = new EMUnmarshaller();
//      String xmlDocument = "<EntityMapping><PublishCriteria>GroupBy</PublishCriteria><Path>VPI</Path><TargetObject>ANSWER_TABLE</TargetObject><AttributeMapping><ParentId/><ParentName/><DataType>VARCHAR</DataType><IsParent>N</IsParent><TargetName>GTABLECODE1</TargetName><updateable>Y</updateable><KeyColSeq>0</KeyColSeq><DefaultValue>COVERAGE_TYPE</DefaultValue><Name/><IsKey>Y</IsKey><IsMandatory>Y</IsMandatory></AttributeMapping><AttributeMapping><ParentId/><ParentName/><DataType>VARCHAR</DataType><IsParent>N</IsParent><TargetName>GTABLECODE2</TargetName><updateable>N</updateable><KeyColSeq/><DefaultValue/><Name>GTABLECODE2</Name><IsKey>Y</IsKey><IsMandatory>N</IsMandatory></AttributeMapping><AttributeMapping><ParentId/><ParentName/><updateablCol>Y</updateablCol><DataType>VARCHAR</DataType><IsParent>N</IsParent><TargetName>GTABLENAME</TargetName><KeyColSeq/><DefaultValue/><Name>GTABLENAME</Name><IsKey>N</IsKey><IsMandatory>N</IsMandatory></AttributeMapping><AttributeMapping><ParentId/><ParentName/><DataType>DATE</DataType><IsParent>N</IsParent><TargetName>ANS_DATE_GENERATE</TargetName><updateable>Y</updateable><KeyColSeq/><DefaultValue/><Name>ANS_DATE_GENERATE</Name><IsKey>N</IsKey><IsMandatory>N</IsMandatory></AttributeMapping><TargetType>Database</TargetType></EntityMapping>";
//      EntityMappingModel em = unmarshaller.unmarshal(xmlDocument);
//      
//      Statement statment =  new InsertSQLGenerator().generate(em);
//      System.out.println(statment);
//	}

}
============================


package com.cnk.travelerpibe.common.persistence.sql;

import java.sql.Connection;
import java.sql.DriverManager;
import java.util.Properties;

/*import junit.framework.Assert;

import org.junit.Test;*/

import com.cnk.travelerpibe.common.persistence.io.ClassPathResource;
import com.cnk.travelerpibe.common.persistence.io.Resource;

public class JDBCConnection {
	public static Connection connection;
//	public static boolean isLocalDB;
	
	static {
		try {
			Resource resource = new ClassPathResource("dbConf.properties", AbstractSQLGenerator.class.getClassLoader());
			Properties properties = new Properties();
			properties.load(resource.getInputStream());

			Class.forName( properties.getProperty("driver") );
	        String url = properties.getProperty("url");
	        String usr = properties.getProperty("user");
	        String pwd = properties.getProperty("password");
	        connection = DriverManager.getConnection(url, "siva_master", "siva_master");
	      //  isLocalDB = Boolean.valueOf( properties.getProperty("isLocalDB") );
		} catch (Exception e) {
			throw new RuntimeException("Error occured during initializing the connection",e);
		}
		
	}
	
	/*@Test
	public void connection(){
		Assert.assertNotNull( connection );
		
	}*/
}
=========================

package com.cnk.travelerpibe.common.persistence.sql;

public class NameValuePair {
		String name;
		String value;
		boolean blankIfNull;
		
		NameValuePair(String name,String value, boolean blankIfNull){
			this.name = name;
			this.value = value;
			this.blankIfNull = blankIfNull;
		}
}
=========================

package com.cnk.travelerpibe.common.persistence.sql;

import java.util.ArrayList;
import java.util.List;

public class OrderByCols {
	
	public static String ORDER_BY = "Order By";
	public enum OrderByOrder{ASC,DESC};
	public OrderByOrder order=OrderByOrder.ASC;
	public List<String> cols = new ArrayList<>();
	
}
============================

package com.cnk.travelerpibe.common.persistence.sql;

import java.sql.Connection;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Types;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import com.cnk.travelerpibe.common.persistence.jdbc.JDBCConnectionProvider;
import com.cnk.travelerpibe.common.persistence.sql.Statement.Placeholders;
import com.cnk.travelerpibe.common.persistence.util.StatementUtil;


/**
 * Persist Helper to perfomr persistence and other DB operations like making queries 
 * @author vishwanath.dubey
 *
 */
public class PersistHelper {
	public enum SQLStatements{Insert,Update,Delete,Select,SelectNonUpd};

	private static PersistHelper persistHelper;
	
	public static PersistHelper getInstance(){
		if (persistHelper == null){
			synchronized (PersistHelper.class) {
				if (persistHelper == null){
					persistHelper = new PersistHelper();
				}
			}
		}
		return persistHelper;
	}
	
	public void persist( Map<SQLStatements,Statement> statements,
			List<Map<String,String>> recordValues) throws Exception{
		if (statements == null || recordValues == null
				|| statements.size()==0 ){
			// throw exception
		}
		
		if (statements == null || recordValues == null
				|| statements.size()==0 ){
			// throw exception
		}
		for(Map<String,String> record:recordValues){
			persist(statements,record);
		}
		

	}
	
	/**
	 * It will persist a record in database. It will first check if current record is available in database based on key provided, 
	 * it will perform the updated otherwise insert operation will be performed.
	 * @param statements
	 * @param values
	 * @throws Exception
	 */
	public void persist( Map<SQLStatements,Statement> statements,
						 Map<String,String> recordValues) throws Exception{
		if (statements == null || recordValues == null
				|| statements.size()==0 ){
			// throw exception
		}
		
		Statement selectStmt = statements.get(SQLStatements.Select);
		Statement insertStmt = statements.get(SQLStatements.Insert);
		Statement updateStmt = statements.get(SQLStatements.Update);
		
		if (selectStmt==null || insertStmt == null || updateStmt == null){
			//throw exception
		}
		
		//boolean isExist = isExist(selectStmt, recordValues); // select statenent
		boolean isExist = isExist(insertStmt, recordValues); // select statenent
		//boolean isExist = isExist(updateStmt, recordValues);
		if (isExist ){
			executeUpdate(updateStmt, recordValues);
		}
		else {
			executeUpdate(insertStmt, recordValues);
		}
	}

	/**
	 * Update/Insert operation
	 * @param statement
	 * @param values
	 * @throws Exception
	 */
	public void executeUpdate(Statement statement, Map<String,String> values)	throws Exception
	{
		Connection conn=JDBCConnectionProvider.getInstance().getConnection();
		ResultSet resultSet=null;
		PreparedStatement pstmt = null;

//		logger.log(Level.INFO, "SQL statement "+statement.statement, entityName);

		try{
			pstmt = conn.prepareStatement(
					statement.statement);
			for(Placeholders placeholders:statement.placeholder){
				String value = values.get(placeholders.fieldName);
				setSQLValue(pstmt,placeholders,value);
			}
			pstmt.executeUpdate();
		}
		finally{
			if (resultSet != null){
				resultSet.close();
			}
			if (pstmt != null){
				pstmt.close();
			}
		}
	}
	

	/**
	 * Perform query 
	 * @param statement
	 * @param inputs
	 * @return 
	 * @throws Exception
	 */
	public List<Map<String,String>> executeQuery(Statement statement,Map<String,String> inputs)
	throws Exception
	{
		Connection conn = JDBCConnectionProvider.getInstance().getConnection();
		ResultSet resultSet=null;
		PreparedStatement pstmt = null;
		List<Map<String,String>> retVals = new ArrayList<Map<String,String>>();
//		logger.log(Level.INFO, "SQL statement "+statement.statement, entityName);
		try{
			pstmt = conn.prepareStatement(
					statement.statement);
			for(Placeholders placeholders:statement.placeholder){
				//String value = inputs.get(placeholders.fieldName);
				System.out.println("PLH "+placeholders.fieldName);
				String value = inputs.get(placeholders.fieldName);
				setSQLValue(pstmt,placeholders,value);
			}
			resultSet = pstmt.executeQuery();
			while (resultSet.next()){
			    ResultSetMetaData rsmd = resultSet.getMetaData();
			    int numColumns = rsmd.getColumnCount();
			    Map<String,String> row = new LinkedHashMap<>();
			    // Get the column names; column indices start from 1
			    for (int i=1; i<numColumns+1; i++) {
			        String columnName = rsmd.getColumnName(i);
			        DataType type = DataType.valueOf(rsmd.getColumnTypeName(i));
			        String val = "";
			        if (type == DataType.Date || type == DataType.DATE){
			        	Date dt = resultSet.getDate(columnName);
			        	SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT);
			        	if (dt != null) {
			        		val = sdf.format(dt);
			        	}
			        }else{
			        	val = resultSet.getString(columnName);
			        }
			        row.put(columnName, val);
			    }
			    retVals.add(row);
			}
			//return retVals;
		}catch (Exception e ){
			System.out.println(e);
		}
		/*finally{
			if (resultSet != null){
				resultSet.close();
			}
			if (pstmt != null){
				pstmt.close();
			}
		}*/return retVals;
	}
	
	private boolean isExist(Statement statement, Map<String,String> values)
			throws Exception
	{
		//Connection conn = connector.getConnection();
		Connection conn = JDBCConnectionProvider.getInstance().getConnection();
		ResultSet resultSet=null;
		PreparedStatement pstmt = null;
		//			logger.log(Level.INFO, "SQL statement "+statement.statement, entityName);
		try{
			List<Placeholders> placeHolder = new ArrayList<Placeholders>(statement.placeholder);
			String statementS = checkForNull(statement,values,placeHolder);

			pstmt = conn.prepareStatement(
					statementS);
			for(Placeholders placeholders:placeHolder){
				String value = values.get(placeholders.fieldName.trim());
				setSQLValue(pstmt,placeholders,value);
			}
			//resultSet = pstmt.executeQuery();
		//int n=	pstmt.executeUpdate();
		//System.out.println("No Of Records "+n);
			//if (resultSet.next()){
			//	return true;
			//}
			return false;
		}
		finally{
			if (resultSet != null){
				resultSet.close();
			}
			if (pstmt != null){
				pstmt.close();
			}
		}
	}
	
	
	private String checkForNull(Statement statement,
			Map<String,String> values, List<Placeholders> placeholder){
		List<String> deletedKeys = new ArrayList<String>();
		String statementStr = StatementUtil.checkForNullClause(statement.statement, values,deletedKeys);
		
		for(String deletedKey:deletedKeys){
//		for(Entry<String,String> row:values.entrySet()){
//			if (row.getValue() == null||row.getValue().isEmpty()){
				List<Placeholders> list1 = Collections.unmodifiableList(placeholder);
				for(Placeholders pl:list1){
//					if (pl.fieldName.equals(row.getKey())){
					if (pl.fieldName.equals( deletedKey )){
						placeholder.remove(pl);
					}
//				}
			}
		}
		return statementStr;
	}
	
	
	
	private enum DataType{VARCHAR,Varchar,VARCHAR2, Varchar2,TEXT,Text,
		DECIMAL,Decimal,NUMERIC,Numeric,DATE,Date, NUMBER, Number, CHAR,INT,INTEGER,TINYINT}
	private static final String DATE_FORMAT="dd-MMM-yyyy";
	
	private static void setSQLValue(PreparedStatement stmt,
			Placeholders placeholders,String value ) throws Exception{
		
		try {
			

		if (value == null){
			value = placeholders.defaultValue;
			if (value != null && value.startsWith("@")){
				value = value.substring(1);//starts from @sysdate in @@sysdate
			}else{
				value = "";
			}
		}
		DefaultValue defaultValueObject = null;
		Object valueObject = null;
		if(!value.startsWith("$BlankIfNull")){
			if (value.startsWith("@@")||value.startsWith("@")){ //again start with @ meant it is default value where default value provider needs to provide
				value = value.substring(1);
			}
			if (value.startsWith("@")){ //again start with @ meant it is default value where default value provider needs to provide
				defaultValueObject = DefaultValueProvider.getInstance().getValue(value);
			}
			if (defaultValueObject == null){
				valueObject = value;
			}else{
				valueObject = defaultValueObject.getValue();
			}
		}else{
			valueObject = "";
		}	
		String dbDataType="";
		if(placeholders.type!=null && placeholders.type.trim().isEmpty())
		{
			dbDataType=DataType.VARCHAR.toString();
		}
		else
		{
			dbDataType=placeholders.type.trim();
		}
		DataType dataType = DataType.valueOf(dbDataType.toUpperCase());
		if (dataType == DataType.VARCHAR || dataType == DataType.Varchar
			|| dataType == DataType.VARCHAR2 || dataType == DataType.Varchar2	
			|| dataType == DataType.TEXT || dataType == DataType.Text || dataType == DataType.CHAR	|| dataType == DataType.INT || dataType == DataType.TINYINT
		){
			stmt.setString(placeholders.placeHolderIndex, valueObject.toString());
		}
		else if ( dataType == DataType.Date ||dataType == DataType.DATE ){
			Date dt=null;
			if(valueObject != null && !"".equals(valueObject)){
				if (!(valueObject instanceof Date)){
					SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT);
					dt = sdf.parse(valueObject.toString());
				}else
				{
					dt= (Date)valueObject;
				}
				stmt.setDate(placeholders.placeHolderIndex, new java.sql.Date(dt.getTime()));
			}else{
				stmt.setNull(placeholders.placeHolderIndex, Types.DATE);
			}
		
		} 
		else if ( dataType == DataType.Decimal||dataType == DataType.DECIMAL){
			if(valueObject != null && !"".equals(valueObject)){
				stmt.setDouble(placeholders.placeHolderIndex, Double.valueOf(valueObject.toString()) );
			}else{
				stmt.setNull(placeholders.placeHolderIndex, Types.DECIMAL);
			}
		}
		else if ( dataType == DataType.Numeric||dataType == DataType.NUMERIC 
				|| dataType == DataType.NUMBER|| dataType == DataType.Number){
			stmt.setDouble(placeholders.placeHolderIndex,  Double.valueOf(valueObject.toString()));
		}
		} catch (Exception e) {
//			clogger.error("Error occured for place holder "+placeholders+ 
//					" for value "+value + " PersistHelper:setSQLValue()", e);
			throw e;
		}
	}
}
=============================

package com.cnk.travelerpibe.common.persistence.sql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Types;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.cnk.travelerpibe.common.persistence.jdbc.JDBCConnectionProvider;
import com.cnk.travelerpibe.common.persistence.jdbc.JDBCConnector;
import com.cnk.travelerpibe.common.persistence.sql.Statement.Placeholders;
import com.cnk.travelerpibe.common.persistence.util.StatementUtil;



public class PersistHelperOLd {
	public enum SQLStatements{Insert,Update,Delete,Select,SelectNonUpd};

	Map<SQLStatements,Statement> statements;
	Map<String,String> nameValues;
	JDBCConnector connector;

	boolean updateAllowed = true;
	String  entityName = "";
	public PersistHelperOLd(JDBCConnector connector,
			Map<SQLStatements,Statement> statements, String entityName){
		this.connector = connector;
		this.statements = statements;
		this.entityName = entityName;
		//this.nameValues = nameValues;
	}
	
	

	public void setUpdateAllowed(boolean updateAllowed) {
		this.updateAllowed = updateAllowed;
	}



	public void persist(Map<String,String> values) throws Exception{
		nameValues = values;
		if (statements == null || nameValues == null){
			// throw exception
		}
		
		Statement selectStmt = statements.get(SQLStatements.Select);
		Statement insertStmt = statements.get(SQLStatements.Insert);
		Statement updateStmt = statements.get(SQLStatements.Update);
		boolean isExist = isExist(selectStmt); // select statenent
		if (isExist && updateAllowed){
			executeUpdate(updateStmt);
		}
		else {
			executeUpdate(insertStmt);
		}
		nameValues = null;

	}
	
		
	
	public void cleanData(Map<String,String> values) throws Exception{
		nameValues = values;
		Statement selectStmt = statements.get(SQLStatements.Select);
		Statement deleteStmt = statements.get(SQLStatements.Delete);
		boolean isExist = isExist(selectStmt); // select statenent
		if (isExist){
			isExist(deleteStmt); // select statenent
		}
		nameValues = null;

	}
	
	public Map<String,String> getUpdateableValues(Map<String,String> values) throws Exception{
		
		nameValues = values;
		Map<String,String> firstRow = new HashMap<String,String>();
		Statement nonUpdColsStmt = statements.get(SQLStatements.SelectNonUpd);
		if (nonUpdColsStmt!=null && nonUpdColsStmt.statement != null){
			List<Map<String,String>> result = executeQuery(nonUpdColsStmt); // select statenent
			if (result.size()>0){
				firstRow = result.get(0);//first row
			}
		}
		nameValues= null;
		return firstRow;
		
	}

	
	
	private String checkForNull(Statement statement,
			Map<String,String> values, List<Placeholders> placeholder){
		List<String> deletedKeys = new ArrayList<String>();
		String statementStr = StatementUtil.checkForNullClause(statement.statement, values,deletedKeys);
		
		for(String deletedKey:deletedKeys){
//		for(Entry<String,String> row:values.entrySet()){
//			if (row.getValue() == null||row.getValue().isEmpty()){
				List<Placeholders> list1 = Collections.unmodifiableList(placeholder);
				for(Placeholders pl:list1){
//					if (pl.fieldName.equals(row.getKey())){
					if (pl.fieldName.equals( deletedKey )){
						placeholder.remove(pl);
					}
//				}
			}
		}
		return statementStr;
	}

//	public void insertEntity()	throws Exception
//	{
//		Statement insertStmt = statements.get(SQLStatements.Insert);
//		executeUpdate(insertStmt);
//		
//	}
//	public void selectEntity()	throws Exception
//	{
//		Statement stmt = statements.get(SQLStatements.Select);
//		executeQuery(stmt);
//		
//	}
//	public void deleteEntity()	throws Exception
//	{
//		Statement stmt = statements.get(SQLStatements.Delete);
//		executeQuery(stmt);
//	}
//
//	public void updateEntity()	throws Exception
//	{
//		Statement insertStmt = statements.get(SQLStatements.Update);
//		executeUpdate(insertStmt);
//	}

	
	private void executeUpdate(Statement statement)	throws Exception
	{
		//Connection conn = connector.getConnection();
		Connection conn=JDBCConnectionProvider.getInstance().getConnection();
		ResultSet resultSet=null;
		PreparedStatement pstmt = null;

//		logger.log(Level.INFO, "SQL statement "+statement.statement, entityName);

		try{
			pstmt = conn.prepareStatement(
					statement.statement);
			for(Placeholders placeholders:statement.placeholder){
				String value = nameValues.get(placeholders.fieldName);
				setSQLValue(pstmt,placeholders,value);
			}
			pstmt.executeUpdate();
		}
		finally{
			if (resultSet != null){
				resultSet.close();
			}
			if (pstmt != null){
				pstmt.close();
			}
		}
	}
	
	private boolean isExist(Statement statement)
		throws Exception
	{
		//Connection conn = connector.getConnection();
		Connection conn = JDBCConnectionProvider.getInstance().getConnection();
		ResultSet resultSet=null;
		PreparedStatement pstmt = null;
//		logger.log(Level.INFO, "SQL statement "+statement.statement, entityName);
		try{
			List<Placeholders> placeHolder = new ArrayList<Placeholders>(statement.placeholder);
			String statementS = checkForNull(statement,nameValues,placeHolder);

			pstmt = conn.prepareStatement(
					statementS);
			for(Placeholders placeholders:placeHolder){
				String value = nameValues.get(placeholders.fieldName);
				setSQLValue(pstmt,placeholders,value);
			}
			resultSet = pstmt.executeQuery();
			if (resultSet.next()){

				return true;
			}
			return false;
		}
		finally{
			if (resultSet != null){
				resultSet.close();
			}
			if (pstmt != null){
				pstmt.close();
			}
		}
	}
	private List<Map<String,String>> executeQuery(Statement statement)
	throws Exception
	{
		//Connection conn = connector.getConnection();
		Connection conn = JDBCConnectionProvider.getInstance().getConnection();
		ResultSet resultSet=null;
		PreparedStatement pstmt = null;
		List<Map<String,String>> retVals = new ArrayList<Map<String,String>>();
//		logger.log(Level.INFO, "SQL statement "+statement.statement, entityName);
		try{
			pstmt = conn.prepareStatement(
					statement.statement);
			for(Placeholders placeholders:statement.placeholder){
				String value = nameValues.get(placeholders.fieldName);
				setSQLValue(pstmt,placeholders,value);
			}
			resultSet = pstmt.executeQuery();
			while (resultSet.next()){
			    ResultSetMetaData rsmd = resultSet.getMetaData();
			    int numColumns = rsmd.getColumnCount();
			    Map<String,String> row = new HashMap<String,String>();
			    // Get the column names; column indices start from 1
			    for (int i=1; i<numColumns+1; i++) {
			        String columnName = rsmd.getColumnName(i);
			        DataType type = DataType.valueOf(rsmd.getColumnTypeName(i));
			        String val = "";
			        if (type == DataType.Date || type == DataType.DATE){
			        	Date dt = resultSet.getDate(columnName);
			        	SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT);
			        	if (dt != null) {
			        		val = sdf.format(dt);
			        	}
			        }else{
			        	val = resultSet.getString(columnName);
			        }
			        row.put(columnName, val);
			    }
			    retVals.add(row);
			}
			return retVals;
		}
		finally{
			if (resultSet != null){
				resultSet.close();
			}
			if (pstmt != null){
				pstmt.close();
			}
		}
	}

	
//	private enum DataTypes{Varchar,Text,Decimal,Numeric,Date}
	private enum DataType{VARCHAR,Varchar,VARCHAR2, Varchar2,TEXT,Text,
		DECIMAL,Decimal,NUMERIC,Numeric,DATE,Date, NUMBER, Number, CHAR}
	private static final String DATE_FORMAT="dd-MMM-yyyy";
	
	private static void setSQLValue(PreparedStatement stmt,
			Placeholders placeholders,String value ) throws Exception{
		
		try {
			

		if (value == null){
			value = placeholders.defaultValue;
			if (value != null && value.startsWith("@")){
				value = value.substring(1);//starts from @sysdate in @@sysdate
			}else{
				value = "";
			}
		}
		DefaultValue defaultValueObject = null;
		Object valueObject = null;
		if(!value.startsWith("$BlankIfNull")){
			if (value.startsWith("@@")||value.startsWith("@")){ //again start with @ meant it is default value where default value provider needs to provide
				value = value.substring(1);
			}
			if (value.startsWith("@")){ //again start with @ meant it is default value where default value provider needs to provide
				defaultValueObject = DefaultValueProvider.getInstance().getValue(value);
			}
			if (defaultValueObject == null){
				valueObject = value;
			}else{
				valueObject = defaultValueObject.getValue();
			}
		}else{
			valueObject = "";
		}	
		String dbDataType="";
		if(placeholders.type!=null && placeholders.type.trim().isEmpty())
		{
			dbDataType=DataType.VARCHAR.toString();
		}
		else
		{
			dbDataType=placeholders.type.trim();
		}
		DataType dataType = DataType.valueOf(dbDataType.toUpperCase());
		if (dataType == DataType.VARCHAR || dataType == DataType.Varchar
			|| dataType == DataType.VARCHAR2 || dataType == DataType.Varchar2	
			|| dataType == DataType.TEXT || dataType == DataType.Text || dataType == DataType.CHAR	
		){
			stmt.setString(placeholders.placeHolderIndex, valueObject.toString());
		}
		else if ( dataType == DataType.Date ||dataType == DataType.DATE ){
			Date dt=null;
			if(valueObject != null && !"".equals(valueObject)){
				if (!(valueObject instanceof Date)){
					SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT);
					dt = sdf.parse(valueObject.toString());
				}else
				{
					dt= (Date)valueObject;
				}
				stmt.setDate(placeholders.placeHolderIndex, new java.sql.Date(dt.getTime()));
			}else{
				stmt.setNull(placeholders.placeHolderIndex, Types.DATE);
			}
		
		} 
		else if ( dataType == DataType.Decimal||dataType == DataType.DECIMAL){
			if(valueObject != null && !"".equals(valueObject)){
				stmt.setDouble(placeholders.placeHolderIndex, Double.valueOf(valueObject.toString()) );
			}else{
				stmt.setNull(placeholders.placeHolderIndex, Types.DECIMAL);
			}
		}
		else if ( dataType == DataType.Numeric||dataType == DataType.NUMERIC 
				|| dataType == DataType.NUMBER|| dataType == DataType.Number){
			stmt.setDouble(placeholders.placeHolderIndex,  Double.valueOf(valueObject.toString()));
		}
		} catch (Exception e) {
//			clogger.error("Error occured for place holder "+placeholders+ 
//					" for value "+value + " PersistHelper:setSQLValue()", e);
			throw e;
		}
	}
	
}

================================

package com.cnk.travelerpibe.common.persistence.sql;

import java.util.ArrayList;
import java.util.List;
//import java.util.Properties;

import com.cnk.travelerpibe.common.persistence.model.AttributeDBMappingModel;
import com.cnk.travelerpibe.common.persistence.model.EntityDBMappingModel;


public class SelectNonUpdSQLGenerator extends AbstractSQLGenerator implements SQLGenerator {

	private static SelectNonUpdSQLGenerator generator = new SelectNonUpdSQLGenerator();
	private SelectNonUpdSQLGenerator(){
	}
	
	public static SelectNonUpdSQLGenerator getInstance(){
		return generator;
	}
	
	
	public Statement generate(EntityDBMappingModel em) throws Exception {
//		Properties prop = loadProperties();
//		String addSchemaBeforeTableName = (String) prop.get("addSchemaBeforeTableName");
//		String tableName="";
//		if("Y".equals(addSchemaBeforeTableName)){
//			tableName = em.getPath()+DOT+em.getTargetObect();
//		}else{
//			tableName = em.getTargetObect();
//		}
		Statement stmt = new Statement();
		String[] columns = columnText(em,stmt);
		if (!"".equals(columns[0])){
			StringBuilder sqlStmt = new StringBuilder();
			sqlStmt.append(DML.Select).append(SPACE_CONST);
			sqlStmt.append(columns[0]).append(SPACE_CONST);
			sqlStmt.append(DML.From).append(SPACE_CONST);
			//append(em.getPath()+DOT+em.getTargetObect()).append(SPACE_CONST);
			if (!em.getPath().isEmpty()){
				sqlStmt.append(em.getPath()).append(DOT);
			}
			sqlStmt.append(em.getTargetObect()).append(SPACE_CONST);

//			append(tableName).append(SPACE_CONST);
			stmt.refresh(); //need to reset
			String pstr=predicateText(em,stmt);
			if (pstr != null && !"".equals(pstr)){
				sqlStmt.append(DML.Where).append(SPACE_CONST).append(pstr);
			}
			stmt.statement = sqlStmt.toString();
		}
		return stmt;
	}
	
	
	protected List<NameValuePair> getColumns(EntityDBMappingModel em, final Statement statment){
		List<NameValuePair> columns=new ArrayList<NameValuePair>();
		for(AttributeDBMappingModel am:em.getAttributes()){
			String columName = am.getTargetName();
			String defaultValue = am.getDefaultValue();
			boolean isUpdAlloed=am.isUpdateable();
			
			if (!isUpdAlloed){
				statment.addPlaceholder(columName,am.getDataType(),isUpdAlloed ,defaultValue);
				columns.add(new NameValuePair(columName,PLACEHOLDER_CONST, false));
			}
		}
		return columns;
	}
	
//	public static final void main(String[] args) throws Exception{
//        EMUnmarshaller unmarshaller = new EMUnmarshaller();
//      String xmlDocument = "<EntityMapping><PublishCriteria>GroupBy</PublishCriteria><Path>VPI</Path><TargetObject>ANSWER_TABLE</TargetObject><AttributeMapping><ParentId/><ParentName/><DataType>VARCHAR</DataType><IsParent>N</IsParent><TargetName>GTABLECODE1</TargetName><updateable>Y</updateable><KeyColSeq>0</KeyColSeq><DefaultValue>COVERAGE_TYPE</DefaultValue><Name/><IsKey>Y</IsKey><IsMandatory>Y</IsMandatory></AttributeMapping><AttributeMapping><ParentId/><ParentName/><DataType>VARCHAR</DataType><IsParent>N</IsParent><TargetName>GTABLECODE2</TargetName><updateable>Y</updateable><KeyColSeq/><DefaultValue/><Name>GTABLECODE2</Name><IsKey>Y</IsKey><IsMandatory>N</IsMandatory></AttributeMapping><AttributeMapping><ParentId/><ParentName/><updateablCol>Y</updateablCol><DataType>VARCHAR</DataType><IsParent>N</IsParent><TargetName>GTABLENAME</TargetName><KeyColSeq/><DefaultValue/><Name>GTABLENAME</Name><IsKey>N</IsKey><IsMandatory>N</IsMandatory></AttributeMapping><AttributeMapping><ParentId/><ParentName/><DataType>DATE</DataType><IsParent>N</IsParent><TargetName>ANS_DATE_GENERATE</TargetName><updateable>Y</updateable><KeyColSeq/><DefaultValue/><Name>ANS_DATE_GENERATE</Name><IsKey>N</IsKey><IsMandatory>N</IsMandatory></AttributeMapping><TargetType>Database</TargetType></EntityMapping>";
//      EntityMappingModel em = unmarshaller.unmarshal(xmlDocument);
//      
//      Statement statment =  new SelectNonUpdSQLGenerator().generate(em);
//      System.out.println(statment);
//	}

}

===========================

package com.cnk.travelerpibe.common.persistence.sql;

//import java.util.Properties;

import java.util.ArrayList;
import java.util.List;

import com.cnk.travelerpibe.common.persistence.model.AttributeDBMappingModel;
import com.cnk.travelerpibe.common.persistence.model.EntityDBMappingModel;



public class SelectSQLGenerator extends AbstractSQLGenerator implements SQLGenerator {
	private static SelectSQLGenerator generator = new SelectSQLGenerator();
	private SelectSQLGenerator(){
	}
	
	public static SelectSQLGenerator getInstance(){
		return generator;
	}
	public Statement generate(EntityDBMappingModel em) throws Exception {
//		Properties prop = loadProperties();
//		String addSchemaBeforeTableName = (String) prop.get("addSchemaBeforeTableName");
//		String tableName="";
//		if("Y".equals(addSchemaBeforeTableName)){
//			tableName = em.getPath()+DOT+em.getTargetObect();
//		}else{
//			tableName = em.getTargetObect();
//		}
		
		
		StringBuilder sqlStmt = new StringBuilder();
		Statement stmt = generateSelect(em);
		sqlStmt.append(stmt.statement );
		String pstr=predicateText(em,stmt);
		if (pstr != null && !"".equals(pstr)){
			sqlStmt.append(DML.Where).append(SPACE_CONST).append(pstr);
		}
		stmt.statement = sqlStmt.toString();
		System.out.println("stmt------------"+stmt);
		return stmt;
	}
	
	public Statement generate(EntityDBMappingModel em, OrderByCols orderByCols){
		Statement stmt = generateSelect(em);

		if (orderByCols == null || orderByCols.cols.size() == 0){
			return stmt;
		}
		
		List<String> targetCols = new ArrayList<>( orderByCols.cols.size());
		for(AttributeDBMappingModel am:em.getAttributes()){
			if (orderByCols.cols.contains( am.getName()) ) {
				targetCols.add(am.getTargetName());
			}
		}
		
		if (targetCols.size() == 0){
			return stmt;
		}
		StringBuilder sqlStmt = new StringBuilder();
		sqlStmt.append(stmt.statement );
		sqlStmt.append(OrderByCols.ORDER_BY).append(SPACE_CONST);
		for(String col:targetCols){
			sqlStmt.append(col).append(SPACE_CONST);
		}
		sqlStmt.append(orderByCols.order );
		stmt.statement = sqlStmt.toString();
		System.out.println("stmtdddddd------------"+stmt);
		return stmt;
	}
	
	private Statement generateSelect(EntityDBMappingModel em){
		Statement stmt = new Statement();
		StringBuilder sqlStmt = new StringBuilder();
		sqlStmt.append(DML.Select).append(SPACE_CONST);
		sqlStmt.append(columnText(em,stmt)[0]).append(SPACE_CONST);
		sqlStmt.append(DML.From).append(SPACE_CONST);
		//append(em.getPath()+DOT+em.getTargetObect()).append(SPACE_CONST);
		if (!em.getPath().isEmpty()){
			sqlStmt.append(em.getPath()).append(DOT);
		}
		sqlStmt.append(em.getTargetObect()).append(SPACE_CONST);
//		append(tableName).append(SPACE_CONST);
		stmt.refresh(); //need to reset
		stmt.statement = sqlStmt.toString();
		System.out.println("stmtssssss------------"+stmt);
		return stmt;
	}
	
//	public static final void main(String[] args) throws Exception{
//        EMUnmarshaller unmarshaller = new EMUnmarshaller();
//      String xmlDocument = "<EntityMapping><PublishCriteria>GroupBy</PublishCriteria><Path>VPI</Path><TargetObject>ANSWER_TABLE</TargetObject><AttributeMapping><ParentId/><ParentName/><DataType>VARCHAR</DataType><IsParent>N</IsParent><TargetName>GTABLECODE1</TargetName><updateable>Y</updateable><KeyColSeq>0</KeyColSeq><DefaultValue>COVERAGE_TYPE</DefaultValue><Name/><IsKey>Y</IsKey><IsMandatory>Y</IsMandatory></AttributeMapping><AttributeMapping><ParentId/><ParentName/><DataType>VARCHAR</DataType><IsParent>N</IsParent><TargetName>GTABLECODE2</TargetName><updateable>N</updateable><KeyColSeq/><DefaultValue>@@BlankIfNull</DefaultValue><Name>GTABLECODE2</Name><IsKey>Y</IsKey><IsMandatory>N</IsMandatory></AttributeMapping><AttributeMapping><ParentId/><ParentName/><updateablCol>Y</updateablCol><DataType>VARCHAR</DataType><IsParent>N</IsParent><TargetName>GTABLENAME</TargetName><KeyColSeq/><DefaultValue/><Name>GTABLENAME</Name><IsKey>N</IsKey><IsMandatory>N</IsMandatory></AttributeMapping><AttributeMapping><ParentId/><ParentName/><DataType>DATE</DataType><IsParent>N</IsParent><TargetName>ANS_DATE_GENERATE</TargetName><updateable>Y</updateable><KeyColSeq/><DefaultValue/><Name>ANS_DATE_GENERATE</Name><IsKey>N</IsKey><IsMandatory>N</IsMandatory></AttributeMapping><TargetType>Database</TargetType></EntityMapping>";
//      EntityMappingModel em = unmarshaller.unmarshal(xmlDocument);
//      
//      Statement statment =  new SelectSQLGenerator().generate(em);
//      System.out.println(statment);
//	}

}

============================
package com.cnk.travelerpibe.common.persistence.sql;

import com.cnk.travelerpibe.common.persistence.model.EntityDBMappingModel;


public interface SQLGenerator {

	public Statement generate(EntityDBMappingModel em) throws Exception;
}

=============================

package com.cnk.travelerpibe.common.persistence.sql;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class Statement {

	int lastIndex = 0;
	//set is used to make sure that unique columns are added.
	Set<String> columns = new HashSet<String>();
	List<Placeholders> placeholder = new ArrayList<Placeholders>();
	public String statement;
	
	
	public void addPlaceholder(String fieldName,String type, boolean updateable){
		addPlaceholder(fieldName,type,updateable, null);
	}

	public void addPlaceholder(String fieldName,String type,boolean updateable, String defaultValue){
		if (columns.add(fieldName)){
			placeholder.add(new Placeholders(fieldName,type,++lastIndex,updateable,defaultValue));
		}
	}
	
	public void removePlaceHolder(String fieldName){
		if (columns.contains(fieldName)){
			columns.remove(fieldName);
			List<Placeholders> list1 = Collections.unmodifiableList(placeholder);
			for(Placeholders pl:list1){
				if (pl.fieldName.equals(fieldName)){
					placeholder.remove(pl);
				}
			}
		}
		
	}
	
	public boolean isUpdateable(String columnName){
		for(Placeholders ph:placeholder){
			if (columnName.equals(ph.fieldName) && ph.updateable){
				return true;
			}
		}
		return false;
	}
	
	public void refresh(){
		lastIndex = 0;
		placeholder.clear();
		columns.clear();
	}
	
	
	
	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append(this.statement);
        for(Placeholders ss:placeholder){
        	sb.append(ss.toString());
        }
		return sb.toString();
	}



	class Placeholders {
		
		Placeholders(String fieldName,String type,int index,boolean updateable,String defaultValue){
			placeHolderIndex = index;
			this.fieldName = fieldName;
			this.type = type;
			this.updateable = updateable;
			this.defaultValue = defaultValue;
		}

		int placeHolderIndex;
		String fieldName;
		String type;
		String defaultValue;
		boolean updateable;
		
		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder();
			sb.append("\nField:").append(fieldName).append(" ");
			sb.append("Type:").append(type).append(" ");
			sb.append("DefaultValue:").append(defaultValue).append(" ");
			sb.append("Updateable:").append(updateable).append(" ");
			sb.append("Index:").append(placeHolderIndex).append(" ");
			
			return sb.toString();
		}
 
	}
}
===============================

package com.cnk.travelerpibe.common.persistence.sql;

import java.util.ArrayList;
import java.util.List;
//import java.util.Properties;

import com.cnk.travelerpibe.common.persistence.model.AttributeDBMappingModel;
import com.cnk.travelerpibe.common.persistence.model.EntityDBMappingModel;

public class UpdateSQLGenerator extends AbstractSQLGenerator implements SQLGenerator {

	
	private static UpdateSQLGenerator generator = new UpdateSQLGenerator();
	private UpdateSQLGenerator(){
	}
	
	public static UpdateSQLGenerator getInstance(){
		return generator;
	}
	public Statement generate(EntityDBMappingModel em) throws Exception {
//		Properties prop = loadProperties();
//		String addSchemaBeforeTableName = (String) prop.get("addSchemaBeforeTableName");
//		String tableName="";
//		if("Y".equals(addSchemaBeforeTableName)){
//			tableName = em.getPath()+DOT+em.getTargetObect();
//		}else{
//			tableName = em.getTargetObect();
//		}
		Statement stmt = new Statement();
		
		String updateT = updateText(em,stmt);
		StringBuilder sqlStmt = new StringBuilder();
		if (!"".equals(updateT)){
			sqlStmt.append(DML.Update).append(SPACE_CONST);
			//sqlStmt.append(em.getPath()+DOT+em.getTargetObect()).append(SET_CONST);
			if (!em.getPath().isEmpty()){
				sqlStmt.append(em.getPath()).append(DOT);
			}
			sqlStmt.append(em.getTargetObect()).append(SPACE_CONST);
//			sqlStmt.append(tableName).append(SPACE_CONST);
			sqlStmt.append(SET_CONST).append(SPACE_CONST);
			sqlStmt.append(updateT);

			//stmt.refresh(); //need to reset
			String pstr=predicateText(em,stmt);
			if (pstr != null && !"".equals(pstr)){
				sqlStmt.append(SPACE_CONST).append(DML.Where).append(SPACE_CONST).append(pstr);
			}
		}
		stmt.statement = sqlStmt.toString();
		return stmt;
	}
	
	protected String updateText(EntityDBMappingModel em, final Statement statment){
		StringBuilder retColText = new StringBuilder();
		int i=0;
		for(NameValuePair nameValue:getColumns(em,statment)){
			if (statment.isUpdateable(nameValue.name)){
				retColText.append(nameValue.name).append(SPACE_CONST).append(EQUAL_CONST).append(SPACE_CONST);
				retColText.append(nameValue.value).append(", ");
				i++;
			}
		}
		if(i>0){
			int length = retColText.length();
			retColText.replace(length-2,length,"");
		}
		return retColText.toString();
	}

	@Override
	protected List<NameValuePair> getColumns(EntityDBMappingModel em, final Statement statment){
		List<NameValuePair> columns=new ArrayList<NameValuePair>();
		for(AttributeDBMappingModel am:em.getAttributes()){
			String columName = am.getTargetName();
			String defaultValue = am.getDefaultValue();
			boolean isUpdAlloed=am.isUpdateable();
			boolean isKey = am.isKey();
			if (!isUpdAlloed || isKey){
				continue;
			}
			
			if (!"".equals(defaultValue) && defaultValue!=null){
				statment.addPlaceholder(columName,am.getDataType(),isUpdAlloed ,defaultValue);
				columns.add(new NameValuePair(columName,PLACEHOLDER_CONST, true));
			}
			else {
				statment.addPlaceholder(columName,am.getDataType(),isUpdAlloed );
				columns.add(new NameValuePair(columName,PLACEHOLDER_CONST, false));
			}
			//columns.add(new NameValuePair(columName,PLACEHOLDER_CONST));
		}
		return columns;
	}

	
//	public static final void main(String[] args) throws Exception{
//      EMUnmarshaller unmarshaller = new EMUnmarshaller();
//      String xmlDocument = "<EntityMapping><PublishCriteria>GroupBy</PublishCriteria><Path>VPI</Path><TargetObject>ANSWER_TABLE</TargetObject><AttributeMapping><ParentId/><ParentName/><DataType>VARCHAR</DataType><IsParent>N</IsParent><TargetName>GTABLECODE1</TargetName><updateable>Y</updateable><KeyColSeq>0</KeyColSeq><DefaultValue>COVERAGE_TYPE</DefaultValue><Name/><IsKey>Y</IsKey><IsMandatory>Y</IsMandatory></AttributeMapping><AttributeMapping><ParentId/><ParentName/><DataType>VARCHAR</DataType><IsParent>N</IsParent><TargetName>GTABLECODE2</TargetName><updateable>N</updateable><KeyColSeq/><DefaultValue/><Name>GTABLECODE2</Name><IsKey>Y</IsKey><IsMandatory>N</IsMandatory></AttributeMapping><AttributeMapping><ParentId/><ParentName/><updateablCol>Y</updateablCol><DataType>VARCHAR</DataType><IsParent>N</IsParent><TargetName>GTABLENAME</TargetName><KeyColSeq/><DefaultValue/><Name>GTABLENAME</Name><IsKey>N</IsKey><IsMandatory>N</IsMandatory></AttributeMapping><AttributeMapping><ParentId/><ParentName/><DataType>DATE</DataType><IsParent>N</IsParent><TargetName>ANS_DATE_GENERATE</TargetName><updateable>Y</updateable><KeyColSeq/><DefaultValue/><Name>ANS_DATE_GENERATE</Name><IsKey>N</IsKey><IsMandatory>N</IsMandatory></AttributeMapping><TargetType>Database</TargetType></EntityMapping>";
//      EntityMappingModel em = unmarshaller.unmarshal(xmlDocument);
//      
//      Statement statment =  new UpdateSQLGenerator().generate(em);
//      System.out.println(statment);
//	}
	
	
}
==================================


#driver=com.mckoi.JDBCDriver
#url=jdbc:mckoi:local://D:/visv-Framework/mckoi1.0.6/db.conf?create_or_boot=true
#user=admin_user
#password=aupass00
#
#isLocalDB=true


#driver=com.mysql.jdbc.Driver
#url=jdbc:mysql://localhost:3306/master
#user=root
#password=

driver=oracle.jdbc.driver.OracleDriver
jdbc.dialect=org.hibernate.dialect.Oracle10gDialect
url=jdbc:oracle:thin:@10.21.12.129:1521:XE
user=siva_master	
password=siva_master
========================================


<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.cnk.travelerpibe</groupId>
    <artifactId>productsetup</artifactId>
    <version>1.0-SNAPSHOT</version>
  </parent>
  <artifactId>cnk-ibe-masters-persisthelper</artifactId>
  
  

  <build>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <configuration>
		    <verbose>true</verbose>
			<compilerVersion>1.7</compilerVersion>
            <source>1.7</source>
            <target>1.7</target>
          </configuration>
        </plugin>
	
		<plugin>
		<groupId>org.apache.maven.plugins</groupId>
		<artifactId>maven-surefire-plugin</artifactId>	
		<version>2.14</version>
		<dependencies>
			<dependency>
				<groupId>org.apache.maven.surefire</groupId>
				<artifactId>surefire-junit47</artifactId>
				<version>2.14</version>
		</dependency>
		</dependencies>
		<!--
		 <configuration>
			<groups>com.cnk.travelerpibe.common.persistence.PeristenceTest</groups>
		  </configuration>
		<executions>
			<execution>
				<goals>
				<goal>integration-test</goal>
				</goals>
				<configuration>
				<includes>
					<include>**/*.class</include>
				</includes>
			</configuration>
			</execution>
		</executions>
		-->
		</plugin>
	  </plugins>
    </pluginManagement>
  </build>

  <!-- <modules>
    <module>cnk-common-empersist</module>
  </modules> -->
  
    <dependencies>
  	<dependency>
		<groupId>org.codehaus.jackson</groupId>
		<artifactId>jackson-mapper-asl</artifactId>
		<version>1.9.12</version>
	</dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.8.1</version>
      <scope>test</scope>
    </dependency>
   <dependency>
      <groupId>mckoi</groupId>
      <artifactId>mckoi</artifactId>
      <version>1.0.2</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

</project>
===============================

product_category_sub_type.select={\"name\":\"product_category_sub_type\",\"targetObect\":\"product_category_sub_type , product_category WHERE product_category_sub_type.PROD_CATGRY_ID = product_category.PROD_CATGRY_ID\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"PROD_CATGRY_SUB_TYPE_ID\",\"targetName\":\"PROD_CATGRY_SUB_TYPE_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"PROD_CATGRY_SUB_TYPE_NAME\",\"targetName\":\"PROD_CATGRY_SUB_TYPE_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"PROD_CATGRY_NAME\",\"targetName\":\"PROD_CATGRY_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"PROD_CATGRY_ID\",\"targetName\":\"PRODUCT_CATEGORY_SUB_TYPE.PROD_CATGRY_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}
product_category_sub_type.save={\"name\":\"product_category_sub_type\",\"targetObect\":\"product_category_sub_type\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"PROD_CATGRY_SUB_TYPE_ID\",\"targetName\":\"PROD_CATGRY_SUB_TYPE_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"PROD_CATGRY_SUB_TYPE_NAME\",\"targetName\":\"PROD_CATGRY_SUB_TYPE_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"PROD_CATGRY_ID\",\"targetName\":\"PROD_CATGRY_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}
product_category_sub_type.update={\"name\":\"product_category_sub_type\",\"targetObect\":\"product_category_sub_type\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"PROD_CATGRY_SUB_TYPE_ID\",\"targetName\":\"PROD_CATGRY_SUB_TYPE_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"PROD_CATGRY_SUB_TYPE_NAME\",\"targetName\":\"PROD_CATGRY_SUB_TYPE_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"PROD_CATGRY_ID\",\"targetName\":\"PROD_CATGRY_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}
product_category_sub_type.delete={\"name\":\"product_category_sub_type\",\"targetObect\":\"product_category_sub_type\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"PROD_CATGRY_SUB_TYPE_ID\",\"targetName\":\"PROD_CATGRY_SUB_TYPE_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false}]}


===============================


/**
 * 
 */
package com.cnk.travelerpibe.master.services.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.type.TypeReference;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.cnk.travelerpibe.common.persistence.jdbc.JDBCConnectionProvider;
import com.cnk.travelerpibe.common.persistence.model.EntityDBMappingModel;
import com.cnk.travelerpibe.common.persistence.sql.DeleteSQLGenerator;
import com.cnk.travelerpibe.common.persistence.sql.InsertSQLGenerator;
import com.cnk.travelerpibe.common.persistence.sql.JDBCConnection;
import com.cnk.travelerpibe.common.persistence.sql.PersistHelper;
import com.cnk.travelerpibe.common.persistence.sql.SelectSQLGenerator;
import com.cnk.travelerpibe.common.persistence.sql.Statement;
import com.cnk.travelerpibe.common.persistence.sql.UpdateSQLGenerator;
import com.cnk.travelerpibe.master.services.IMasterService;
import com.cnk.travelerpibe.master.services.util.CommonServiceUtil;
import com.google.gson.Gson;

/**
 * @author sivaiah.polamreddy
 * 
 */
@Service("masterService")
@Transactional
public class MasterServiceImpl implements IMasterService {

	static ObjectMapper objectMapper;

	@Override
	public String fetchAllMastersJdbc(String tableName) throws Exception {
		System.out.println("common service calling =================="
				+ tableName);
		JDBCConnectionProvider.getInstance().allocateConnection(
				JDBCConnection.connection);
		String jsonModeldata = CommonServiceUtil.getJsonModelData(tableName,
				"select");
		System.out.println("jsonModeldata :" + jsonModeldata);
		objectMapper = new ObjectMapper();
		EntityDBMappingModel em = objectMapper.readValue(jsonModeldata,
				EntityDBMappingModel.class);

		System.out.println("em db model mapping :" + em);
		PersistHelper persistHelper = PersistHelper.getInstance();
		Map<PersistHelper.SQLStatements, Statement> statements = new HashMap<>();
		SelectSQLGenerator selSqlGen = SelectSQLGenerator.getInstance();
		Statement statement = selSqlGen.generate(em);
		System.out.println("recordddd--statement---" + statement);

		Map<String, String> inputs = new HashMap<>();
		List<Map<String, String>> retRecord = persistHelper.executeQuery(
				statement, null);

		String json = new Gson().toJson(retRecord);
		System.out.println("retRecord----" + json);

		return json;
	}

	@Override
	public void saveMasterJDBC(String string, String tableName)
			throws Exception {

		JDBCConnectionProvider.getInstance().allocateConnection(
				JDBCConnection.connection);
		string = "[" + string + "]";
		objectMapper = new ObjectMapper();
		EntityDBMappingModel em = objectMapper.readValue(
				CommonServiceUtil.getJsonModelData(tableName, "save"),
				EntityDBMappingModel.class);
		List<Map<String, String>> list = objectMapper.readValue(string,
				new TypeReference<ArrayList<LinkedHashMap<String, String>>>() {
				});

		PersistHelper persistHelper = PersistHelper.getInstance();
		Map<PersistHelper.SQLStatements, Statement> statements = new HashMap<>();
		InsertSQLGenerator insSqlGen = InsertSQLGenerator.getInstance();
		Statement statement = insSqlGen.generate(em);
		statements.put(PersistHelper.SQLStatements.Insert, statement);
		System.out.println("recordddd--statement---" + statement);
		persistHelper.persist(statements, list);

	}

	@Override
	public void updateMasterJDBC(String string, String tableName)
			throws Exception {
		JDBCConnectionProvider.getInstance().allocateConnection(
				JDBCConnection.connection);

		string = "[" + string + "]";
		objectMapper = new ObjectMapper();
		EntityDBMappingModel em = objectMapper.readValue(
				CommonServiceUtil.getJsonModelData(tableName, "update"),
				EntityDBMappingModel.class);
		List<Map<String, String>> list = objectMapper.readValue(string,
				new TypeReference<ArrayList<LinkedHashMap<String, String>>>() {
				});

		PersistHelper persistHelper = PersistHelper.getInstance();

		Map<PersistHelper.SQLStatements, Statement> statements = new HashMap<>();
		UpdateSQLGenerator updateSqlGen = UpdateSQLGenerator.getInstance();
		Statement statement = updateSqlGen.generate(em);
		statements.put(PersistHelper.SQLStatements.Update, statement);
		System.out.println("recordddd--statement---update " + statement);
		System.out.println(list.get(0));
		// persistHelper.persist(statements, list);
		persistHelper.executeUpdate(statement, list.get(0));

	}

	@Override
	public void deleteMasterJDBC(String string, String tableName)
			throws Exception {
		JDBCConnectionProvider.getInstance().allocateConnection(
				JDBCConnection.connection);
		string = "[" + string + "]";
		objectMapper = new ObjectMapper();
		EntityDBMappingModel em = objectMapper.readValue(
				CommonServiceUtil.getJsonModelData(tableName, "delete"),
				EntityDBMappingModel.class);
		List<Map<String, String>> list = objectMapper.readValue(string,
				new TypeReference<ArrayList<LinkedHashMap<String, String>>>() {
				});

		PersistHelper persistHelper = PersistHelper.getInstance();

		Map<PersistHelper.SQLStatements, Statement> statements = new HashMap<>();
		DeleteSQLGenerator deleteSqlGen = DeleteSQLGenerator.getInstance();
		Statement statement = deleteSqlGen.generate(em);
		statements.put(PersistHelper.SQLStatements.Delete, statement);
		System.out.println("recordddd--statement---delete " + statement);
		System.out.println(list.get(0));
		// persistHelper.persist(statements, list);
		persistHelper.executeUpdate(statement, list.get(0));
	}

	String jasonTabModel = "{\"name\":\"tab\",\"targetObect\":\"tab\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"tname\",\"targetName\":\"tname\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true}]}";
	
	@Override
	public List<Map<String, String>> listTables() throws Exception {
		System.out.println("common service calling ==================");
		JDBCConnectionProvider.getInstance().allocateConnection(
				JDBCConnection.connection);
		objectMapper = new ObjectMapper();
		EntityDBMappingModel em = objectMapper.readValue(jasonTabModel,EntityDBMappingModel.class);
		PersistHelper persistHelper = PersistHelper.getInstance();
		Map<PersistHelper.SQLStatements, Statement> statements = new HashMap<>();
		SelectSQLGenerator selSqlGen = SelectSQLGenerator.getInstance();
		Statement statement = selSqlGen.generate(em);
		
		System.out.println("recordddd--statement---" + statement);
		Map<String, String> inputs = new HashMap<>();
		List<Map<String, String>> retRecord = persistHelper.executeQuery(
				statement, null);
		/*String json = new Gson().toJson(retRecord);
		System.out.println("retRecord----" + json);*/

		return retRecord;
	}

}

=================================

package com.cnk.travelerpibe.master.services.json;

import org.json.JSONObject;


/**
 * A simple POJO that maps to the JSON structure of a JqGrid.
 * <p>
 * The property names of this POJO must match the property names of your
 * JqGrid's jsonReader.
 * 
 * @see <a
 *      href="http://www.trirand.com/jqgridwiki/doku.php?id=wiki:retrieving_data#json_data">JSON
 *      Data</a>
 * 
 */
public class CustomUserResponse {

	/**
	 * Current page of the query
	 */
	private String page;

	/**
	 * Total pages for the query
	 */
	private String total;

	/**
	 * Total number of records for the query
	 */
	private String records;

	/**
	 * An array that contains the actual objects
	 */
	// private List<GridUser> rows;
	private String tableName;
	
	public String getTableName() {
		return tableName;
	}

	public void setTableName(String tableName) {
		this.tableName = tableName;
	}

	//private List<Object> rows;
	
	private String rows;

	

	public void setRows(String rows) {
		this.rows = rows;
	}

//	public void setRows(JSONObject jsonObject) {
//		this.rows = jsonObject;
//	}

	private String colNames;
	
	private Object colModel;

	public CustomUserResponse() {
	}

	public String getPage() {
		return page;
	}

	public void setPage(String page) {
		this.page = page;
	}

	public String getTotal() {
		return total;
	}

	public void setTotal(String total) {
		this.total = total;
	}

	public String getRecords() {
		return records;
	}

	public void setRecords(String records) {
		this.records = records;
	}

	/*public List<Object> getRows() {
		return rows;
	}

	public void setRows(List<Object> rows) {
		this.rows = rows;
	}
*/
	
	public String getRows() {
		return rows;
	}

	public String getColNames() {
		return colNames;
	}

	public void setColNames(String colNames) {
		this.colNames = colNames;
	}

	public Object getColModel() {
		return colModel;
	}

	public void setColModel(Object colModelTemp) {
		this.colModel = colModelTemp;
	}
	
	

}
=====================

package com.cnk.travelerpibe.master.services.json;

import java.util.ArrayList;
import java.util.List;

/**
 * A custom POJO that will be automatically converted to JSON format. 
 * <p>We can use this to send generic messages to our JqGrid, whether a request is successful or not.
 * Of course, you will use plain JavaScript to parse the JSON response. 
 */
public class CustomGenericResponse {

	/**
	 * true if successful. 
	 */
	private Boolean success;
	
	/**
	 * Any custom message, i.e, 'Your request has been processed successfully!'
	 */
	private List<String> message;
	
	public CustomGenericResponse() {
		message = new ArrayList<String>();
	}
	
	public Boolean getSuccess() {
		return success;
	}
	
	public void setSuccess(Boolean success) {
		this.success = success;
	}
	
	public List<String> getMessage() {
		return message;
	}
	
	public void setMessage(String message) {
		this.message.add(message);
	}
	
	
}
=================
/**
 * 
 */
package com.cnk.travelerpibe.master.bean;

import com.cnk.travelerpibe.master.services.json.CustomUserResponse;

/**
 * @author anurag.singh
 *
 */
public class ContactBean {
	Integer id;
	
	String tables;
	
	String Field1;
	
	String Field2;
	
	private String tableName;
	
	private String tableDisplayName;
	
	private CustomUserResponse customUserResponse;
	
	

	/**
	 * @return the customUserResponse
	 */
	public CustomUserResponse getCustomUserResponse() {
		return customUserResponse;
	}

	/**
	 * @param customUserResponse the customUserResponse to set
	 */
	public void setCustomUserResponse(CustomUserResponse customUserResponse) {
		this.customUserResponse = customUserResponse;
	}

	/**
	 * @return the tables
	 */
	public String getTables() {
		return tables;
	}

	/**
	 * @param tables the tables to set
	 */
	public void setTables(String tables) {
		this.tables = tables;
	}

	/**
	 * @return the id
	 */
	public Integer getId() {
		return id;
	}

	/**
	 * @param id the id to set
	 */
	public void setId(Integer id) {
		this.id = id;
	}

	/**
	 * @return the field1
	 */
	public String getField1() {
		return Field1;
	}

	/**
	 * @param field1 the field1 to set
	 */
	public void setField1(String field1) {
		Field1 = field1;
	}

	/**
	 * @return the field2
	 */
	public String getField2() {
		return Field2;
	}

	/**
	 * @param field2 the field2 to set
	 */
	public void setField2(String field2) {
		Field2 = field2;
	}

	public String getTableName() {
		return tableName;
	}

	public void setTableName(String tableName) {
		this.tableName = tableName;
	}

	public String getTableDisplayName() {
		return tableDisplayName;
	}

	public void setTableDisplayName(String tableDisplayName) {
		this.tableDisplayName = tableDisplayName;
	}
	
}
=========================
/**
 * 
 */
package com.cnk.travelerpibe.master.web;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang.WordUtils;
import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.cnk.travelerpibe.master.bean.ContactBean;
import com.cnk.travelerpibe.master.services.IMasterService;
import com.cnk.travelerpibe.master.services.json.CustomGenericResponse;
import com.cnk.travelerpibe.master.services.json.CustomUserResponse;
import com.cnk.travelerpibe.master.web.util.ChangeColNames;
import com.cnk.travelerpibe.master.web.util.CommonControllerUtil;

/**
 * @author sivaiah.polamreddy
 * 
 */
@Controller
public class MasterController {

	@Autowired
	private IMasterService masterService;
	
	@Autowired
	private CommonControllerUtil commonControllerUtil;

	@RequestMapping(value = "/{tableName}", method = RequestMethod.GET)
	public @ResponseBody
	CustomUserResponse getAllResponse(@PathVariable String tableName,
			HttpServletRequest request) throws Exception {
		HttpSession session = request.getSession(true);
		System.out.println("common controller calling==========" + tableName);
		
		String recordList = masterService.fetchAllMastersJdbc(tableName);// JDBC
		String mappingData=commonControllerUtil.getMappingData(tableName);
		
		session.setAttribute("recordList", recordList);
		System.out.println("recordList---" + recordList);
		CustomUserResponse response = new CustomUserResponse();
		response.setRows(recordList);
		response.setRecords(String.valueOf(2));// size()));
		response.setColNames(commonControllerUtil.getColNames(tableName));
		response.setColModel(commonControllerUtil.getColModelNames(tableName,mappingData));
		response.setPage("1");
		response.setTotal("10");
		response.setTableName(tableName);
		return response;
	}

	@RequestMapping(value = "/Add_{tableName}", method = RequestMethod.POST)
	public @ResponseBody
	CustomGenericResponse addMaster(HttpServletRequest request,
			@RequestParam("name") String name, @PathVariable String tableName)
			throws Exception {

		JSONObject jspros = new JSONObject();
		JSONArray jsob = new JSONArray(name);

		System.out.println("J Array  " + jsob);
		System.out.println("J length  " + jsob.length());
		for (int i = 0; i < jsob.length(); i++) {
			JSONObject jjj = new JSONObject(jsob.getString(i));
			jspros.put(jjj.getString("name"), jjj.getString("value"));
			System.out.println("Our data is -- " + jjj.getString("name")
					+ jjj.getString("value"));
		}
		System.out.println("String-Obj--" + jspros.toString());
		Boolean success = true;
		HttpSession session = request.getSession(true);
		String recordList = (String) session.getAttribute("recordList");

		CustomGenericResponse response = new CustomGenericResponse();
		if (success == true) {
			
			masterService.saveMasterJDBC(ChangeColNames.change(jspros.toString(), tableName), tableName);// JDBC
			String recordLists = masterService.fetchAllMastersJdbc(tableName);

			session.setAttribute("recordList", recordLists);
			response.setSuccess(true);
			response.setMessage("Action successful!");
			return response;
		} else {
			response.setSuccess(false);
			response.setMessage("Record Already Exist");
			return response;
		}

	}

	@RequestMapping(value = "/Edit_{tableName}", method = RequestMethod.POST)
	public @ResponseBody
	CustomGenericResponse edit(@RequestParam("id") Integer id, @RequestParam("name") String name,
			@PathVariable String tableName, HttpServletRequest request)
			throws Exception {
		System.out.println("tableName : "+tableName);
		JSONObject jspros = new JSONObject();
		JSONArray jsob = new JSONArray(name);

		System.out.println("J Array  " + jsob);
		System.out.println("J length  " + jsob.length());
		for (int i = 0; i < jsob.length(); i++) {
			JSONObject jjj = new JSONObject(jsob.getString(i));
			jspros.put(jjj.getString("name"), jjj.getString("value"));
			System.out.println("Our data is -- " + jjj.getString("name")
					+ jjj.getString("value"));
		}
		System.out.println("String-Obj--" + jspros.toString());

		Boolean success = true;
		HttpSession session = request.getSession(true);

		CustomGenericResponse response = new CustomGenericResponse();
		if (success == true) {
			masterService.updateMasterJDBC(ChangeColNames.change(jspros.toString(), tableName), tableName);

			String recordLists = masterService.fetchAllMastersJdbc(tableName); // JDBC

			session.setAttribute("recordList", recordLists);
			response.setSuccess(true);
			response.setMessage("Action successful!");
			return response;
		} else {
			response.setSuccess(false);
			response.setMessage("Record Already Exist!");
			return response;
		}

	}

	@RequestMapping(value = "/Del_{tableName}", method = RequestMethod.POST)
	public @ResponseBody
	CustomGenericResponse delete(@RequestParam("id") Integer id, @RequestParam("name") String name,
			@PathVariable String tableName, HttpServletRequest request)
			throws Exception {

		System.out.println("delete function calling" + name);
		JSONObject jspros = new JSONObject();
		JSONArray jsob = new JSONArray(name);

		System.out.println("J Array  " + jsob);
		System.out.println("J length  " + jsob.length());
		for (int i = 0; i < jsob.length(); i++) {
			JSONObject jjj = new JSONObject(jsob.getString(i));
			jspros.put(jjj.getString("name"), jjj.getString("value"));
			System.out.println("Our data is -- " + jjj.getString("name")
					+ jjj.getString("value"));
		}
		System.out.println("String-Obj--" + jspros.toString());

		Boolean success = true;
		HttpSession session = request.getSession(true);

		CustomGenericResponse response = new CustomGenericResponse();
		if (success == true) {
			masterService.deleteMasterJDBC(jspros.toString(), tableName);

			String recordLists = masterService.fetchAllMastersJdbc(tableName); // JDBC
			session.setAttribute("recordList", recordLists);
			response.setSuccess(true);
			response.setMessage("Action successful!");
			return response;
		} else {
			response.setSuccess(false);
			response.setMessage("Record Not Exist!");
			return response;
		}

	}
	
	
	@RequestMapping("/showtables")
    public ModelAndView listTables(@ModelAttribute("contactBean") ContactBean contactBean,BindingResult result,ModelMap modelMap, HttpServletRequest request) throws Exception {
		HttpSession session = request.getSession(true);
		ModelAndView mv = new ModelAndView("GridUser");
	
		List<String> list = new ArrayList<String>();
		
		List<Map<String, String>> s=masterService.listTables();
		for(Map<String, String> ll:s){
			list.addAll(ll.values());
		}
		
		Map<String, String> map = new TreeMap<String, String>();
		
		for (String ss : list) {
			String tableName = ss.toString().toLowerCase();
			map.put(tableName, WordUtils.capitalize(tableName.replace("_", " ")).toLowerCase());
		}
		
		
 		mv.addObject("tableDetailsMap",map);
 		session.setAttribute("tableDetailsMap", map);
        return mv;
    }

}
==============================
package com.cnk.travelerpibe.master.web;

import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.cnk.travelerpibe.master.bean.ContactBean;

@Controller
public class GridController {

	List<Object> colModelTemp = new ArrayList<>();

	@RequestMapping(value = "/gridDetails", method = RequestMethod.GET)
	public String getUsersPage(
			@ModelAttribute("contactBean") ContactBean contactBean,
			ModelMap model) {
		model.addAttribute("tableName", contactBean.getTables());
		return "GridUser";
	}

}
===============================

/**
 * 
 */
package com.cnk.travelerpibe.master.web.util;

import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.cnk.travelerpibe.common.persistence.io.ClassPathResource;
import com.cnk.travelerpibe.common.persistence.io.Resource;
import com.cnk.travelerpibe.common.persistence.sql.AbstractSQLGenerator;
import com.cnk.travelerpibe.master.services.IMasterService;

/**
 * @author sivaiah.polamreddy
 * 
 */
@Component("commonControllerUtil")
public class CommonControllerUtil {

	@Autowired
	private IMasterService masterService;

	public String getColNames(String tableName) {

		String colNameTemp = "";
		try {
			Resource resource = new ClassPathResource("gridColNames.properties");
			Properties properties = new Properties();
			properties.load(resource.getInputStream());
			colNameTemp="["+properties.getProperty(tableName)+"]";
			System.out.println("grid colnames: "+colNameTemp);
		} catch (Exception e) {
			System.out.println(e);
		}
		
		
		
		/*if (tableName.equalsIgnoreCase("ibe_master_categories_group")) {
			colNameTemp = "['CATEGORY ID','CATEGORY NAME','CATEGORY STATUS']";
		}

		if (tableName.equalsIgnoreCase("ibe_master_country")) {
			colNameTemp = "['COUNTRY ID','COUNTRY IATA CODE','COUNTRY NAME']";
		}

		if (tableName.equalsIgnoreCase("ibe_master_state")) {
			colNameTemp = "['STATE ID','STATE IATA CODE','STATE NAME','COUNTRY NAME']";
		}
		if (tableName.equalsIgnoreCase("ibe_master_city")) {
			colNameTemp = "['CITY ID','CITY IATA CODE','CITY NAME', 'STATE NAME']";
		}
		if (tableName.equalsIgnoreCase("ibe_master_area")) {
			colNameTemp = "['AREA ID','AREA NAME', 'AREA STATUS','CITY NAME']";
		}
		if (tableName.equalsIgnoreCase("ibe_group_of_companies")) {
			colNameTemp = "['GROUP OF COMPANIES ID','GROUP OF COMPANIES NAME']";
		}
		if (tableName.equalsIgnoreCase("product_category")) {
			colNameTemp = "['PRODUCT CATEGORY ID','PRODUCT CATEGORY NAME']";
		}
		if (tableName.equalsIgnoreCase("product_category_sub_type")) {
			colNameTemp = "['PRODUCT CATEGORY SUB TYPE ID','PRODUCT CATEGORY SUB TYPE NAME','PRODUCT CATEGORY NAME']";
		}
		if (tableName.equalsIgnoreCase("url_type_master")) {
			colNameTemp = "['URL TYPE ID','URL TYPE NAME']";
		}
		if (tableName.equalsIgnoreCase("cabin_class")) {
			colNameTemp = "['CABIN CLASS ID','CABIN CLASS NAME']";
		}

		if (tableName.equalsIgnoreCase("traveler_program_master")) {
			colNameTemp = "['TRAVELER PROGRAM ID','TARVELER PROGRAM NAME']";
		}

		if (tableName.equalsIgnoreCase("airline_type")) {
			colNameTemp = "['AIRLINE TYPE ID','AIRLINE TYPE NAME']";
		}

		if (tableName.equalsIgnoreCase("status_master")) {
			colNameTemp = "['STATUS ID','STATUS VALUE','STATUS FOR']";
		}
*/
		return colNameTemp;
	}

	public List<Object> getColModelNames(String tableName, String value) {
		List<Object> colModelTemp = new ArrayList<>();
		System.out.println("value============ :"+value);
		String str = "[";
		
		try {
			Resource resource = new ClassPathResource("gridColModelNames.properties");
			Properties properties = new Properties();
			properties.load(resource.getInputStream());
			str=str+properties.getProperty(tableName)+value+"}]";
			System.out.println("grid colModelNames: "+str);
			colModelTemp.add(str);
			
		} catch (Exception e) {
			System.out.println(e);
		}
		
		
		

		/*if (tableName.equalsIgnoreCase("ibe_master_categories_group")) {
			str = str
					+ "{name:'IBE_PRO_CATEGORY_GROUP_ID', index:'IBE_PRO_CATEGORY_GROUP_ID', hidden:true, editable: true},"
					+ "{name:'IBE_PRO_CATEGORY_DESCRIPTION', index:'IBE_PRO_CATEGORY_DESCRIPTION', align: 'center', editrules:{required:true},editable: true},"
					+ "{name:'IBE_STATUS', index:'IBE_STATUS', align: 'center', editrules:{required:true},editable: true},]";
			colModelTemp.add(str);
		}

		if (tableName.equalsIgnoreCase("ibe_master_country")) {

			str = str
					+ "{name:'IBE_COUNTRY_ID', index:'IBE_COUNTRY_ID', editable: true, hidden: true},"
					+ "{name:'IBE_COUNTRY_IATA_CODE', index:'IBE_COUNTRY_IATA_CODE', align: 'center', editrules:{required:true},editable: true},"
					+ "{name:'IBE_COUNTRY_NAME', index:'IBE_COUNTRY_NAME', align: 'center', editrules:{required:true},editable: true},]";
			colModelTemp.add(str);
		}

		if (tableName.equalsIgnoreCase("ibe_master_state")) {

			// String value="{value:'17:Australia;15:India;16:Srilanka'}";

			str = str
					+ "{name:'IBE_STATE_ID', index:'IBE_STATE_ID', editable: true, hidden: true},"
					+ "{name:'IBE_STATE_IATA_CODE', index:'IBE_STATE_IATA_CODE', align: 'center', editable: true,editrules:{required:true}},"
					+ "{name:'IBE_STATE_NAME', index:'IBE_STATE_NAME', align: 'center', editrules:{required:true},editable: true},"
					+ "{name:'IBE_COUNTRY_NAME', index:'IBE_COUNTRY_NAME', align: 'center', editrules:{required:true},editable: true, edittype: 'select', editoptions:"
					+ value + "},";
			str = str.substring(0, str.length() - 1) + "]";
			colModelTemp.add(str);
		}

		if (tableName.equalsIgnoreCase("ibe_master_city")) {

			str = str
					+ "{name:'IBE_CITY_ID', index:'IBE_CITY_ID', editable: true, hidden: true},"
					+ "{name:'IBE_CITY_IATA_CODE', index:'IBE_CITY_IATA_CODE', align: 'center', editable: true,editrules:{required:true}},"
					+ "{name:'IBE_CITY_NAME', index:'IBE_CITY_NAME', align: 'center', editrules:{required:true},editable: true},"
					+ "{name:'IBE_STATE_NAME', index:'IBE_STATE_NAME', align: 'center', editable: true, edittype: 'select', editrules: { required: true },editoptions:"
					+ value + "},";
			str = str.substring(0, str.length() - 1) + "]";
			colModelTemp.add(str);
		}

		if (tableName.equalsIgnoreCase("ibe_master_area")) {
			str = str
					+ "{name:'IBE_AREA_ID', index:'IBE_AREA_ID', editable: true, hidden: true},"
					+ "{name:'IBE_AREA_NAME', index:'IBE_AREA_NAME', align: 'center', editable: true,editrules:{required:true}},"
					+ "{name:'IBE_AREA_STATUS', index:'IBE_AREA_STATUS', align: 'center', editrules:{required:true},editable: true},"
					+ "{name:'IBE_CITY_NAME', index:'IBE_CITY_NAME', align: 'center', editable: true, edittype: 'select', editrules: { required: true },editoptions:"
					+ value + "},";
			str = str.substring(0, str.length() - 1) + "]";
			colModelTemp.add(str);
		}

		if (tableName.equalsIgnoreCase("ibe_group_of_companies")) {
			str = str
					+ "{name:'COMPANIES_ID', index:'COMPANIES_ID', editable: true, hidden: true},"
					+ "{name:'COMPANIES_NAME', index:'COMPANIES_NAME', editrules:{required:true},editable: true, align: 'center'},]";
			colModelTemp.add(str);
		}

		if (tableName.equalsIgnoreCase("product_category")) {
			str = str
					+ "{name:'PROD_CATGRY_ID', index:'PROD_CATGRY_ID', editable: true, hidden: true},"
					+ "{name:'PROD_CATGRY_NAME', index:'PROD_CATGRY_NAME', editrules:{required:true},editable: true, align: 'center'},]";
			colModelTemp.add(str);
		}

		if (tableName.equalsIgnoreCase("product_category_sub_type")) {
			str = str
					+ "{name:'PROD_CATGRY_SUB_TYPE_ID', index:'PROD_CATGRY_SUB_TYPE_ID', editable: true, hidden: true},"
					+ "{name:'PROD_CATGRY_SUB_TYPE_NAME', index:'PROD_CATGRY_SUB_TYPE_NAME', editrules:{required:true},editable: true, align: 'center'},"
					+ "{name:'PROD_CATGRY_NAME', index:'PROD_CATGRY_NAME', edittype: 'select', editrules:{required:true},editable: true, align: 'center', editoptions:"
					+ value + "},]";
			colModelTemp.add(str);
		}

		if (tableName.equalsIgnoreCase("url_type_master")) {
			str = str
					+ "{name:'URL_TYPE_ID', index:'URL_TYPE_ID', editable: true, hidden: true},"
					+ "{name:'URL_TYPE_NAME', index:'URL_TYPE_NAME', editrules:{required:true}, editable: true, align: 'center'},]";
			colModelTemp.add(str);
		}

		if (tableName.equalsIgnoreCase("cabin_class")) {
			str = str
					+ "{name:'CABIN_CLASS_ID', index:'CABIN_CLASS_ID', editable: true, hidden: true},"
					+ "{name:'CABIN_CLASS_NAME', index:'CABIN_CLASS_NAME', editrules:{required:true}, editable: true, align: 'center'},]";
			colModelTemp.add(str);
		}

		if (tableName.equalsIgnoreCase("traveler_program_master")) {
			str = str
					+ "{name:'TRAVELER_PROGRAM_ID', index:'TRAVELER_PROGRAM_ID', editable: true, hidden: true},"
					+ "{name:'TRAVELER_PROGRAM_NAME', index:'TRAVELER_PROGRAM_NAME', editrules:{required:true}, editable: true, align: 'center'},]";
			colModelTemp.add(str);
		}

		if (tableName.equalsIgnoreCase("airline_type")) {
			str = str
					+ "{name:'AIRLINE_TYPE_ID', index:'AIRLINE_TYPE_ID', editable: true, hidden: true},"
					+ "{name:'AIRLINE_TYPE_NAME', index:'AIRLINE_TYPE_NAME', editrules:{required:true}, editable: true, align: 'center'},]";
			colModelTemp.add(str);
		}

		if (tableName.equalsIgnoreCase("status_master")) {
			str = str
					+ "{name:'STATUS_ID', index:'STATUS_ID', editable: true, hidden: true},"
					+ "{name:'STATUS_VALUE', index:'STATUS_VALUE', editrules:{required:true}, editable: true, align: 'center'},"
					+ "{name:'STATUS_FOR', index:'STATUS_FOR', editrules:{required:true}, editable: true, align: 'center'},]";
			colModelTemp.add(str);
		}*/

		System.out.println("colModelTemp :"+colModelTemp);
		return colModelTemp;
	}

	public String getMappingData(String tableName) throws Exception {

		String value = "";
		if (tableName.equalsIgnoreCase("ibe_master_state")) {
			value = resultValue("ibe_master_country", "IBE_COUNTRY_NAME",
					"IBE_COUNTRY_ID");
		} else if (tableName.equalsIgnoreCase("ibe_master_city")) {
			value = resultValue("ibe_master_state", "IBE_STATE_NAME",
					"IBE_STATE_ID");
		} else if (tableName.equalsIgnoreCase("ibe_master_area")) {
			value = resultValue("ibe_master_city", "IBE_CITY_NAME",
					"IBE_CITY_ID");
		} else if (tableName.equalsIgnoreCase("product_category_sub_type")) {
			value = resultValue("product_category", "PROD_CATGRY_NAME",
					"PROD_CATGRY_ID");
		}

		return value;
	}

	public String resultValue(String table, String col1, String col2)
			throws Exception {
		String value = "";
		String json = masterService.fetchAllMastersJdbc(table);
		value = "{value:'";

		JSONArray jsonArray = new JSONArray(json);
		for (int i = 0; i < jsonArray.length(); i++) {
			JSONObject json_data = jsonArray.getJSONObject(i);
			String name = json_data.getString(col1);
			String code = json_data.getString(col2);
			value = value + code + ":" + name + ";";
		}
		value = value + "'}";
		value = value.toString().replaceAll(";'", "'");
		System.out.println(value);

		return value;

	}

}
===============================

/**
 * 
 */
package com.cnk.travelerpibe.master.web.util;

/**
 * @author sivaiah.polamreddy
 * 
 */
public class ChangeColNames {

	public static String change(String jsonPros, String tableName) {

		String jsprosvalue = "";
		
		if (tableName.equalsIgnoreCase("ibe_master_state")) {
			System.out.println("Before Modify :"+jsonPros.toString());
			jsprosvalue=jsonPros.toString().replace("IBE_COUNTRY_NAME", "IBE_COUNTRY_ID");
			System.out.println("After Modify :"+jsprosvalue);
		}
		else if(tableName.equalsIgnoreCase("ibe_master_city")){
			System.out.println("Before Modify :"+jsonPros.toString());
			jsprosvalue=jsonPros.toString().replace("IBE_STATE_NAME", "IBE_STATE_ID");
			System.out.println("After Modify :"+jsprosvalue);
		}
		else if(tableName.equalsIgnoreCase("ibe_master_area")){
			System.out.println("Before Modify :"+jsonPros.toString());
			jsprosvalue=jsonPros.toString().replace("IBE_CITY_NAME", "IBE_CITY_ID");
			System.out.println("After Modify :"+jsprosvalue);
		}
		else if(tableName.equalsIgnoreCase("product_category_sub_type")){
			System.out.println("Before Modify :"+jsonPros.toString());
			jsprosvalue=jsonPros.toString().replace("PROD_CATGRY_NAME", "PROD_CATGRY_ID");
			System.out.println("After Modify :"+jsprosvalue);
		}
		else {
			jsprosvalue=jsonPros;
		}

		return jsprosvalue;
	}
}
============================

/**
 * 
 */
package com.cnk.travelerpibe.master.services.util;

import java.util.Properties;

import com.cnk.travelerpibe.common.persistence.io.ClassPathResource;
import com.cnk.travelerpibe.common.persistence.io.Resource;

/**
 * @author sivaiah.polamreddy
 * 
 */
public class CommonServiceUtil {

	public static String getJsonModelData(String tablename, String modetype) {

		String jsonModeldata = "";
		
		
		try {
			Resource resource = new ClassPathResource("JsonDBMapping.properties");
			Properties properties = new Properties();
			properties.load(resource.getInputStream());
			jsonModeldata=properties.getProperty(tablename+"."+modetype);
			System.out.println("JsonDBMapping ColNames: "+jsonModeldata);
		} catch (Exception e) {
			System.out.println(e);
		}

		/*String commonAuditString = "{\"name\":\"CREATED_BY_USER_ID\",\"targetName\":\"CREATED_BY_USER_ID\",\"dataType\":\"NUMBER\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"CREATED_ON_DATE\",\"targetName\":\"CREATED_ON_DATE\",\"dataType\":\"DATE\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"LAST_UPDATED_BY_USER_ID\",\"targetName\":\"LAST_UPDATED_BY_USER_ID\",\"dataType\":\"NUMBER\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"LAST_UPDATED_ON_DATE\",\"targetName\":\"LAST_UPDATED_ON_DATE\",\"dataType\":\"DATE\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"DELETED_FLAG\",\"targetName\":\"DELETED_FLAG\",\"dataType\":\"CHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"DELETED_BY_USER_ID\",\"targetName\":\"DELETED_BY_USER_ID\",\"dataType\":\"NUMBER\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"DELETED_ON_DATE\",\"targetName\":\"DELETED_ON_DATE\",\"dataType\":\"DATE\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}";

		if (tablename.equalsIgnoreCase("ibe_master_country")) {
			if (modetype.equalsIgnoreCase("select")
					|| modetype.equalsIgnoreCase("save")) {
				jsonModeldata = "{\"name\":\"ibe_master_country\",\"targetObect\":\"ibe_master_country\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"IBE_COUNTRY_ID\",\"targetName\":\"IBE_COUNTRY_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"IBE_COUNTRY_IATA_CODE\",\"targetName\":\"IBE_COUNTRY_IATA_CODE\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_COUNTRY_NAME\",\"targetName\":\"IBE_COUNTRY_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_COUNTRY_STATUS\",\"targetName\":\"IBE_COUNTRY_STATUS\",\"dataType\":\"TINYINT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true}]}";
			} else if (modetype.equalsIgnoreCase("update")) {

				jsonModeldata = "{\"name\":\"ibe_master_country\",\"targetObect\":\"ibe_master_country\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"IBE_COUNTRY_ID\",\"targetName\":\"IBE_COUNTRY_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"IBE_COUNTRY_IATA_CODE\",\"targetName\":\"IBE_COUNTRY_IATA_CODE\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_COUNTRY_NAME\",\"targetName\":\"IBE_COUNTRY_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_COUNTRY_STATUS\",\"targetName\":\"IBE_COUNTRY_STATUS\",\"dataType\":\"TINYINT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true}]}";

			} else if (modetype.equalsIgnoreCase("delete")) {
				jsonModeldata = "{\"name\":\"ibe_master_country\",\"targetObect\":\"ibe_master_country\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"IBE_COUNTRY_ID\",\"targetName\":\"IBE_COUNTRY_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false}]}";

			}
		} else if (tablename.equalsIgnoreCase("ibe_master_categories_group")) {
			if (modetype.equalsIgnoreCase("select")
					|| modetype.equalsIgnoreCase("save")) {
				jsonModeldata = "{\"name\":\"ibe_master_categories_group\",\"targetObect\":\"ibe_master_categories_group\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"IBE_PRO_CATEGORY_GROUP_ID\",\"targetName\":\"IBE_PRO_CATEGORY_GROUP_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"IBE_STATUS\",\"targetName\":\"IBE_STATUS\",\"dataType\":\"TINYINT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_PRO_CATEGORY_DESCRIPTION\",\"targetName\":\"IBE_PRO_CATEGORY_DESCRIPTION\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true}]}";
			} else if (modetype.equalsIgnoreCase("update")) {
				jsonModeldata = "{\"name\":\"ibe_master_categories_group\",\"targetObect\":\"ibe_master_categories_group\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"IBE_PRO_CATEGORY_GROUP_ID\",\"targetName\":\"IBE_PRO_CATEGORY_GROUP_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"IBE_STATUS\",\"targetName\":\"IBE_STATUS\",\"dataType\":\"TINYINT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_PRO_CATEGORY_DESCRIPTION\",\"targetName\":\"IBE_PRO_CATEGORY_DESCRIPTION\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true}]}";

			} else if (modetype.equalsIgnoreCase("delete")) {
				jsonModeldata = "{\"name\":\"ibe_master_categories_group\",\"targetObect\":\"ibe_master_categories_group\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"IBE_PRO_CATEGORY_GROUP_ID\",\"targetName\":\"IBE_PRO_CATEGORY_GROUP_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false}]}";

			}
		}

		else if (tablename.equalsIgnoreCase("ibe_master_state")) {
			if (modetype.equalsIgnoreCase("select")) {
				jsonModeldata = "{\"name\":\"ibe_master_state\",\"targetObect\":\"ibe_master_state , ibe_master_country WHERE IBE_MASTER_STATE.IBE_COUNTRY_ID = IBE_MASTER_COUNTRY.IBE_COUNTRY_ID\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"IBE_STATE_ID\",\"targetName\":\"IBE_STATE_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_STATE_IATA_CODE\",\"targetName\":\"IBE_STATE_IATA_CODE\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_STATE_NAME\",\"targetName\":\"IBE_STATE_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_COUNTRY_NAME\",\"targetName\":\"IBE_COUNTRY_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_STATE_STATUS\",\"targetName\":\"IBE_STATE_STATUS\",\"dataType\":\"TINYINT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_COUNTRY_ID\",\"targetName\":\"IBE_MASTER_STATE.IBE_COUNTRY_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}";
			} else if (modetype.equalsIgnoreCase("save")) {
				jsonModeldata = "{\"name\":\"ibe_master_state\",\"targetObect\":\"ibe_master_state\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"IBE_STATE_ID\",\"targetName\":\"IBE_STATE_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"IBE_STATE_IATA_CODE\",\"targetName\":\"IBE_STATE_IATA_CODE\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_STATE_NAME\",\"targetName\":\"IBE_STATE_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_STATE_STATUS\",\"targetName\":\"IBE_STATE_STATUS\",\"dataType\":\"TINYINT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_COUNTRY_ID\",\"targetName\":\"IBE_COUNTRY_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":false}]}";
			} else if (modetype.equalsIgnoreCase("update")) {
				jsonModeldata = "{\"name\":\"ibe_master_state\",\"targetObect\":\"ibe_master_state\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"IBE_STATE_ID\",\"targetName\":\"IBE_STATE_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"IBE_STATE_IATA_CODE\",\"targetName\":\"IBE_STATE_IATA_CODE\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_STATE_NAME\",\"targetName\":\"IBE_STATE_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_STATE_STATUS\",\"targetName\":\"IBE_STATE_STATUS\",\"dataType\":\"TINYINT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_COUNTRY_ID\",\"targetName\":\"IBE_COUNTRY_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}";

			} else if (modetype.equalsIgnoreCase("delete")) {
				jsonModeldata = "{\"name\":\"ibe_master_state\",\"targetObect\":\"ibe_master_state\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"IBE_STATE_ID\",\"targetName\":\"IBE_STATE_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false}]}";

			}
		}

		else if (tablename.equalsIgnoreCase("ibe_master_city")) {
			if (modetype.equalsIgnoreCase("select")) {
				jsonModeldata = "{\"name\":\"ibe_master_city\",\"targetObect\":\"ibe_master_city , ibe_master_state WHERE IBE_MASTER_CITY.IBE_STATE_ID = IBE_MASTER_STATE.IBE_STATE_ID\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"IBE_CITY_ID\",\"targetName\":\"IBE_CITY_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_CITY_IATA_CODE\",\"targetName\":\"IBE_CITY_IATA_CODE\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_CITY_NAME\",\"targetName\":\"IBE_CITY_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_CITY_STATUS\",\"targetName\":\"IBE_CITY_STATUS\",\"dataType\":\"TINYINT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_STATE_NAME\",\"targetName\":\"IBE_STATE_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_STATE_ID\",\"targetName\":\"IBE_MASTER_CITY.IBE_STATE_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}";
			} else if (modetype.equalsIgnoreCase("save")) {
				jsonModeldata = "{\"name\":\"ibe_master_city\",\"targetObect\":\"ibe_master_city\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"IBE_CITY_ID\",\"targetName\":\"IBE_CITY_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"IBE_CITY_IATA_CODE\",\"targetName\":\"IBE_CITY_IATA_CODE\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_CITY_NAME\",\"targetName\":\"IBE_CITY_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_CITY_STATUS\",\"targetName\":\"IBE_CITY_STATUS\",\"dataType\":\"TINYINT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_STATE_ID\",\"targetName\":\"IBE_STATE_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":false}]}";
			} else if (modetype.equalsIgnoreCase("update")) {
				jsonModeldata = "{\"name\":\"ibe_master_city\",\"targetObect\":\"ibe_master_city\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"IBE_CITY_ID\",\"targetName\":\"IBE_CITY_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"IBE_CITY_IATA_CODE\",\"targetName\":\"IBE_CITY_IATA_CODE\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_CITY_NAME\",\"targetName\":\"IBE_CITY_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_CITY_STATUS\",\"targetName\":\"IBE_CITY_STATUS\",\"dataType\":\"TINYINT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_STATE_ID\",\"targetName\":\"IBE_STATE_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}";

			} else if (modetype.equalsIgnoreCase("delete")) {
				jsonModeldata = "{\"name\":\"ibe_master_city\",\"targetObect\":\"ibe_master_city\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"IBE_CITY_ID\",\"targetName\":\"IBE_CITY_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false}]}";

			}
		}

		else if (tablename.equalsIgnoreCase("ibe_master_area")) {
			if (modetype.equalsIgnoreCase("select")) {
				jsonModeldata = "{\"name\":\"ibe_master_area\",\"targetObect\":\"ibe_master_area , ibe_master_city WHERE IBE_MASTER_AREA.IBE_CITY_ID = IBE_MASTER_CITY.IBE_CITY_ID\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"IBE_AREA_ID\",\"targetName\":\"IBE_AREA_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_AREA_NAME\",\"targetName\":\"IBE_AREA_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_AREA_STATUS\",\"targetName\":\"IBE_AREA_STATUS\",\"dataType\":\"TINYINT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_CITY_ID\",\"targetName\":\"IBE_MASTER_AREA.IBE_CITY_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"IBE_CITY_NAME\",\"targetName\":\"IBE_CITY_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true}]}";
			} else if (modetype.equalsIgnoreCase("save")) {
				jsonModeldata = "{\"name\":\"ibe_master_area\",\"targetObect\":\"ibe_master_area\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"IBE_AREA_ID\",\"targetName\":\"IBE_AREA_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"IBE_AREA_NAME\",\"targetName\":\"IBE_AREA_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_AREA_STATUS\",\"targetName\":\"IBE_AREA_STATUS\",\"dataType\":\"TINYINT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_CITY_ID\",\"targetName\":\"IBE_CITY_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":false}]}";
			} else if (modetype.equalsIgnoreCase("update")) {
				jsonModeldata = "{\"name\":\"ibe_master_area\",\"targetObect\":\"ibe_master_area\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"IBE_AREA_ID\",\"targetName\":\"IBE_AREA_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"IBE_AREA_NAME\",\"targetName\":\"IBE_AREA_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_AREA_STATUS\",\"targetName\":\"IBE_AREA_STATUS\",\"dataType\":\"TINYINT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_CITY_ID\",\"targetName\":\"IBE_CITY_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}";

			} else if (modetype.equalsIgnoreCase("delete")) {
				jsonModeldata = "{\"name\":\"ibe_master_area\",\"targetObect\":\"ibe_master_area\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"IBE_AREA_ID\",\"targetName\":\"IBE_AREA_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false}]}";

			}
		}

		else if (tablename.equalsIgnoreCase("ibe_group_of_companies")) {
			if (modetype.equalsIgnoreCase("select")
					|| modetype.equalsIgnoreCase("save")) {
				jsonModeldata = "{\"name\":\"ibe_group_of_companies\",\"targetObect\":\"ibe_group_of_companies\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"COMPANIES_ID\",\"targetName\":\"COMPANIES_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"COMPANIES_NAME\",\"targetName\":\"COMPANIES_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}";
			} else if (modetype.equalsIgnoreCase("update")) {

				jsonModeldata = "{\"name\":\"ibe_group_of_companies\",\"targetObect\":\"ibe_group_of_companies\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"COMPANIES_ID\",\"targetName\":\"COMPANIES_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"COMPANIES_NAME\",\"targetName\":\"COMPANIES_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}";

			} else if (modetype.equalsIgnoreCase("delete")) {
				jsonModeldata = "{\"name\":\"ibe_group_of_companies\",\"targetObect\":\"ibe_group_of_companies\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"COMPANIES_ID\",\"targetName\":\"COMPANIES_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false}]}";

			}

		}

		else if (tablename.equalsIgnoreCase("product_category")) {
			if (modetype.equalsIgnoreCase("select")
					|| modetype.equalsIgnoreCase("save")) {

				jsonModeldata = "{\"name\":\"product_category\",\"targetObect\":\"product_category\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"PROD_CATGRY_ID\",\"targetName\":\"PROD_CATGRY_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"PROD_CATGRY_NAME\",\"targetName\":\"PROD_CATGRY_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}";
			}
			else if (modetype.equalsIgnoreCase("update")) {
				jsonModeldata = "{\"name\":\"product_category\",\"targetObect\":\"product_category\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"PROD_CATGRY_ID\",\"targetName\":\"PROD_CATGRY_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"PROD_CATGRY_NAME\",\"targetName\":\"PROD_CATGRY_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}";
				
			}
			else if (modetype.equalsIgnoreCase("delete")) {
				jsonModeldata = "{\"name\":\"product_category\",\"targetObect\":\"product_category\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"PROD_CATGRY_ID\",\"targetName\":\"PROD_CATGRY_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false}]}";
				
			}
			
		}
		
		else if (tablename.equalsIgnoreCase("product_category_sub_type")) {
			if (modetype.equalsIgnoreCase("select")) {
				jsonModeldata = "{\"name\":\"product_category_sub_type\",\"targetObect\":\"product_category_sub_type , product_category WHERE product_category_sub_type.PROD_CATGRY_ID = product_category.PROD_CATGRY_ID\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"PROD_CATGRY_SUB_TYPE_ID\",\"targetName\":\"PROD_CATGRY_SUB_TYPE_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"PROD_CATGRY_SUB_TYPE_NAME\",\"targetName\":\"PROD_CATGRY_SUB_TYPE_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"PROD_CATGRY_NAME\",\"targetName\":\"PROD_CATGRY_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"PROD_CATGRY_ID\",\"targetName\":\"PRODUCT_CATEGORY_SUB_TYPE.PROD_CATGRY_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}";
				
			}
			else if (modetype.equalsIgnoreCase("save")) {
				jsonModeldata = "{\"name\":\"product_category_sub_type\",\"targetObect\":\"product_category_sub_type\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"PROD_CATGRY_SUB_TYPE_ID\",\"targetName\":\"PROD_CATGRY_SUB_TYPE_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"PROD_CATGRY_SUB_TYPE_NAME\",\"targetName\":\"PROD_CATGRY_SUB_TYPE_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"PROD_CATGRY_ID\",\"targetName\":\"PROD_CATGRY_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}";
			
			}
			else if (modetype.equalsIgnoreCase("update")) {
				jsonModeldata = "{\"name\":\"product_category_sub_type\",\"targetObect\":\"product_category_sub_type\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"PROD_CATGRY_SUB_TYPE_ID\",\"targetName\":\"PROD_CATGRY_SUB_TYPE_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"PROD_CATGRY_SUB_TYPE_NAME\",\"targetName\":\"PROD_CATGRY_SUB_TYPE_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"PROD_CATGRY_ID\",\"targetName\":\"PROD_CATGRY_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}";
				
			}
			else if (modetype.equalsIgnoreCase("delete")) {
				jsonModeldata = "{\"name\":\"product_category_sub_type\",\"targetObect\":\"product_category_sub_type\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"PROD_CATGRY_SUB_TYPE_ID\",\"targetName\":\"PROD_CATGRY_SUB_TYPE_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false}]}";
				
			}
			
		}
		
		else if (tablename.equalsIgnoreCase("url_type_master")) {
			if (modetype.equalsIgnoreCase("select")||modetype.equalsIgnoreCase("save")) {
				jsonModeldata = "{\"name\":\"url_type_master\",\"targetObect\":\"url_type_master\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"URL_TYPE_ID\",\"targetName\":\"URL_TYPE_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"URL_TYPE_NAME\",\"targetName\":\"URL_TYPE_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}";
			}
			else if (modetype.equalsIgnoreCase("update")) {
				jsonModeldata = "{\"name\":\"url_type_master\",\"targetObect\":\"url_type_master\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"URL_TYPE_ID\",\"targetName\":\"URL_TYPE_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"URL_TYPE_NAME\",\"targetName\":\"URL_TYPE_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}";

			}
			else if (modetype.equalsIgnoreCase("delete")) {
				jsonModeldata = "{\"name\":\"url_type_master\",\"targetObect\":\"url_type_master\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"URL_TYPE_ID\",\"targetName\":\"URL_TYPE_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false}]}";

			}
			
		}
		
		else if (tablename.equalsIgnoreCase("cabin_class")) {
			if (modetype.equalsIgnoreCase("select")||modetype.equalsIgnoreCase("save")) {
				jsonModeldata = "{\"name\":\"cabin_class\",\"targetObect\":\"cabin_class\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"CABIN_CLASS_ID\",\"targetName\":\"CABIN_CLASS_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"CABIN_CLASS_NAME\",\"targetName\":\"CABIN_CLASS_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}";
			}
			else if (modetype.equalsIgnoreCase("update")) {
				jsonModeldata = "{\"name\":\"cabin_class\",\"targetObect\":\"cabin_class\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"CABIN_CLASS_ID\",\"targetName\":\"CABIN_CLASS_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"CABIN_CLASS_NAME\",\"targetName\":\"CABIN_CLASS_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}";

			}
			else if (modetype.equalsIgnoreCase("delete")) {
				jsonModeldata = "{\"name\":\"cabin_class\",\"targetObect\":\"cabin_class\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"CABIN_CLASS_ID\",\"targetName\":\"CABIN_CLASS_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false}]}";

			}
			
		}
		
		else if (tablename.equalsIgnoreCase("traveler_program_master")) {
			if (modetype.equalsIgnoreCase("select")||modetype.equalsIgnoreCase("save")) {
				jsonModeldata = "{\"name\":\"traveler_program_master\",\"targetObect\":\"traveler_program_master\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"TRAVELER_PROGRAM_ID\",\"targetName\":\"TRAVELER_PROGRAM_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"TRAVELER_PROGRAM_NAME\",\"targetName\":\"TRAVELER_PROGRAM_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}";
			}
			else if (modetype.equalsIgnoreCase("update")) {
				jsonModeldata = "{\"name\":\"traveler_program_master\",\"targetObect\":\"traveler_program_master\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"TRAVELER_PROGRAM_ID\",\"targetName\":\"TRAVELER_PROGRAM_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"TRAVELER_PROGRAM_NAME\",\"targetName\":\"TRAVELER_PROGRAM_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}";

			}
			else if (modetype.equalsIgnoreCase("delete")) {
				jsonModeldata = "{\"name\":\"traveler_program_master\",\"targetObect\":\"traveler_program_master\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"TRAVELER_PROGRAM_ID\",\"targetName\":\"TRAVELER_PROGRAM_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false}]}";

			}
			
		}
		
		else if (tablename.equalsIgnoreCase("airline_type")) {
			if (modetype.equalsIgnoreCase("select")||modetype.equalsIgnoreCase("save")) {
				jsonModeldata = "{\"name\":\"airline_type\",\"targetObect\":\"airline_type\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"AIRLINE_TYPE_ID\",\"targetName\":\"AIRLINE_TYPE_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"AIRLINE_TYPE_NAME\",\"targetName\":\"AIRLINE_TYPE_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}";
			}
			else if (modetype.equalsIgnoreCase("update")) {
				jsonModeldata = "{\"name\":\"airline_type\",\"targetObect\":\"airline_type\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"AIRLINE_TYPE_ID\",\"targetName\":\"AIRLINE_TYPE_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"AIRLINE_TYPE_NAME\",\"targetName\":\"AIRLINE_TYPE_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}";

			}
			else if (modetype.equalsIgnoreCase("delete")) {
				jsonModeldata = "{\"name\":\"airline_type\",\"targetObect\":\"airline_type\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"AIRLINE_TYPE_ID\",\"targetName\":\"AIRLINE_TYPE_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false}]}";

			}
			
		}
		
		else if (tablename.equalsIgnoreCase("status_master")) {
			if (modetype.equalsIgnoreCase("select")||modetype.equalsIgnoreCase("save")) {
				jsonModeldata = "{\"name\":\"status_master\",\"targetObect\":\"status_master\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"STATUS_ID\",\"targetName\":\"STATUS_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"STATUS_VALUE\",\"targetName\":\"STATUS_VALUE\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"STATUS_FOR\",\"targetName\":\"STATUS_FOR\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}";
			}
			else if (modetype.equalsIgnoreCase("update")) {
				jsonModeldata = "{\"name\":\"status_master\",\"targetObect\":\"status_master\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"STATUS_ID\",\"targetName\":\"STATUS_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"STATUS_VALUE\",\"targetName\":\"STATUS_VALUE\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"STATUS_FOR\",\"targetName\":\"STATUS_FOR\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}";

			}
			else if (modetype.equalsIgnoreCase("delete")) {
				jsonModeldata = "{\"name\":\"status_master\",\"targetObect\":\"status_master\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"STATUS_ID\",\"targetName\":\"STATUS_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false}]}";

			}
			
		}*/
		
		return jsonModeldata;
	}

}
==================================

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.cnk.travelerpibe</groupId>
		<artifactId>travelerpibe-parent</artifactId>
		<version>1.0-SNAPSHOT</version>

		<relativePath>../parent/pom.xml</relativePath>
	</parent>

	<groupId>com.cnk.travelerpibe</groupId>
	<artifactId>productsetup</artifactId>

	<packaging>pom</packaging>

	<name>Travel ERP Product Setup multiproject</name>
	<description>
    CNK Travel ERP Product Setup Project
  </description>

	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.8.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>4.1.6.Final</version>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>4.3.0.Final</version>
			<exclusions>
				<exclusion>
					<groupId>javax.xml.bind</groupId>
					<artifactId>jaxb-api</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.xml.bind</groupId>
					<artifactId>jaxb-impl</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>3.1.2.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>3.1.2.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>3.1.2.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>3.1.2.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>3.1.2.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aop</artifactId>
			<version>3.1.2.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
			<version>3.1.2.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>3.1.2.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>cglib</groupId>
			<artifactId>cglib</artifactId>
			<version>2.2.2</version>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.16</version>
		</dependency>
		<!--<dependency> <groupId>org.slf4j</groupId> <artifactId>slf4j-api</artifactId> 
			<version>1.6.6</version> </dependency> <dependency> <groupId>org.slf4j</groupId> 
			<artifactId>slf4j-log4j12</artifactId> <version>1.6.6</version> </dependency> -->
		<!--<dependency> <groupId>org.aspectj</groupId> <artifactId>aspectjrt</artifactId> 
			<version>1.7.0.RC1</version> </dependency> <dependency> <groupId>org.aspectj</groupId> 
			<artifactId>aspectjweaver</artifactId> <version>1.7.0.RC1</version> </dependency> -->

		<!-- Hibernate library dependecy start -->
		<dependency>
			<groupId>dom4j</groupId>
			<artifactId>dom4j</artifactId>
			<version>1.6.1</version>
			<exclusions>
				<exclusion>
					<groupId>xml-apis</groupId>
					<artifactId>xml-apis</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>commons-logging</groupId>
			<artifactId>commons-logging</artifactId>
			<version>1.1.1</version>
		</dependency>

		<dependency>
			<groupId>commons-collections</groupId>
			<artifactId>commons-collections</artifactId>
			<version>3.2.1</version>
		</dependency>

		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.1</version>
		</dependency>

		<dependency>
			<groupId>antlr</groupId>
			<artifactId>antlr</artifactId>
			<version>2.7.7</version>
		</dependency>
		<!-- Hibernate library dependecy end -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>5.1.6</version>
		</dependency>
		<dependency>
			<groupId>com.oracle</groupId>
			<artifactId>ojdbc6</artifactId>
			<version>11.2.0</version>
		</dependency>
		<!-- Spring security dependency start -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-core</artifactId>
			<version>3.1.2.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-config</artifactId>
			<version>3.1.2.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-web</artifactId>
			<version>3.1.2.RELEASE</version>
		</dependency>

		<dependency>
			<groupId>org.json</groupId>
			<artifactId>json</artifactId>
			<version>20090211</version>
		</dependency>

		<!-- Gson: Java to Json conversion -->
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<version>2.2.2</version>
			<scope>compile</scope>
		</dependency>
	</dependencies>
	<!-- below lines not required if using nexus. -->
	<!-- <repositories> <repository> <id>jboss-public-repository-group</id> 
		<name>JBoss Public Repository Group</name> <url>http://repository.jboss.org/nexus/content/groups/public/</url> 
		<layout>default</layout> <releases> <enabled>true</enabled> <updatePolicy>never</updatePolicy> 
		</releases> <snapshots> <enabled>true</enabled> <updatePolicy>daily</updatePolicy> 
		</snapshots> </repository> </repositories> -->



	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<!-- Remove me as soon as all of droolsjbpm requires at least Java 6 -->
					<configuration>
						<source>1.7</source>
						<target>1.7</target>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<!-- <modules> <module>cnk-productsetup-api</module> </modules> -->

	<modules>
		<!-- <module>cnk-ibe-masters-core</module> -->
		<module>cnk-ibe-masters-service</module>
		<module>cnk-ibe-masters-web</module>
		<module>cnk-ibe-masters-persisthelper</module>
	</modules>
</project>

================================
/**
 * 
 */
package com.cnk.travelerpibe.master.services.util;

import java.util.Properties;

import com.cnk.travelerpibe.common.persistence.io.ClassPathResource;
import com.cnk.travelerpibe.common.persistence.io.Resource;

/**
 * @author sivaiah.polamreddy
 * 
 */
public class CommonServiceUtil { 

	public static String getJsonModelData(String tablename, String modetype) {

		String jsonModeldata = "";
		
		
		try {
			Resource resource = new ClassPathResource("JsonDBMapping.properties");
			Properties properties = new Properties();
			properties.load(resource.getInputStream());
			jsonModeldata=properties.getProperty(tablename+"."+modetype);
			System.out.println("JsonDBMapping ColNames: "+jsonModeldata);
		} catch (Exception e) {
			System.out.println(e);
		}

		/*String commonAuditString = "{\"name\":\"CREATED_BY_USER_ID\",\"targetName\":\"CREATED_BY_USER_ID\",\"dataType\":\"NUMBER\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"CREATED_ON_DATE\",\"targetName\":\"CREATED_ON_DATE\",\"dataType\":\"DATE\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"LAST_UPDATED_BY_USER_ID\",\"targetName\":\"LAST_UPDATED_BY_USER_ID\",\"dataType\":\"NUMBER\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"LAST_UPDATED_ON_DATE\",\"targetName\":\"LAST_UPDATED_ON_DATE\",\"dataType\":\"DATE\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"DELETED_FLAG\",\"targetName\":\"DELETED_FLAG\",\"dataType\":\"CHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"DELETED_BY_USER_ID\",\"targetName\":\"DELETED_BY_USER_ID\",\"dataType\":\"NUMBER\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"DELETED_ON_DATE\",\"targetName\":\"DELETED_ON_DATE\",\"dataType\":\"DATE\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}";

		if (tablename.equalsIgnoreCase("ibe_master_country")) {
			if (modetype.equalsIgnoreCase("select")
					|| modetype.equalsIgnoreCase("save")) {
				jsonModeldata = "{\"name\":\"ibe_master_country\",\"targetObect\":\"ibe_master_country\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"IBE_COUNTRY_ID\",\"targetName\":\"IBE_COUNTRY_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"IBE_COUNTRY_IATA_CODE\",\"targetName\":\"IBE_COUNTRY_IATA_CODE\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_COUNTRY_NAME\",\"targetName\":\"IBE_COUNTRY_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_COUNTRY_STATUS\",\"targetName\":\"IBE_COUNTRY_STATUS\",\"dataType\":\"TINYINT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true}]}";
			} else if (modetype.equalsIgnoreCase("update")) {

				jsonModeldata = "{\"name\":\"ibe_master_country\",\"targetObect\":\"ibe_master_country\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"IBE_COUNTRY_ID\",\"targetName\":\"IBE_COUNTRY_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"IBE_COUNTRY_IATA_CODE\",\"targetName\":\"IBE_COUNTRY_IATA_CODE\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_COUNTRY_NAME\",\"targetName\":\"IBE_COUNTRY_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_COUNTRY_STATUS\",\"targetName\":\"IBE_COUNTRY_STATUS\",\"dataType\":\"TINYINT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true}]}";

			} else if (modetype.equalsIgnoreCase("delete")) {
				jsonModeldata = "{\"name\":\"ibe_master_country\",\"targetObect\":\"ibe_master_country\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"IBE_COUNTRY_ID\",\"targetName\":\"IBE_COUNTRY_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false}]}";

			}
		} else if (tablename.equalsIgnoreCase("ibe_master_categories_group")) {
			if (modetype.equalsIgnoreCase("select")
					|| modetype.equalsIgnoreCase("save")) {
				jsonModeldata = "{\"name\":\"ibe_master_categories_group\",\"targetObect\":\"ibe_master_categories_group\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"IBE_PRO_CATEGORY_GROUP_ID\",\"targetName\":\"IBE_PRO_CATEGORY_GROUP_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"IBE_STATUS\",\"targetName\":\"IBE_STATUS\",\"dataType\":\"TINYINT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_PRO_CATEGORY_DESCRIPTION\",\"targetName\":\"IBE_PRO_CATEGORY_DESCRIPTION\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true}]}";
			} else if (modetype.equalsIgnoreCase("update")) {
				jsonModeldata = "{\"name\":\"ibe_master_categories_group\",\"targetObect\":\"ibe_master_categories_group\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"IBE_PRO_CATEGORY_GROUP_ID\",\"targetName\":\"IBE_PRO_CATEGORY_GROUP_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"IBE_STATUS\",\"targetName\":\"IBE_STATUS\",\"dataType\":\"TINYINT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_PRO_CATEGORY_DESCRIPTION\",\"targetName\":\"IBE_PRO_CATEGORY_DESCRIPTION\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true}]}";

			} else if (modetype.equalsIgnoreCase("delete")) {
				jsonModeldata = "{\"name\":\"ibe_master_categories_group\",\"targetObect\":\"ibe_master_categories_group\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"IBE_PRO_CATEGORY_GROUP_ID\",\"targetName\":\"IBE_PRO_CATEGORY_GROUP_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false}]}";

			}
		}

		else if (tablename.equalsIgnoreCase("ibe_master_state")) {
			if (modetype.equalsIgnoreCase("select")) {
				jsonModeldata = "{\"name\":\"ibe_master_state\",\"targetObect\":\"ibe_master_state , ibe_master_country WHERE IBE_MASTER_STATE.IBE_COUNTRY_ID = IBE_MASTER_COUNTRY.IBE_COUNTRY_ID\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"IBE_STATE_ID\",\"targetName\":\"IBE_STATE_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_STATE_IATA_CODE\",\"targetName\":\"IBE_STATE_IATA_CODE\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_STATE_NAME\",\"targetName\":\"IBE_STATE_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_COUNTRY_NAME\",\"targetName\":\"IBE_COUNTRY_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_STATE_STATUS\",\"targetName\":\"IBE_STATE_STATUS\",\"dataType\":\"TINYINT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_COUNTRY_ID\",\"targetName\":\"IBE_MASTER_STATE.IBE_COUNTRY_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}";
			} else if (modetype.equalsIgnoreCase("save")) {
				jsonModeldata = "{\"name\":\"ibe_master_state\",\"targetObect\":\"ibe_master_state\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"IBE_STATE_ID\",\"targetName\":\"IBE_STATE_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"IBE_STATE_IATA_CODE\",\"targetName\":\"IBE_STATE_IATA_CODE\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_STATE_NAME\",\"targetName\":\"IBE_STATE_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_STATE_STATUS\",\"targetName\":\"IBE_STATE_STATUS\",\"dataType\":\"TINYINT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_COUNTRY_ID\",\"targetName\":\"IBE_COUNTRY_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":false}]}";
			} else if (modetype.equalsIgnoreCase("update")) {
				jsonModeldata = "{\"name\":\"ibe_master_state\",\"targetObect\":\"ibe_master_state\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"IBE_STATE_ID\",\"targetName\":\"IBE_STATE_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"IBE_STATE_IATA_CODE\",\"targetName\":\"IBE_STATE_IATA_CODE\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_STATE_NAME\",\"targetName\":\"IBE_STATE_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_STATE_STATUS\",\"targetName\":\"IBE_STATE_STATUS\",\"dataType\":\"TINYINT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_COUNTRY_ID\",\"targetName\":\"IBE_COUNTRY_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}";

			} else if (modetype.equalsIgnoreCase("delete")) {
				jsonModeldata = "{\"name\":\"ibe_master_state\",\"targetObect\":\"ibe_master_state\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"IBE_STATE_ID\",\"targetName\":\"IBE_STATE_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false}]}";

			}
		}

		else if (tablename.equalsIgnoreCase("ibe_master_city")) {
			if (modetype.equalsIgnoreCase("select")) {
				jsonModeldata = "{\"name\":\"ibe_master_city\",\"targetObect\":\"ibe_master_city , ibe_master_state WHERE IBE_MASTER_CITY.IBE_STATE_ID = IBE_MASTER_STATE.IBE_STATE_ID\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"IBE_CITY_ID\",\"targetName\":\"IBE_CITY_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_CITY_IATA_CODE\",\"targetName\":\"IBE_CITY_IATA_CODE\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_CITY_NAME\",\"targetName\":\"IBE_CITY_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_CITY_STATUS\",\"targetName\":\"IBE_CITY_STATUS\",\"dataType\":\"TINYINT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_STATE_NAME\",\"targetName\":\"IBE_STATE_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_STATE_ID\",\"targetName\":\"IBE_MASTER_CITY.IBE_STATE_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}";
			} else if (modetype.equalsIgnoreCase("save")) {
				jsonModeldata = "{\"name\":\"ibe_master_city\",\"targetObect\":\"ibe_master_city\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"IBE_CITY_ID\",\"targetName\":\"IBE_CITY_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"IBE_CITY_IATA_CODE\",\"targetName\":\"IBE_CITY_IATA_CODE\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_CITY_NAME\",\"targetName\":\"IBE_CITY_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_CITY_STATUS\",\"targetName\":\"IBE_CITY_STATUS\",\"dataType\":\"TINYINT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_STATE_ID\",\"targetName\":\"IBE_STATE_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":false}]}";
			} else if (modetype.equalsIgnoreCase("update")) {
				jsonModeldata = "{\"name\":\"ibe_master_city\",\"targetObect\":\"ibe_master_city\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"IBE_CITY_ID\",\"targetName\":\"IBE_CITY_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"IBE_CITY_IATA_CODE\",\"targetName\":\"IBE_CITY_IATA_CODE\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_CITY_NAME\",\"targetName\":\"IBE_CITY_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_CITY_STATUS\",\"targetName\":\"IBE_CITY_STATUS\",\"dataType\":\"TINYINT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_STATE_ID\",\"targetName\":\"IBE_STATE_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}";

			} else if (modetype.equalsIgnoreCase("delete")) {
				jsonModeldata = "{\"name\":\"ibe_master_city\",\"targetObect\":\"ibe_master_city\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"IBE_CITY_ID\",\"targetName\":\"IBE_CITY_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false}]}";

			}
		}

		else if (tablename.equalsIgnoreCase("ibe_master_area")) {
			if (modetype.equalsIgnoreCase("select")) {
				jsonModeldata = "{\"name\":\"ibe_master_area\",\"targetObect\":\"ibe_master_area , ibe_master_city WHERE IBE_MASTER_AREA.IBE_CITY_ID = IBE_MASTER_CITY.IBE_CITY_ID\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"IBE_AREA_ID\",\"targetName\":\"IBE_AREA_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_AREA_NAME\",\"targetName\":\"IBE_AREA_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_AREA_STATUS\",\"targetName\":\"IBE_AREA_STATUS\",\"dataType\":\"TINYINT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_CITY_ID\",\"targetName\":\"IBE_MASTER_AREA.IBE_CITY_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"IBE_CITY_NAME\",\"targetName\":\"IBE_CITY_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true}]}";
			} else if (modetype.equalsIgnoreCase("save")) {
				jsonModeldata = "{\"name\":\"ibe_master_area\",\"targetObect\":\"ibe_master_area\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"IBE_AREA_ID\",\"targetName\":\"IBE_AREA_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"IBE_AREA_NAME\",\"targetName\":\"IBE_AREA_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_AREA_STATUS\",\"targetName\":\"IBE_AREA_STATUS\",\"dataType\":\"TINYINT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_CITY_ID\",\"targetName\":\"IBE_CITY_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":false}]}";
			} else if (modetype.equalsIgnoreCase("update")) {
				jsonModeldata = "{\"name\":\"ibe_master_area\",\"targetObect\":\"ibe_master_area\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"IBE_AREA_ID\",\"targetName\":\"IBE_AREA_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"IBE_AREA_NAME\",\"targetName\":\"IBE_AREA_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_AREA_STATUS\",\"targetName\":\"IBE_AREA_STATUS\",\"dataType\":\"TINYINT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":false,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"IBE_CITY_ID\",\"targetName\":\"IBE_CITY_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}";

			} else if (modetype.equalsIgnoreCase("delete")) {
				jsonModeldata = "{\"name\":\"ibe_master_area\",\"targetObect\":\"ibe_master_area\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"IBE_AREA_ID\",\"targetName\":\"IBE_AREA_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false}]}";

			}
		}

		else if (tablename.equalsIgnoreCase("ibe_group_of_companies")) {
			if (modetype.equalsIgnoreCase("select")
					|| modetype.equalsIgnoreCase("save")) {
				jsonModeldata = "{\"name\":\"ibe_group_of_companies\",\"targetObect\":\"ibe_group_of_companies\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"COMPANIES_ID\",\"targetName\":\"COMPANIES_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"COMPANIES_NAME\",\"targetName\":\"COMPANIES_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}";
			} else if (modetype.equalsIgnoreCase("update")) {

				jsonModeldata = "{\"name\":\"ibe_group_of_companies\",\"targetObect\":\"ibe_group_of_companies\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"COMPANIES_ID\",\"targetName\":\"COMPANIES_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"COMPANIES_NAME\",\"targetName\":\"COMPANIES_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}";

			} else if (modetype.equalsIgnoreCase("delete")) {
				jsonModeldata = "{\"name\":\"ibe_group_of_companies\",\"targetObect\":\"ibe_group_of_companies\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"COMPANIES_ID\",\"targetName\":\"COMPANIES_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false}]}";

			}

		}

		else if (tablename.equalsIgnoreCase("product_category")) {
			if (modetype.equalsIgnoreCase("select")
					|| modetype.equalsIgnoreCase("save")) {

				jsonModeldata = "{\"name\":\"product_category\",\"targetObect\":\"product_category\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"PROD_CATGRY_ID\",\"targetName\":\"PROD_CATGRY_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"PROD_CATGRY_NAME\",\"targetName\":\"PROD_CATGRY_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}";
			}
			else if (modetype.equalsIgnoreCase("update")) {
				jsonModeldata = "{\"name\":\"product_category\",\"targetObect\":\"product_category\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"PROD_CATGRY_ID\",\"targetName\":\"PROD_CATGRY_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"PROD_CATGRY_NAME\",\"targetName\":\"PROD_CATGRY_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}";
				
			}
			else if (modetype.equalsIgnoreCase("delete")) {
				jsonModeldata = "{\"name\":\"product_category\",\"targetObect\":\"product_category\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"PROD_CATGRY_ID\",\"targetName\":\"PROD_CATGRY_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false}]}";
				
			}
			
		}
		
		else if (tablename.equalsIgnoreCase("product_category_sub_type")) {
			if (modetype.equalsIgnoreCase("select")) {
				jsonModeldata = "{\"name\":\"product_category_sub_type\",\"targetObect\":\"product_category_sub_type , product_category WHERE product_category_sub_type.PROD_CATGRY_ID = product_category.PROD_CATGRY_ID\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"PROD_CATGRY_SUB_TYPE_ID\",\"targetName\":\"PROD_CATGRY_SUB_TYPE_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"PROD_CATGRY_SUB_TYPE_NAME\",\"targetName\":\"PROD_CATGRY_SUB_TYPE_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"PROD_CATGRY_NAME\",\"targetName\":\"PROD_CATGRY_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"PROD_CATGRY_ID\",\"targetName\":\"PRODUCT_CATEGORY_SUB_TYPE.PROD_CATGRY_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}";
				
			}
			else if (modetype.equalsIgnoreCase("save")) {
				jsonModeldata = "{\"name\":\"product_category_sub_type\",\"targetObect\":\"product_category_sub_type\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"PROD_CATGRY_SUB_TYPE_ID\",\"targetName\":\"PROD_CATGRY_SUB_TYPE_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"PROD_CATGRY_SUB_TYPE_NAME\",\"targetName\":\"PROD_CATGRY_SUB_TYPE_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"PROD_CATGRY_ID\",\"targetName\":\"PROD_CATGRY_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}";
			
			}
			else if (modetype.equalsIgnoreCase("update")) {
				jsonModeldata = "{\"name\":\"product_category_sub_type\",\"targetObect\":\"product_category_sub_type\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"PROD_CATGRY_SUB_TYPE_ID\",\"targetName\":\"PROD_CATGRY_SUB_TYPE_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"PROD_CATGRY_SUB_TYPE_NAME\",\"targetName\":\"PROD_CATGRY_SUB_TYPE_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"PROD_CATGRY_ID\",\"targetName\":\"PROD_CATGRY_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}";
				
			}
			else if (modetype.equalsIgnoreCase("delete")) {
				jsonModeldata = "{\"name\":\"product_category_sub_type\",\"targetObect\":\"product_category_sub_type\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"PROD_CATGRY_SUB_TYPE_ID\",\"targetName\":\"PROD_CATGRY_SUB_TYPE_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false}]}";
				
			}
			
		}
		
		else if (tablename.equalsIgnoreCase("url_type_master")) {
			if (modetype.equalsIgnoreCase("select")||modetype.equalsIgnoreCase("save")) {
				jsonModeldata = "{\"name\":\"url_type_master\",\"targetObect\":\"url_type_master\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"URL_TYPE_ID\",\"targetName\":\"URL_TYPE_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"URL_TYPE_NAME\",\"targetName\":\"URL_TYPE_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}";
			}
			else if (modetype.equalsIgnoreCase("update")) {
				jsonModeldata = "{\"name\":\"url_type_master\",\"targetObect\":\"url_type_master\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"URL_TYPE_ID\",\"targetName\":\"URL_TYPE_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"URL_TYPE_NAME\",\"targetName\":\"URL_TYPE_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}";

			}
			else if (modetype.equalsIgnoreCase("delete")) {
				jsonModeldata = "{\"name\":\"url_type_master\",\"targetObect\":\"url_type_master\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"URL_TYPE_ID\",\"targetName\":\"URL_TYPE_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false}]}";

			}
			
		}
		
		else if (tablename.equalsIgnoreCase("cabin_class")) {
			if (modetype.equalsIgnoreCase("select")||modetype.equalsIgnoreCase("save")) {
				jsonModeldata = "{\"name\":\"cabin_class\",\"targetObect\":\"cabin_class\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"CABIN_CLASS_ID\",\"targetName\":\"CABIN_CLASS_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"CABIN_CLASS_NAME\",\"targetName\":\"CABIN_CLASS_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}";
			}
			else if (modetype.equalsIgnoreCase("update")) {
				jsonModeldata = "{\"name\":\"cabin_class\",\"targetObect\":\"cabin_class\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"CABIN_CLASS_ID\",\"targetName\":\"CABIN_CLASS_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"CABIN_CLASS_NAME\",\"targetName\":\"CABIN_CLASS_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}";

			}
			else if (modetype.equalsIgnoreCase("delete")) {
				jsonModeldata = "{\"name\":\"cabin_class\",\"targetObect\":\"cabin_class\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"CABIN_CLASS_ID\",\"targetName\":\"CABIN_CLASS_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false}]}";

			}
			
		}
		
		else if (tablename.equalsIgnoreCase("traveler_program_master")) {
			if (modetype.equalsIgnoreCase("select")||modetype.equalsIgnoreCase("save")) {
				jsonModeldata = "{\"name\":\"traveler_program_master\",\"targetObect\":\"traveler_program_master\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"TRAVELER_PROGRAM_ID\",\"targetName\":\"TRAVELER_PROGRAM_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"TRAVELER_PROGRAM_NAME\",\"targetName\":\"TRAVELER_PROGRAM_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}";
			}
			else if (modetype.equalsIgnoreCase("update")) {
				jsonModeldata = "{\"name\":\"traveler_program_master\",\"targetObect\":\"traveler_program_master\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"TRAVELER_PROGRAM_ID\",\"targetName\":\"TRAVELER_PROGRAM_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"TRAVELER_PROGRAM_NAME\",\"targetName\":\"TRAVELER_PROGRAM_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}";

			}
			else if (modetype.equalsIgnoreCase("delete")) {
				jsonModeldata = "{\"name\":\"traveler_program_master\",\"targetObect\":\"traveler_program_master\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"TRAVELER_PROGRAM_ID\",\"targetName\":\"TRAVELER_PROGRAM_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false}]}";

			}
			
		}
		
		else if (tablename.equalsIgnoreCase("airline_type")) {
			if (modetype.equalsIgnoreCase("select")||modetype.equalsIgnoreCase("save")) {
				jsonModeldata = "{\"name\":\"airline_type\",\"targetObect\":\"airline_type\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"AIRLINE_TYPE_ID\",\"targetName\":\"AIRLINE_TYPE_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"AIRLINE_TYPE_NAME\",\"targetName\":\"AIRLINE_TYPE_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}";
			}
			else if (modetype.equalsIgnoreCase("update")) {
				jsonModeldata = "{\"name\":\"airline_type\",\"targetObect\":\"airline_type\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"AIRLINE_TYPE_ID\",\"targetName\":\"AIRLINE_TYPE_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"AIRLINE_TYPE_NAME\",\"targetName\":\"AIRLINE_TYPE_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}";

			}
			else if (modetype.equalsIgnoreCase("delete")) {
				jsonModeldata = "{\"name\":\"airline_type\",\"targetObect\":\"airline_type\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"AIRLINE_TYPE_ID\",\"targetName\":\"AIRLINE_TYPE_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false}]}";

			}
			
		}
		
		else if (tablename.equalsIgnoreCase("status_master")) {
			if (modetype.equalsIgnoreCase("select")||modetype.equalsIgnoreCase("save")) {
				jsonModeldata = "{\"name\":\"status_master\",\"targetObect\":\"status_master\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"STATUS_ID\",\"targetName\":\"STATUS_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"STATUS_VALUE\",\"targetName\":\"STATUS_VALUE\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"STATUS_FOR\",\"targetName\":\"STATUS_FOR\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}";
			}
			else if (modetype.equalsIgnoreCase("update")) {
				jsonModeldata = "{\"name\":\"status_master\",\"targetObect\":\"status_master\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"STATUS_ID\",\"targetName\":\"STATUS_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"STATUS_VALUE\",\"targetName\":\"STATUS_VALUE\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"STATUS_FOR\",\"targetName\":\"STATUS_FOR\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}";

			}
			else if (modetype.equalsIgnoreCase("delete")) {
				jsonModeldata = "{\"name\":\"status_master\",\"targetObect\":\"status_master\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"STATUS_ID\",\"targetName\":\"STATUS_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false}]}";

			}
			
		}*/
		
		return jsonModeldata;
	}

}
===========================================================================


<?xml version="1.0"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.cnk.travelerpibe</groupId>
    <artifactId>productsetup</artifactId>
    <version>1.0-SNAPSHOT</version>
  </parent>
  <groupId>com.cnk.travelerpibe</groupId>
  <artifactId>cnk-ibe-masters-service</artifactId>
  <version>1.0-SNAPSHOT</version>
  <name>cnk-ibe-masters-service</name>
  <url>http://maven.apache.org</url>
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>
  <dependencies>
   <!--  <dependency>
    	<groupId>${project.groupId}</groupId>
    	<artifactId>cnk-ibe-masters-core</artifactId>
    	<version>${project.parent.version}</version>
    </dependency> -->
    <dependency>
    	<groupId>${project.groupId}</groupId>
    	<artifactId>cnk-ibe-masters-persisthelper</artifactId>
    	<version>${project.parent.version}</version>
    </dependency>
  </dependencies>
</project>
============================================================================
<?xml version="1.0"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.cnk.travelerpibe</groupId>
    <artifactId>productsetup</artifactId>
    <version>1.0-SNAPSHOT</version>
  </parent>
  <groupId>com.cnk.travelerpibe</groupId>
  <artifactId>cnk-ibe-masters-web</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>war</packaging>
  <name>cnk-ibe-masters-web Maven Webapp</name>
  <url>http://maven.apache.org</url>
  <dependencies>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>3.1.2.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>3.1.2.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>3.1.2.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>jstl</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>
		<dependency>
    		<groupId>${project.groupId}</groupId>
    		<artifactId>cnk-ibe-masters-service</artifactId>
    		<version>${project.parent.version}</version>
		</dependency>
		<dependency>
			<groupId>displaytag</groupId>
			<artifactId>displaytag</artifactId>
			<version>1.2</version>
		</dependency>
		<dependency>
			<groupId>displaytag</groupId>
			<artifactId>displaytag-portlet</artifactId>
			<version>1.2</version>
		</dependency>
		<dependency>
			<groupId>displaytag</groupId>
			<artifactId>displaytag-export-poi</artifactId>
			<version>1.2</version>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>2.5</version>
		</dependency>
		<dependency>
	      	 <groupId>javax.servlet</groupId>
	       	 <artifactId>jsp-api</artifactId>
	       	 <version>2.0</version>
	       	 <scope>provided</scope>
	   	 </dependency>
	   	 <dependency>
			<groupId>org.apache.tiles</groupId>
			<artifactId>tiles-core</artifactId>
			<version>2.2.2</version>
		</dependency>
		<dependency>
			<groupId>org.apache.tiles</groupId>
			<artifactId>tiles-jsp</artifactId>
			<version>2.2.2</version>
		</dependency>
		<dependency>
			<groupId>org.apache.tiles</groupId>
			<artifactId>tiles-api</artifactId>
			<version>2.2.2</version>
		</dependency>
        <dependency>
			<groupId>org.apache.tiles</groupId>
			<artifactId>tiles-servlet</artifactId>
			<version>2.2.2</version>
		</dependency>
		<dependency>
			<groupId>org.apache.tiles</groupId>
			<artifactId>tiles-template</artifactId>
			<version>2.2.2</version>
		</dependency>
		<dependency>
    		<groupId>${project.groupId}</groupId>
    		<artifactId>cnk-ibe-masters-service</artifactId>
    		<version>${project.parent.version}</version>
    		<!--<exclusions>
    			<exclusion>
    				<groupId>${project.groupId}</groupId>
    				<artifactId>cnk-ibe-masters-core</artifactId>
    			</exclusion>
    		</exclusions>-->
		</dependency>
		
		<dependency>
                <groupId>org.codehaus.jackson</groupId>
                <artifactId>jackson-core-asl</artifactId>
                <version>1.9.9</version>
</dependency>
            <dependency>
                <groupId>org.codehaus.jackson</groupId>
                <artifactId>jackson-mapper-asl</artifactId>
                <version>1.9.9</version>
</dependency>
		
  </dependencies>
  <build>
    <finalName>cnk-ibe-masters-web</finalName>
 	  <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-war-plugin</artifactId>
        <configuration>
          <webResources>
            <resource>
              <directory>${build.sourceDirectory}</directory>
              <targetPath>sources</targetPath>
            </resource>
          </webResources>
        </configuration>
      </plugin>
    </plugins>
 	
  </build>
</project>
========================================================================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.cnk.travelerpibe</groupId>
		<artifactId>travelerpibe-parent</artifactId>
		<version>1.0-SNAPSHOT</version>

		<relativePath>../parent/pom.xml</relativePath>
	</parent>

	<groupId>com.cnk.travelerpibe</groupId>
	<artifactId>productsetup</artifactId>

	<packaging>pom</packaging>

	<name>Travel ERP Product Setup multiproject</name>
	<description>
    CNK Travel ERP Product Setup Project
  </description>

	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.8.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>4.1.6.Final</version>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>4.3.0.Final</version>
			<exclusions>
				<exclusion>
					<groupId>javax.xml.bind</groupId>
					<artifactId>jaxb-api</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.xml.bind</groupId>
					<artifactId>jaxb-impl</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>3.1.2.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>3.1.2.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>3.1.2.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>3.1.2.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>3.1.2.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aop</artifactId>
			<version>3.1.2.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
			<version>3.1.2.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>3.1.2.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>cglib</groupId>
			<artifactId>cglib</artifactId>
			<version>2.2.2</version>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.16</version>
		</dependency>
		<!--<dependency> <groupId>org.slf4j</groupId> <artifactId>slf4j-api</artifactId> 
			<version>1.6.6</version> </dependency> <dependency> <groupId>org.slf4j</groupId> 
			<artifactId>slf4j-log4j12</artifactId> <version>1.6.6</version> </dependency> -->
		<!--<dependency> <groupId>org.aspectj</groupId> <artifactId>aspectjrt</artifactId> 
			<version>1.7.0.RC1</version> </dependency> <dependency> <groupId>org.aspectj</groupId> 
			<artifactId>aspectjweaver</artifactId> <version>1.7.0.RC1</version> </dependency> -->

		<!-- Hibernate library dependecy start -->
		<dependency>
			<groupId>dom4j</groupId>
			<artifactId>dom4j</artifactId>
			<version>1.6.1</version>
			<exclusions>
				<exclusion>
					<groupId>xml-apis</groupId>
					<artifactId>xml-apis</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>commons-logging</groupId>
			<artifactId>commons-logging</artifactId>
			<version>1.1.1</version>
		</dependency>

		<dependency>
			<groupId>commons-collections</groupId>
			<artifactId>commons-collections</artifactId>
			<version>3.2.1</version>
		</dependency>

		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.1</version>
		</dependency>

		<dependency>
			<groupId>antlr</groupId>
			<artifactId>antlr</artifactId>
			<version>2.7.7</version>
		</dependency>
		<!-- Hibernate library dependecy end -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>5.1.6</version>
		</dependency>
		<dependency>
			<groupId>com.oracle</groupId>
			<artifactId>ojdbc6</artifactId>
			<version>11.2.0</version>
		</dependency>
		<!-- Spring security dependency start -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-core</artifactId>
			<version>3.1.2.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-config</artifactId>
			<version>3.1.2.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-web</artifactId>
			<version>3.1.2.RELEASE</version>
		</dependency>

		<dependency>
			<groupId>org.json</groupId>
			<artifactId>json</artifactId>
			<version>20090211</version>
		</dependency>

		<!-- Gson: Java to Json conversion -->
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<version>2.2.2</version>
			<scope>compile</scope>
		</dependency>
	</dependencies>
	<!-- below lines not required if using nexus. -->
	<!-- <repositories> <repository> <id>jboss-public-repository-group</id> 
		<name>JBoss Public Repository Group</name> <url>http://repository.jboss.org/nexus/content/groups/public/</url> 
		<layout>default</layout> <releases> <enabled>true</enabled> <updatePolicy>never</updatePolicy> 
		</releases> <snapshots> <enabled>true</enabled> <updatePolicy>daily</updatePolicy> 
		</snapshots> </repository> </repositories> -->



	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<!-- Remove me as soon as all of droolsjbpm requires at least Java 6 -->
					<configuration>
						<source>1.7</source>
						<target>1.7</target>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<!-- <modules> <module>cnk-productsetup-api</module> </modules> -->

	<modules>
		<!-- <module>cnk-ibe-masters-core</module> -->
		<module>cnk-ibe-masters-service</module>
		<module>cnk-ibe-masters-web</module>
		<module>cnk-ibe-masters-persisthelper</module>
	</modules>
</project>
===================================================================
#Table Names                        GridColumnNames

product_category='PRODUCT CATEGORY ID','PRODUCT CATEGORY NAME'
product_category_sub_type='PRODUCT CATEGORY SUB TYPE ID','PRODUCT CATEGORY SUB TYPE NAME','PRODUCT CATEGORY NAME'
url_type_master='URL TYPE ID','URL TYPE NAME'
cabin_class='CABIN CLASS ID','CABIN CLASS NAME'
traveler_program_master='TRAVELER PROGRAM ID','TARVELER PROGRAM NAME'
airline_type='AIRLINE TYPE ID','AIRLINE TYPE NAME'
status_master='STATUS ID','STATUS VALUE','STATUS FOR'
group_of_companies_master='GROUP OF COMPANIES ID','GROUP OF COMPANIES NAME'
group_company_master='GROUP COMPANY ID','GROUP COMPANY NAME','GROUP OF COMPANIES NAME'
company_master='COMPANY ID','COMPANY NAME','GROUP COMPANY NAME'
sbu_master='SBU ID','SBU NAME','STATUS CHANGE REASON','STATUS EFFECTIVE FROM','COMPANY NAME'
bu_master='BU ID','BU NAME','STATUS CHANGE REASON','STATUS EFFECTIVE FROM','SBU NAME'
file_name_master='FILE ID','FILE NAME','FILE DESCRIPTION'
file_category_master='FILE CATEGORY ID','FILE CATEGORY NAME','FILE CATEGORY DESC'
market_master='MARKET ID','MARKET NAME','MARKET STATUS','MARKET REMARK'
company_market_master=
city_master='CITY ID','CITY NAME','STATE NAME'
airport_city_master='AIRPORT CITY ID','AIRPORT CITY NAME','CITY NAME'
state_master='STATE ID','STATE NAME','COUNTRY NAME'
country_master='COUNTRY ID','COUNTRY NAME','CONTINENT NAME'
continent_master='CONTINENT ID','CONTINENT NAME'

============================================================================
#Table Names                                 ColModelNames


product_category={name:'PROD_CATGRY_ID', index:'PROD_CATGRY_ID', editable: true, hidden: true},{name:'PROD_CATGRY_NAME', index:'PROD_CATGRY_NAME', editrules:{required:true},editable: true, align: 'center'

product_category_sub_type={name:'PROD_CATGRY_SUB_TYPE_ID', index:'PROD_CATGRY_SUB_TYPE_ID', editable: true, hidden: true},{name:'PROD_CATGRY_SUB_TYPE_NAME', index:'PROD_CATGRY_SUB_TYPE_NAME', editrules:{required:true},editable: true, align: 'center'},{name:'PROD_CATGRY_NAME', index:'PROD_CATGRY_NAME', edittype: 'select', editrules:{required:true},editable: true, align: 'center', editoptions:

url_type_master={name:'URL_TYPE_ID', index:'URL_TYPE_ID', editable: true, hidden: true},{name:'URL_TYPE_NAME', index:'URL_TYPE_NAME', editrules:{required:true}, editable: true, align: 'center'

cabin_class={name:'CABIN_CLASS_ID', index:'CABIN_CLASS_ID', editable: true, hidden: true},{name:'CABIN_CLASS_NAME', index:'CABIN_CLASS_NAME', editrules:{required:true}, editable: true, align: 'center'

traveler_program_master={name:'TRAVELER_PROGRAM_ID', index:'TRAVELER_PROGRAM_ID', editable: true, hidden: true},{name:'TRAVELER_PROGRAM_NAME', index:'TRAVELER_PROGRAM_NAME', editrules:{required:true}, editable: true, align: 'center'

airline_type={name:'AIRLINE_TYPE_ID', index:'AIRLINE_TYPE_ID', editable: true, hidden: true},{name:'AIRLINE_TYPE_NAME', index:'AIRLINE_TYPE_NAME', editrules:{required:true}, editable: true, align: 'center'

status_master={name:'STATUS_ID', index:'STATUS_ID', editable: true, hidden: true},{name:'STATUS_VALUE', index:'STATUS_VALUE', editrules:{required:true}, editable: true, align: 'center'},{name:'STATUS_FOR', index:'STATUS_FOR', editrules:{required:true}, editable: true, align: 'center'

group_of_companies_master={name:'GROUP_OF_COMPANIES_ID', index:'GROUP_OF_COMPANIES_ID', editable: true, hidden: true},{name:'GROUP_OF_COMPANIES_NAME', index:'GROUP_OF_COMPANIES_NAME', align: 'center', editrules:{required:true}, editable: true  

group_company_master={name:'GROUP_COMPANY_ID', index:'GROUP_COMPANY_ID', editable: true, hidden: true},{name:'GROUP_COMPANY_NAME', index:'GROUP_COMPANY_NAME', align: 'center', editrules:{required:true}, editable: true},{name:'GROUP_OF_COMPANIES_NAME', index:'GROUP_OF_COMPANIES_NAME', align: 'center', edittype: 'select', editrules:{required:true}, editable: true, editoptions:

company_master={name:'COMPANY_ID', index:'COMPANY_ID', editable: true, hidden: true},{name:'COMPANY_NAME', index:'COMPANY_NAME', align: 'center', editrules:{required:true}, editable: true},{name:'GROUP_COMPANY_NAME', index:'GROUP_COMPANY_NAME', align: 'center', edittype: 'select', editrules:{required:true}, editable: true, editoptions:

sbu_master={name:'SBU_ID', index:'SBU_ID', editable: true, hidden: true},{name:'SBU_NAME', index:'SBU_NAME', align: 'center', editrules:{required:true}, editable: true},{name:'STATUS_CHANGE_REASON', index:'STATUS_CHANGE_REASON', align: 'center', editrules:{required:false}, editable: true},{name:'STATUS_EFFECTIVE_FROM', index:'STATUS_EFFECTIVE_FROM', align: 'center', editrules:{required:false}, editable: true},{name:'COMPANY_NAME', index:'COMPANY_NAME', align: 'center', edittype: 'select', editrules:{required:true}, editable: true, editoptions:

bu_master={name:'BU_ID', index:'BU_ID', editable: true, hidden: true},{name:'BU_NAME', index:'BU_NAME', align: 'center', editrules:{required:true}, editable: true},{name:'STATUS_CHANGE_REASON', index:'STATUS_CHANGE_REASON', align: 'center', editrules:{required:false}, editable: true},{name:'STATUS_EFFECTIVE_FROM', index:'STATUS_EFFECTIVE_FROM', align: 'center', editrules:{required:false}, editable: true},{name:'SBU_NAME', index:'SBU_NAME', align: 'center', edittype: 'select', editrules:{required:true}, editable: true, editoptions:

file_name_master={name:'FILE_NAME_ID', index:'FILE_NAME_ID', editable: true, hidden: true},{name:'FILE_NAME', index:'FILE_NAME', editrules:{required:true}, editable: true, align: 'center'},{name:'FILE_DESC', index:'FILE_DESC', editrules:{required:true}, editable: true, align: 'center'

file_category_master={name:'FILE_CATEGORY_ID', index:'FILE_CATEGORY_ID', editable: true, hidden: true},{name:'FILE_CATEGORY_NAME', index:'FILE_CATEGORY_NAME', editrules:{required:true}, editable: true, align: 'center'},{name:'FILE_CATEGORY_DESC', index:'FILE_CATEGORY_DESC', editrules:{required:true}, editable: true, align: 'center'

market_master={name:'MARKET_ID', index:'MARKET_ID', editable: true, hidden: true},{name:'MARKET_NAME', index:'MARKET_NAME', editrules:{required:true}, editable: true, align: 'center'},{name:'MARKET_STATUS_ID', index:'MARKET_STATUS_ID', editrules:{required:false}, editable: true, align: 'center'},{name:'MARKET_REMARK', index:'MARKET_REMARK', editrules:{required:true}, editable: true, align: 'center'

city_master={name:'CITY_ID', index:'CITY_ID', editable: true, hidden: true},{name:'CITY_NAME', index:'CITY_NAME', editrules:{required:true}, editable: true, align: 'center'},{name:'STATE_NAME', index:'STATE_NAME', editrules:{required:true}, editable: true, align: 'center', edittype: 'select', editoptions:

airport_city_master={name:'AIRPORT_CITY_ID', index:'AIRPORT_CITY_ID', editable: true, hidden: true},{name:'CITY_NAME', index:'CITY_NAME', editrules:{required:true}, editable: true, align: 'center'},{name:'CITY_ID', index:'CITY_ID', editrules:{required:true}, editable: true, align: 'center', edittype: 'select', editoptions:

state_master={name:'STATE_ID', index:'STATE_ID', editable: true, hidden: true},{name:'STATE_NAME', index:'STATE_NAME', editrules:{required:true}, editable: true, align: 'center'},{name:'COUNTRY_NAME', index:'COUNTRY_NAME', editrules:{required:true}, editable: true, align: 'center', edittype: 'select', editoptions:

country_master={name:'COUNTRY_ID', index:'COUNTRY_ID', editable: true, hidden: true},{name:'COUNTRY_NAME', index:'COUNTRY_NAME', editrules:{required:true}, editable: true, align: 'center'},{name:'CONTINENT_NAME', index:'CONTINENT_NAME', editrules:{required:true}, editable: true, align: 'center', edittype: 'select', editoptions:

continent_master={name:'CONTINENT_ID', index:'CONTINENT_ID', editable: true, hidden: true},{name:'CONTINENT_NAME', index:'CONTINENT_NAME', editrules:{required:true}, editable: true, align: 'center'

======================================================================
country_master.select={\"name\":\"country_master\",\"targetObect\":\"country_master , continent_master WHERE country_master.CONTINENT_ID = continent_master.CONTINENT_ID\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"COUNTRY_ID\",\"targetName\":\"COUNTRY_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"COUNTRY_NAME\",\"targetName\":\"COUNTRY_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"CONTINENT_ID\",\"targetName\":\"country_master.CONTINENT_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"CONTINENT_NAME\",\"targetName\":\"CONTINENT_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}
country_master.save={\"name\":\"country_master\",\"targetObect\":\"country_master\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"COUNTRY_ID\",\"targetName\":\"COUNTRY_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"@AIRLINE_TYPE_ID_seq.nextval\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"COUNTRY_NAME\",\"targetName\":\"COUNTRY_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"CONTINENT_ID\",\"targetName\":\"CONTINENT_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}
country_master.update={\"name\":\"country_master\",\"targetObect\":\"country_master\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"COUNTRY_ID\",\"targetName\":\"COUNTRY_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"COUNTRY_NAME\",\"targetName\":\"COUNTRY_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true},{\"name\":\"CONTINENT_ID\",\"targetName\":\"CONTINENT_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}
country_master.delete={\"name\":\"country_master\",\"targetObect\":\"country_master\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"COUNTRY_ID\",\"targetName\":\"COUNTRY_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false}]}

continent_master.select={\"name\":\"continent_master\",\"targetObect\":\"continent_master\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"CONTINENT_ID\",\"targetName\":\"CONTINENT_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"CONTINENT_NAME\",\"targetName\":\"CONTINENT_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}
continent_master.save={\"name\":\"continent_master\",\"targetObect\":\"continent_master\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"CONTINENT_ID\",\"targetName\":\"CONTINENT_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"@AIRLINE_TYPE_ID_seq.nextval\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"CONTINENT_NAME\",\"targetName\":\"CONTINENT_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}
continent_master.update={\"name\":\"continent_master\",\"targetObect\":\"continent_master\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"CONTINENT_ID\",\"targetName\":\"CONTINENT_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false},{\"name\":\"CONTINENT_NAME\",\"targetName\":\"CONTINENT_NAME\",\"dataType\":\"VARCHAR\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":false,\"required\":true,\"keyColSeq\":0,\"updateable\":true}]}
continent_master.delete={\"name\":\"continent_master\",\"targetObect\":\"continent_master\",\"targetType\":\"DB\",\"path\":\"\",\"attributes\":[{\"name\":\"CONTINENT_ID\",\"targetName\":\"CONTINENT_ID\",\"dataType\":\"INT\",\"orderNo\":0,\"defaultValue\":\"\",\"key\":true,\"required\":true,\"keyColSeq\":0,\"updateable\":false}]}




test:
============




// this is product details base on product ID (For Existing Product)
  @RequestMapping(value = "/ViewProductHistoryStatusReport", method = RequestMethod.GET)
	public String ViewProductHistoryStatusReport(ModelMap model,
			HttpServletRequest request) throws Exception {

		List<HistoryProduct> hList = iProductService
				.getHistoryProductDeatilsByProductID(request
						.getParameter("productId"));
		// Collections.sort(hList);

		List<HistoryProduct> hListbaseonProcessID = iProductService
				.getHistoryProductDeatilsByProcessID(request
						.getParameter("processId"));

		List<JSONObject> jsondata = new ArrayList<JSONObject>();

		for (HistoryProduct tempobjj : hListbaseonProcessID) {
			jsondata.add(new JSONObject(tempobjj.getContentData()));
		}

		model.addAttribute("hList", hList);
		model.addAttribute("jsondata", jsondata);
		model.addAttribute("processId", request.getParameter("processId"));

		return "ProductHitoryReport";
	}

	// for Assigne task to update

	@RequestMapping(value = "/asigneeTaskForUpdateProduct", method = RequestMethod.POST)
	public String asigneeTaskForUpdate(ModelMap model,
			HttpServletRequest request) throws Exception {

		String username = getUser().getUsername();
		
		pid = null;
		System.out.println("In Assigne method name is " + username);
		ProductPojo productPojo = (ProductPojo) iProductService
				.getProductDetails(request.getParameter("productId").trim());
		try {
			/*String processDefinitionId = ActivitiRestClient
					.getActivitiProcessDefinitionId();
			
			pid = ActivitiRestClient
					.startActivitiRequestProcess(processDefinitionId);*/
			
			pid=runtimeService.startProcessInstanceByKey("TravelERPWorkflow1").getProcessInstanceId();
			
			//String taskID = ActivitiRestClient.getRequestTaskID(pid, username);
			
			Task task = taskService.createTaskQuery().processInstanceId(pid).singleResult();
			task.setAssignee(username);
            task.setDescription(request.getParameter("productName"));
            
			/*String taskSaveStatus = ActivitiRestClient.saveActivitiTask(taskID,
					request.getParameter("productName"), username);*/
			taskService.saveTask(task);
            
			/*String taskCompliteStatus = ActivitiRestClient
					.completeRequestTask(taskID);*/
			
			taskService.complete(task.getId());
			
		/*	String newTaskID = ActivitiRestClient.getRequestTaskID(pid,
					request.getParameter("assigneeTask"));
			System.out.println("new Task ID is " + newTaskID);
			String taskSaveStatus2 = ActivitiRestClient.saveActivitiTask(
					newTaskID, request.getParameter("productName"),
					request.getParameter("assigneeTask"));
			System.out.println("New Task ID is " + newTaskID + " Save Status "
					+ taskSaveStatus2);*/
			
			List<Task> task2=taskService.createTaskQuery().processInstanceId(pid).list();
			if ((task2.size()) == 1) {
                task2.get(0).setDescription( request.getParameter("remarks"));
                task2.get(0).setAssignee(request.getParameter("assigneeTask"));
                task2.get(0).setOwner(username);
                task2.get(0).setName(request.getParameter("productName"));
                System.out.println("task id "+task2.get(0).getId());
				}
		
			

			// for Product Details
			productPojo.setProcessInstanceID(pid);
			productPojo.setRemarks(request.getParameter("remarks"));

			RemarkBean rbean = new RemarkBean();
			rbean.setBy(username);
			rbean.setRtimestamp(new Date().toString());
			rbean.setText(request.getParameter("remarks"));
			productPojo.addRemark(rbean);
			
			// productPojo.setDescription("");
			/*JSONObject subob = new JSONObject(productPojo);

			String jsonText = subob.toString();
			System.out.println(jsonText);

			String res = ActivitiRestClient.saveProduct(newTaskID, subob);*/
			
			saveProductIntoActivitiDB(task2.get(0).getId(),productPojo);
			
			taskService.saveTask(task2.get(0));

		} catch (Exception er) {
			System.out.println("Exception in edit mode Assigne Task " + er);
		}

		// for Loking purpose
		processLockingService.updateLockingRecord(productPojo.getProductId(),
				1, pid);

		List<ProductPojo> productList = iProductService.productList();
		System.out.println(productList.size());

		model.addAttribute("productList", productList);
		// ProductPojo
		// productPojo=(ProductPojo)iProductService.getProductDetails(request.getParameter("productId").trim());
		// model.addAttribute("productPojo", productPojo);
		return "redirect:welcome";
	}

	// Go to Back From History Report Page
	@RequestMapping(value = "/backToHome", method = RequestMethod.GET)
	public String backToHome(ModelMap model, HttpServletRequest request)
			throws Exception {
		List<ProductPojo> productList = iProductService.productList();
		model.addAttribute("productList", productList);
		return "manager_home";

	}

	// this for Remarks Details
	@RequestMapping(value = "/viewRemarks", method = RequestMethod.POST)
	public @ResponseBody
	String remarksView(
			@RequestParam(value = "taskID", required = true) String taskID,
			ModelMap model, HttpServletRequest request) throws Exception {

		System.out.println("It Is Inside the  View Remarks " + taskID);

		/*String ob = (String) ActivitiRestClient.getProductDetails(taskID);
		ProductPojo pojo = bindMapperObject(ob, ProductPojo.class);*/
		
		/*HashMap<String, Object> hp1=(HashMap<String, Object>) taskService.getVariable(taskID, "productDetails");
		 ProductPojo pojo=(ProductPojo) hp1.get("productDetails");*/
		
		 ProductPojo pojo=(ProductPojo)getProductIntoActivitiDB(taskID);
		List<RemarkBean> relist = pojo.getRemarkList();
		String rData = "<table><tr bgcolor='Lightblue'> <th><font align='center'><b>Remark By</b></font></th><th><font align='center'><b>Time</b></font></th><th><font align='center'><b>Text</b></font></th></tr>";

		for (RemarkBean bb : relist) {
			rData = rData + "<tr><td>" + bb.getBy() + "</td><td>"
					+ bb.getRtimestamp() + "</td><td>" + bb.getText()
					+ "</td></tr>";

		}
		rData = rData + "</table>";
		System.out.println(rData);

		return rData;
	}

	private User getUser() {
		return (User) SecurityContextHolder.getContext().getAuthentication()
				.getPrincipal();

	}

	private void copyProduct(String taskId, ProductPojo productPojo)
			throws Exception {

		/*String ob = (String) ActivitiRestClient.getProductDetails(taskId);
		ProductPojo pojo = bindMapperObject(ob, ProductPojo.class);*/
		ProductPojo pojo=(ProductPojo)getProductIntoActivitiDB(taskId);
		productPojo.setRemarkList(pojo.getRemarkList());
		addRemarks(productPojo);
	}

	private void addRemarks(ProductPojo pojo) {
		RemarkBean rbean = new RemarkBean();
		rbean.setText(pojo.getRemarks());
		rbean.setBy(getUser().getUsername());
		rbean.setRtimestamp(new Date().toString());

		pojo.addRemark(rbean);
	}

	private <T> T bindMapperObject(String ob, Class<T> clazz) throws Exception {
		ObjectNode on = (ObjectNode) new ObjectMapper().readTree(ob);
		System.out.println("In controller " + on);
		ObjectMapper mapper = new ObjectMapper();
		return mapper.readValue(on, clazz);

	}

	public void saveProcessLokingDetails(ProductPojo productPojo) {
		ProcessLocking pLocking = new ProcessLocking();
		pLocking.setCreateTime(new Date());
		pLocking.setProcessId(productPojo.getProcessInstanceID());
		pLocking.setProductId(productPojo.getProductId());
		pLocking.setProductName(productPojo.getProductName());
		pLocking.setStatus(new Integer(0));
		processLockingService.saveLockingRecord(pLocking);
	}

	private String statusReport(String prID) {
		String sr = "notrunning";
		ProcessLocking pLocking = processLockingService.getLockingRecord(prID);
		Integer statusR = pLocking.getStatus();
		if (statusR == 1) {
			sr = "running";
		}

		return sr;
	}

	@RequestMapping(value = "/JasperReport", method = RequestMethod.GET)
	public String doSalesMultiReport(
			@RequestParam(value = "type", required = true) String type,
			ModelMap model,
			@RequestParam(value = "processId", required = true) String processId) {

		System.out.println("jasper control calling ====" + type);

		// List<ProductPojo> productList = iProductService.productList();
		// JRDataSource ds = new JRBeanCollectionDataSource(productList);
		List<Map> list = iProductService.getDetails(processId);
		System.out.println(list);
		JRDataSource ds = new JRBeanCollectionDataSource(list);
		model.addAttribute("datasource1", ds);
		model.addAttribute("format", type);
		return "multiReport";
	}

	@RequestMapping(value = "/ReleaseProductByMamager", method = RequestMethod.GET)
	public String releaseProductByMamager(ModelMap model,
			HttpServletRequest request) throws Exception {
		ActivitiRestClient
				.deleteProcessInstanceID(request.getParameter("prId"));

		return "redirect:welcome";
	}

	public List<JSONObject> getUsersByGroupId(String groupId) throws Exception {
		return ActivitiRestClient.getUsersByGroup(groupId);
	}
	
	
	
	public void saveProductIntoActivitiDB(String taskID,Object prObj)
	{
		 HashMap<String, Object> hp = new HashMap<String, Object>();
         hp.put("productDetails", prObj);
         System.out.println(hp+" product store temprarly");
        
        taskService.setVariable(taskID, "productDetails", hp);
	}
	
	public Object getProductIntoActivitiDB(String taskID){
		 HashMap<String, Object> hp1=(HashMap<String, Object>) taskService.getVariable(taskID, "productDetails");
		 ProductPojo pojo=(ProductPojo) hp1.get("productDetails");
		return pojo;
	}
	
	public void acceptProductByReviewer(String taskId,String value){
		
		System.out.println("This is AcceptProduct Block");
		String prid = taskService.createTaskQuery().taskId(taskId).singleResult().getProcessInstanceId();
		Task task3 = taskService.createTaskQuery().taskId(taskId).singleResult();
		String tOwner = task3.getOwner();
	
		String tDescription = task3.getDescription();
		String pname=task3.getName();
	 	
	//start syn
	synchronized (this) {
	if (value.equalsIgnoreCase("notapprove")) {
	 taskService.setVariable(taskId, "requestApprove", value);
	}
	}
	// ActivitiUtil.getTaskService().setVariable(taskId, "requestApprove", gValue);
  //closing		
	 //variables.remove("taskId");
	taskService.complete(taskId);
	 
	 	String taskStatus = "";
    List<Task> task4 =  taskService.createTaskQuery().processInstanceId(prid).list();
     for(Task tempTask:task4){
       	tempTask.setOwner(tOwner);
    	tempTask.setDescription(tDescription);
    	tempTask.setName(pname);
    	if (tempTask.getAssignee() == null) {
			taskStatus = "done";
		}
    	taskService.saveTask(tempTask);
      }

     // for checking
     if (taskStatus.equalsIgnoreCase("done")) {

			String sName = (String)taskService.getVariable(task4.get(0).getId(), "requestApprove");
			System.out.println("in done valeu of xml is " + sName);

			if (sName.equalsIgnoreCase("approve")) {
				System.out.println("In Appove block when done M  :--"	+ task4.get(0).getName());
				task4.get(0).setAssignee("james");	 			
				taskService.setVariable(task4.get(0).getId(), "discription1",tDescription );
				
			} else if (sName.equalsIgnoreCase("notapprove")) {	 				
				
				List<HistoricTaskInstance> taskins = historyService.createHistoricTaskInstanceQuery().processInstanceId(prid).list();
				task4.get(0).setAssignee(taskins.get(1).getAssignee());
			
			} else {
				System.out.println("nothing........");
			}
			taskService.saveTask(task4.get(0));
	}
	}
	

}

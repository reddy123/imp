// code for ReviePage Call

  	@RequestMapping(value = "/reviewPageCall", method = RequestMethod.GET)
		public String reviewPageCall(ModelMap model, HttpServletRequest request)
				throws Exception {

			String name =getUser().getUsername();
		//	String name = request.getRemoteUser();
			// this is base on rest api
			
			//List<JSONObject> task = ActivitiRestClient.getTasks("assignee", name);
			
			List<Task> task=taskService.createTaskQuery().taskAssignee(name).list();
			model.addAttribute("task", task);

			return "ReviewListPage";
		}
		
		
		// This is for calling ReviewProductDetailsPage for Accept And Reject

		@RequestMapping(value = "/reviewProductDetails", method = RequestMethod.GET)
		public String reviewProductDetails(ModelMap model,
				HttpServletRequest request) throws Exception {

			System.out.println("It Is inside Review Product Details Method ");

			// this is base on RestAPI
			/*String ob = (String) ActivitiRestClient.getProductDetails(request
					.getParameter("taskId"));
			ObjectNode on = (ObjectNode) new ObjectMapper().readTree(ob);
			System.out.println("In controller " + on);
			ObjectMapper mapper = new ObjectMapper();
			ProductPojo pojo = mapper.readValue(on, ProductPojo.class);*/
			
			ProductPojo pojo=(ProductPojo)getProductIntoActivitiDB(request.getParameter("taskId"));

			ProductPojo oldValue = iProductService.getProductDetails(pojo
					.getProductId());

			if (oldValue != null)
				model.addAttribute("oldValue", oldValue);

			model.addAttribute("productPojo", pojo);
			model.addAttribute("taskid", request.getParameter("taskId"));

			return "ReviewProductDetails";
		}
		
		
		// This calling for Accept Page

		@RequestMapping(value = "/acceptProduct", method = RequestMethod.POST)
		public String acceptProduct(
				@ModelAttribute("productPojo") ProductPojo productPojo,
				ModelMap model, HttpServletRequest request) throws Exception {

			String userName = getUser().getUsername();

			System.out.println("It Is Accept Product Method.....");

			System.out.println("Button Value  " + request.getParameter("button1"));
			System.out.println("Task 3rd Id Value Is ;--  "
					+ request.getParameter("taskId"));
			System.out.println("Product Name is " + productPojo.getProductName());

			//String value1 = request.getParameter("appValue");

			String value1 = "";
			String returnValue = "redirect:welcome";
			// String returnValue="reviewer_home";
			if (request.getParameter("button1").equalsIgnoreCase("ACCEPT")) {
				value1 = "approve";
			/*	
				ActivitiRestClient.setVariable(request.getParameter("taskId"),
						productPojo.getRemarks());*/
				
				List<String> remarks1 = (ArrayList<String>)taskService.getVariable(request.getParameter

("taskId"), "list1");
				  remarks1.add(productPojo.getRemarks());
				  taskService.setVariable(request.getParameter("taskId"), "list1", remarks1);
				

				copyProduct(request.getParameter("taskId"), productPojo);

				/*JSONObject jsonObj = new JSONObject(productPojo);
				ActivitiRestClient.saveProduct(request.getParameter("taskId"),
						jsonObj);*/
				saveProductIntoActivitiDB(request.getParameter("taskId"), productPojo);
				
				/*ActivitiRestClient.acceptProductByReviewer(
						request.getParameter("taskId"), value1);*/
				
				acceptProductByReviewer(request.getParameter("taskId"), value1);

			} else if (request.getParameter("button1").equalsIgnoreCase("REJECT")) {

				value1 = "notapprove";
				
				/*ActivitiRestClient.setVariable(request.getParameter("taskId"),
						productPojo.getRemarks());*/
				
				List<String> remarks1 = (ArrayList<String>)taskService.getVariable(request.getParameter

("taskId"), "list1");
				  remarks1.add(productPojo.getRemarks());
				  taskService.setVariable(request.getParameter("taskId"), "list1", remarks1);

				copyProduct(request.getParameter("taskId"), productPojo);

				/*JSONObject jsonObj = new JSONObject(productPojo);
				ActivitiRestClient.saveProduct(request.getParameter("taskId"),
						jsonObj);*/
				saveProductIntoActivitiDB(request.getParameter("taskId"), productPojo);
				
				/*ActivitiRestClient.acceptProductByReviewer(
						request.getParameter("taskId"), value1);*/
				
				acceptProductByReviewer(request.getParameter("taskId"), value1);
				

			} else if (request.getParameter("button1").equalsIgnoreCase("CANCEL")) {
				returnValue = "redirect:reviewPageCall";
			}
			// System.out.println("Value of value1 is " + value1);

			// seting remarks in variable

			// RemarkBean rbean = new RemarkBean();
			// rbean.setBy(userName);
			// rbean.setRtimestamp(new Date().toString());
			// rbean.setText(productPojo.getReviewerRemarks());
			// productPojo.addRemark(rbean);

			// copyProduct(request.getParameter("taskId"),productPojo);

			// System.out.println(" set variable reviewer time");

			// ================for
		/*	JSONObject jsonObj = new JSONObject(productPojo);
			ActivitiRestClient.saveProduct(request.getParameter("taskId"), jsonObj);*/
			
			//saveProductIntoActivitiDB(request.getParameter("taskId"), productPojo);
			
	/*		ActivitiRestClient.acceptProductByReviewer(
					request.getParameter("taskId"), value1);*/

			//acceptProductByReviewer(request.getParameter("taskId"), value1);
			
			return returnValue;
		}
		
		
		
		// calling ViewPendingAppTaskPage

		@RequestMapping(value = "/ViewTaskForApprove", method = RequestMethod.GET)
		public String ViewTaskForApprove(ModelMap model, HttpServletRequest request)
				throws Exception {

			String name = getUser().getUsername();

			List<Task> task = taskService.createTaskQuery().taskAssignee(name).list();
			model.addAttribute("task", task);

			return "ViewPendingAppTaskPage";
		}
		
		
		// Manager can view the product details before approve

		@RequestMapping(value = "/productDetailsForApprovel", method = RequestMethod.GET)
		public String productDetailsForApprovel(ModelMap model,
				HttpServletRequest request) throws Exception {

			// This is restapi
			/*String ob = (String) ActivitiRestClient.getProductDetails(request
					.getParameter("taskId"));
			ObjectNode on = (ObjectNode) new ObjectMapper().readTree(ob);
			ObjectMapper mapper = new ObjectMapper();
			ProductPojo pojo = mapper.readValue(on, ProductPojo.class);*/
			
			ProductPojo pojo=(ProductPojo)getProductIntoActivitiDB(request.getParameter("taskId"));
			
		/*	String str = (String) ActivitiRestClient.getVariable(request
					.getParameter("taskId"));*/
			List<String> remarks1 = (ArrayList<String>) taskService.getVariable(request.getParameter("taskId"), 

"list1");
			StringBuffer sb=new StringBuffer();
			 for( String rem:remarks1)
				 sb.append(rem);
			 String str=sb.toString();

			ProductPojo oldValue = iProductService.getProductDetails(pojo
					.getProductId());
			if (oldValue != null)
				model.addAttribute("oldValue", oldValue);

			model.addAttribute("remarks1", str.replace('+', ' '));
			model.addAttribute("productPojo", pojo);
			model.addAttribute("taskid", request.getParameter("taskId"));

			System.out.println("Calling ProductCreationPage for Task Id : -- "
					+ request.getParameter("taskId"));

			return "ProductDetailsForApprovel";
		}
		
		//====================upto ok
		
		
		// This is for Complite The Task through Manager
		@RequestMapping(value = "/approveProduct", method = RequestMethod.POST)
		public String approveProduct(
				@ModelAttribute("productPojo") ProductPojo productPojo,
				ModelMap model, HttpServletRequest request) throws Exception {
			
			String name = getUser().getUsername();
		
			System.out.println("In Approvel Method  Product nam eis "
					+ productPojo.getProductName());
			System.out.println("In Approvel  " + request.getParameter("taskId"));

			// for remarks
			String returnValue = "redirect:welcome";
			// String returnValue="manager_home";
			if (request.getParameter("button1").equalsIgnoreCase("CANCEL")) {

				returnValue = "redirect:ViewTaskForApprove";
			} else if (request.getParameter("button1").equalsIgnoreCase("APPROVE")) {

				copyProduct(request.getParameter("taskId"), productPojo);

				productPojo.setStatus("CONFIRM");
				productPojo.setTaskid(request.getParameter("taskId"));
				productPojo.setApproveBy("james");
				productPojo.setReviewerRemarks(productPojo.getRemarks().trim());
				iProductService.saveProduct(productPojo);

				// for storing data in history table
				System.out.println("Process Insatance ID is "
						+ productPojo.getProcessInstanceID());
				JSONObject jsontempob = new JSONObject(productPojo);
				HistoryProduct hp = new HistoryProduct();
				hp.setContentData(jsontempob.toString());
				hp.setProcessId(productPojo.getProcessInstanceID());
				hp.setProductId(productPojo.getProductId());
				hp.setProductName(productPojo.getProductName());
				hp.setProductType(productPojo.getProductType());
				hp.setCreateTime(new Date());
				iProductService.saveProductHistory(hp);

				/*ActivitiRestClient.completeRequestTask(request
						.getParameter("taskId"));*/
				
				taskService.complete(request.getParameter("taskId"));
				
			}
			System.out.println("Task Complited....  and store in database...");

			List<ProductPojo> productList = iProductService.productList();
			System.out.println(productList.size());

			// for Loking purpose
			processLockingService.updateLockingRecord(productPojo.getProductId(),
					0, productPojo.getProcessInstanceID());

			model.addAttribute("productList", productList);

			return returnValue;
		}
		
		
	// for Manager call a page to display all pending task list
	@RequestMapping(value = "/ViewPendingTaskStatus", method = RequestMethod.GET)
	public String ViewPendingTaskStatus(ModelMap model,
			HttpServletRequest request) throws Exception {

		// this is base on rest api
		/*List<JSONObject> task1 = ActivitiRestClient.getTasks("allRecords",
				"allRecords");*/
		List<Task> tt=taskService.createTaskQuery().list();

		System.out.println("task object in pending task time "+tt);
		
		//HashMap<String, String> tempMap = new HashMap<>();

		// this is base on rest api
		/*for (JSONObject t : task1) {
			tempMap.put(t.getString("processInstanceId"),
					t.getString("description"));
		}
		System.out.println("From HashSet In ArrayList Task Size is "
				+ tempMap.size());

		System.out.println(tempMap);*/
		
		/*// for new product release lock code start
		String productstatus="oldproduct";
		for (Map.Entry<String, String> entry : tempMap.entrySet()) {
		    System.out.println("Key = " + entry.getKey() + ", Value = " + entry.getValue());
		    if(iProductService.getDetails(entry.getKey().toString()).equals("new")){
		    	productstatus="newproduct";
		    }
		}
		System.out.println(productstatus);
		model.addAttribute("status", productstatus);
		
		// end
*/		
		model.addAttribute("tempMap", tt);


		return "ViewPendingTaskStatusReport";
	}

	@RequestMapping(value = "/ViewPendingTaskStatusReportDetails", method = RequestMethod.GET)
	public String ViewPendingTaskStatusReportDetails(ModelMap model,
			HttpServletRequest request) throws Exception {

		// this is base on rest api
		/*List<JSONObject> task1 = ActivitiRestClient.getTasks("allRecords",
				"allRecords");*/
		
		List<Task> tt=taskService.createTaskQuery().list();
		
		/*HashMap<String, String> tempMap = new HashMap<>();
		for (JSONObject t : task1) {
			tempMap.put(t.getString("processInstanceId"),
					t.getString("description"));
		}*/

		// ==
		/*List<JSONObject> taskins = ActivitiRestClient
				.getAllHistaryTasks(request.getParameter("taskId"));*/
		 
		 List<HistoricTaskInstance> taskList=historyService.createHistoricTaskInstanceQuery()
		.processInstanceId(request.getParameter("taskId"))
		.orderByHistoricActivityInstanceStartTime()
		.asc()
		.list();
		
		
		/*for (JSONObject jsonObject : taskins) {
			if (jsonObject.getString("completed").equalsIgnoreCase("true")) {
				jsonObject.put("completed", "COMPLETED");

			} else {
				jsonObject.put("completed", "PENDING");
			}
		}*/

		model.addAttribute("taskins", taskList);
		model.addAttribute("tempMap", tt);
		model.addAttribute("pid", request.getParameter("taskId"));

		return "ViewPendingTaskStatusReport";
	}

	

	// This is For update
	// part=============================================================================

	@RequestMapping(value = "/viewProduct", method = RequestMethod.POST)
	public String viewProduct(ModelMap model, HttpServletRequest request)
			throws Exception {

		String str = null;
		String bb = request.getParameter("button1");
		System.out.println(bb);
		if (bb.equals("ADD")) {
			str = "redirect:createTask";
		} else if (bb.equals("VIEW")) {
			System.out.println(request.getParameter("radioname"));
			ProductPojo productPojo = (ProductPojo) iProductService
					.getProductDetails(request.getParameter("radioname").trim());

			String sReport = statusReport(productPojo.getProductId());
			model.addAttribute("productPojo", productPojo);
			model.addAttribute("sReport", sReport);

			str = "ViewExsistingProduct";
		}

		return str;
	}

	// calling to Initiator Page
	@RequestMapping(value = "/updateProduct", method = RequestMethod.POST)
	public String updateProduct(
			@ModelAttribute("productPojo") ProductPojo productPojo,
			ModelMap model, HttpServletRequest request) throws Exception {
		String returnTypeValue = "";
		String buttonValue = request.getParameter("button1");
		if (buttonValue.equals("Edit")) {
			/*List<JSONObject> usersList = getUsersByGroupId("configurator");*/
			
			List<org.activiti.engine.identity.User> usersList=identityService.createUserQuery().memberOfGroup

("configurator").list();
			model.addAttribute("userList", usersList);
			
			returnTypeValue = "AssigneTaskForUpdate";
			
		} else if (buttonValue.equals("Cancel")) {
			List<ProductPojo> productList = iProductService.productList();
			model.addAttribute("productList", productList);
			returnTypeValue = "manager_home";
		} else if (buttonValue.equals("History")) {

			System.out.println("Product Id is " + productPojo.getProductId());
			List<HistoryProduct> hList = iProductService
					.getHistoryProductDeatilsByProductID(productPojo
							.getProductId());
			model.addAttribute("hList", hList);
			returnTypeValue = "ProductHitoryReport";
		} else if (buttonValue.equals("ReleaseLock")) {
			System.out.println("Release lock");

			ProcessLocking prlocking = (ProcessLocking) processLockingService
					.getLockingRecord(productPojo.getProductId());
			System.out.println("Current PRID " + prlocking.getcProcessId());

	/*		ActivitiRestClient.deleteProcessInstanceID(prlocking
					.getcProcessId());*/
			// for Release Locking
			
			runtimeService.deleteProcessInstance(prlocking.getcProcessId(), "Release Lock");
			 System.out.println("Release Lock success");

			processLockingService.updateLockingRecord(
					productPojo.getProductId(), 0,
					productPojo.getProcessInstanceID());

			List<ProductPojo> productList = iProductService.productList();
			model.addAttribute("productList", productList);
			returnTypeValue = "manager_home";

		}
		System.out.println("In Update Section " + productPojo.getDescription());

		model.addAttribute("productPojo", productPojo);
		return returnTypeValue;
	}

configuring coherence out-of-process:
===========================================================================

configure nodemanager:

1. find nodemanger folder in weblogic home directory

D:\Weblogic\wls1211_dev\wlserver\common\nodemanager

2. open cmd set WM_HOME,JAVA_HOME,COHERENCE_HOME

3. change directiry to D:\Weblogic\wls1211_dev\wlserver\server\bin

	==>installNodeMgrSvc.cmd 

4. create nodemanger.properties file in nodemanger floder
	D:\Weblogic\wls1211_dev\wlserver\common\nodemanager

nodemanager.properties

#Fri Aug 23 11:49:40 IST 2013
NativeVersionEnabled=false
PropertiesVersion=10.3
ListenAddress=10.21.12.86
ListenPort=5566
SecureListener=false
AuthenticationEnabled=true
StartScriptEnabled=true
StartScriptName=startWebLogic.cmd
StopScriptEnabled=true
StopScriptName=stopWebLogic.cmd


if nodemanager.domains not there create

nodemanager.domains:

#Domains and directories created by Configuration Wizard
#Tue Aug 06 16:35:12 IST 2013
mydomain=C\:\\home\\myhome\\domain

	
5.start nodemanger using cmd ==>startNodeManager.cmd


create meachine in weblogic and give nodemanger details.check meachine  monitoring tab ...rechable or not and version

==> start weblogic server through nodemanger(connect wlst.cmd and connect to nodemanager nmConnect(), nmStart('myserver') ) or cmd startweblogic.cmd

change directory to D:\Weblogic\wls1211_dev\wlserver\common\bin

set MW_HOME=D:\Weblogic\wls1211_dev
set JAVA_HOME=D:\jdk1.7.0_05

D:\Weblogic\wls1211_dev\wlserver\common\bin>wlst.cmd
wlst:offline>
nmConnect('ssouser','ssouser123','10.21.12.86','5566','mydomain','C:\home\myhome\domain','plain')
nmVersion()
nmStart('servername')
nmServerstatus()
nmKill('servername')
nmDisconnect() 

==>create machine in weblogic
   environment--machine--new-give machine name--ok
   select machine nodemanger--give port and address of nodemanger ruuning..
   click monitoring tab check nodemanager running or not
==>create coherence cluster in weblogic
	Environment--coherence cluster--new--give cluster name
	seelct cluster--give unicat, muticast, target server details



cache server:

==> create coherence server in weblogic
in start tab give fallow arguments

classpath:

D:\Weblogic\wls1211_dev\modules\features\weblogic.server.modules.coherence.server_12.1.1.0.jar;D:\Weblogic\wls1211_dev\modules\features\weblogic.server.modules.coherence.integration_12.1.1.0.jar;D:\coherence_3.7\lib\coherence.jar;D:\coherence_3.7\lib\coherence-web.jar;D:\coherence_3.7\lib\coherence-web-spi.war

arugument:

-Dtangosol.coherence.cacheconfig=session-cache-config.xml -Dtangosol.coherence.distributed.localstorage=true -Dtangosol.coherence.session.localstorage=true -Dtangosol.coherence.cluster=CoherenceCluster -Dtangosol.coherence.clusteraddress=231.1.3.4 -Dtangosol.coherence.clusterport=7744


client server:

and also deploy D:\Weblogic\wls1211_dev\wlserver\common\deployable-libraries\active-cache-1.0.jar and D:\coherence_3.7\lib\coherence-web-spi.war as shared library in weblogic server

in application :

put required jars in lib or maven pom  

D:\coherence_3.7\lib\coherence.jar, D:\coherence_3.7\lib\coherence-web.jar,D:\Weblogic\wls1211_dev\modules\com.oracle.core.coherence.integration_2.0.0.0.jar, D:\Weblogic\wls1211_dev\modules\com.oracle.core.coherence.server_2.0.0.0.jar, D:\Weblogic\wls1211_dev\modules\features\weblogic.server.modules.coherence.integration_12.1.1.0.jar, D:\Weblogic\wls1211_dev\modules\features\weblogic.server.modules.coherence.server_12.1.1.0.jar

META-INF/MANIFEST-MF:

Extension-List: active-cache
active-cache-Extension-Name: active-cache
active-cache-Specification-Version: 1.0
active-cache-Implementation-Version: 1.0

WEB-INF/web.xml:

<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	version="2.5">
	<display-name>session1</display-name>

	<context-param>
		<param-name>coherence-web-sessions-enabled</param-name>
		<param-value>true</param-value>
	</context-param>
	<context-param>
		<param-name>coherence-session-weblogic-compatibility-mode</param-name>
		<param-value>true</param-value>
	</context-param>
	<context-param>
		<param-name>coherence-servletcontext-clustered</param-name>
		<param-value>true</param-value>
	</context-param>
	<!-- <context-param>
		<param-name>coherence-session-cookie-domain</param-name>
		<param-value>mydomain</param-value>
	</context-param> -->
	<context-param>
		<param-name>coherence-enable-sessioncontext</param-name>
		<param-value>true</param-value>
	</context-param>


	<context-param>
		<param-name>coherence-scopecontroller-class</param-name>
		<param-value>com.tangosol.coherence.servlet.AbstractHttpSessionCollection$GlobalScopeController</param-value>
	</context-param>

</web-app>

WEB-INF/weblogic.xml:

<?xml version="1.0" encoding="UTF-8"?>
<weblogic-web-app xmlns="http://xmlns.oracle.com/weblogic/weblogic-web-app"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd http://xmlns.oracle.com/weblogic/weblogic-web-app http://xmlns.oracle.com/weblogic/weblogic-web-app/1.4/weblogic-web-app.xsd">
	<weblogic-version>12.1.1</weblogic-version>
	<context-root>session1</context-root>

	<session-descriptor>
		<cookie-name>JSESSIONID</cookie-name>
		<cookie-path>/</cookie-path>
	</session-descriptor>

	<session-descriptor>
		<persistent-store-type>coherence-web</persistent-store-type>
	</session-descriptor>
	<library-ref>
		<library-name>coherence-web-spi</library-name>
	</library-ref>
	<coherence-cluster-ref>
		<coherence-cluster-name>CoherenceCluster</coherence-cluster-name>
	</coherence-cluster-ref>

</weblogic-web-app>

session-cache-config.xml:

<?xml version="1.0" encoding="UTF-8"?>
<cache-config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://xmlns.oracle.com/coherence/coherence-cache-config"
	xsi:schemaLocation="http://xmlns.oracle.com/coherence/coherence-cache-config coherence-cache-config.xsd">

	<caching-scheme-mapping>
		<!-- The clustered cache used to store Session management data. -->
		<cache-mapping>
			<cache-name>session-management</cache-name>
			<scheme-name>replicated</scheme-name>
		</cache-mapping>

		<!-- The clustered cache used to store ServletContext attributes. -->
		<cache-mapping>
			<cache-name>servletcontext-storage</cache-name>
			<scheme-name>replicated</scheme-name>
		</cache-mapping>

		<!-- The clustered cache used to store Session attributes. -->
		<cache-mapping>
			<cache-name>session-storage</cache-name>
			<scheme-name>session-near</scheme-name>
		</cache-mapping>

		<!-- The clustered cache used to store the "overflowing" (split-out due 
			to size) Session attributes. Only used for the "Split" model. -->
		<cache-mapping>
			<cache-name>session-overflow</cache-name>
			<scheme-name>session-distributed</scheme-name>
		</cache-mapping>

		<!-- The clustered cache used to store IDs of "recently departed" Sessions. -->
		<cache-mapping>
			<cache-name>session-death-certificates</cache-name>
			<scheme-name>session-certificate</scheme-name>
		</cache-mapping>

		<!-- The local cache used to store Sessions that are not yet distributed 
			(if there is a distribution controller). -->
		<cache-mapping>
			<cache-name>local-session-storage</cache-name>
			<scheme-name>unlimited-local</scheme-name>
		</cache-mapping>

		<!-- The local cache used to store Session attributes that are not distributed 
			(if there is a distribution controller or attributes are allowed to become 
			local when serialization fails). -->
		<cache-mapping>
			<cache-name>local-attribute-storage</cache-name>
			<scheme-name>unlimited-local</scheme-name>
		</cache-mapping>
	</caching-scheme-mapping>

	<caching-schemes>
		<!-- Replicated caching scheme used by the Session management and ServletContext 
			attribute caches. -->
		<replicated-scheme>
			<scheme-name>replicated</scheme-name>
			<service-name>ReplicatedSessionsMisc</service-name>
			<request-timeout>30s</request-timeout>
			<backing-map-scheme>
				<local-scheme>
					<scheme-ref>unlimited-local</scheme-ref>
				</local-scheme>
			</backing-map-scheme>
			<autostart>true</autostart>
		</replicated-scheme>

		<!-- Near caching scheme used by the Session attribute cache. The front 
			cache uses a Local caching scheme and the back cache uses a Distributed caching 
			scheme. -->
		<near-scheme>
			<scheme-name>session-near</scheme-name>
			<front-scheme>
				<local-scheme>
					<scheme-ref>session-front</scheme-ref>
				</local-scheme>
			</front-scheme>
			<back-scheme>
				<distributed-scheme>
					<scheme-ref>session-distributed</scheme-ref>
				</distributed-scheme>
			</back-scheme>
			<invalidation-strategy>present</invalidation-strategy>
		</near-scheme>

		<local-scheme>
			<scheme-name>session-front</scheme-name>
			<eviction-policy>HYBRID</eviction-policy>
			<high-units>1000</high-units>
			<low-units>750</low-units>
		</local-scheme>

		<distributed-scheme>
			<scheme-name>session-distributed</scheme-name>
			<scheme-ref>session-base</scheme-ref>
			<backing-map-scheme>
				<local-scheme>
					<scheme-ref>unlimited-local</scheme-ref>
				</local-scheme>
				<!-- for disk overflow use this backing scheme instead: <overflow-scheme> 
					<scheme-ref>session-paging</scheme-ref> </overflow-scheme> -->
			</backing-map-scheme>
		</distributed-scheme>

		<!-- Distributed caching scheme used by the "recently departed" Session 
			cache. -->
		<distributed-scheme>
			<scheme-name>session-certificate</scheme-name>
			<scheme-ref>session-base</scheme-ref>
			<backing-map-scheme>
				<local-scheme>
					<eviction-policy>HYBRID</eviction-policy>
					<high-units>4000</high-units>
					<low-units>3000</low-units>
					<expiry-delay>86400</expiry-delay>
				</local-scheme>
			</backing-map-scheme>
		</distributed-scheme>

		<!-- "Base" Distributed caching scheme that defines common configuration. -->
		<distributed-scheme>
			<scheme-name>session-base</scheme-name>
			<service-name>DistributedSessions</service-name>
			<thread-count>0</thread-count>
			<lease-granularity>member</lease-granularity>
			<local-storage system-property="tangosol.coherence.session.localstorage">false</local-storage>
			<partition-count>257</partition-count>
			<backup-count>1</backup-count>
			<backup-storage>
				<type>on-heap</type>
			</backup-storage>
			<request-timeout>30s</request-timeout>
			<backing-map-scheme>
				<local-scheme>
					<scheme-ref>unlimited-local</scheme-ref>
				</local-scheme>
			</backing-map-scheme>
			<autostart>true</autostart>
		</distributed-scheme>

		<!-- Disk-based Session attribute overflow caching scheme. -->
		<overflow-scheme>
			<scheme-name>session-paging</scheme-name>
			<front-scheme>
				<local-scheme>
					<scheme-ref>session-front</scheme-ref>
				</local-scheme>
			</front-scheme>
			<back-scheme>
				<external-scheme>
					<bdb-store-manager />
				</external-scheme>
			</back-scheme>
		</overflow-scheme>

		<!-- Local caching scheme definition used by all caches that do not require 
			an eviction policy. -->
		<local-scheme>
			<scheme-name>unlimited-local</scheme-name>
			<service-name>LocalSessionCache</service-name>
		</local-scheme>

		<!-- Clustered invocation service that manages sticky session ownership. -->
		<invocation-scheme>
			<service-name>SessionOwnership</service-name>
			<request-timeout>30s</request-timeout>
		</invocation-scheme>
	</caching-schemes>
</cache-config>

jsp:

<html>
<body>
	<h3>
		Counter :
		<%
		Integer counter = new Integer(1);
		HttpSession httpsession = request.getSession(true);
		if (httpsession.isNew()) {
			httpsession.setAttribute("count", counter);
			out.println(counter);
		} else {
			int count = ((Integer) httpsession.getAttribute("count"))
					.intValue();
			httpsession.setAttribute("count", new Integer(++count));
			//httpsession.setAttribute("data", " seesion1 + welcome to session sharing================");
			out.println(count);
		}
	%>
	</h3>
</body>
</html>


build application as war and deploy into application server




emailjob
============
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:context="http://www.springframework.org/schema/context"

	xsi:schemaLocation="
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
    http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-2.1.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">

	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="smtp.gmail.com" />
		<property name="port" value="587" />
		<property name="username" value="ppssrr.970@gmail.com" />
		<property name="password" value="sivareddy" />
		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.auth">true</prop>
			</props>
		</property>
	</bean>


	<bean id="sendMailTasklet" class="com.cnk.travelerp.spring.batch.email.SendMailTasklet">
		<property name="mailSender" ref="mailSender" />
		<property name="sendMailService" ref="emailService" />
		<property name="senderAddress" value="ppssrr.970@gmail.com" />
		<property name="recipient" value="sivaiah.soft@gmail.com" />
		<property name="attachmentFilePath" value="D:\email" />
	</bean>

	<bean id="emailService" class="com.cnk.travelerp.spring.batch.email.EmailService" />


	<batch:job id="sendMailJob" restartable="false">
		<batch:step id="sendMailStep">
			<batch:tasklet ref="sendMailTasklet" />
		</batch:step>
	</batch:job>

</beans>

scheduler
================

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/task
   http://www.springframework.org/schema/task/spring-task-3.0.xsd  
   http://www.springframework.org/schema/context 
   http://www.springframework.org/schema/context/spring-context-3.1.xsd" >

	<!-- <context:property-placeholder properties-ref="deployProperties" /> -->
	<!-- Scheduler definition  cron="0 25 15 * * MON-FRI"-->

	<task:annotation-driven />
	<!-- <task:scheduler id="scheduler" pool-size="5" />
	<task:scheduled-tasks scheduler="scheduler">
		<task:scheduled ref="jobLauncherController" method="launch" cron="0 0/1 * 1/1 * *" />
		<task:scheduled ref="jobLauncherController" method="launch1" cron="0 31 16 * * MON-FRI" />
	</task:scheduled-tasks> -->
	
	<!-- <task:scheduler id="scheduler" pool-size="5" />
	<task:scheduled-tasks scheduler="scheduler">
		<task:scheduled ref="timeTask" method="execute" cron="0 0/1 * 1/1 * *" />
	</task:scheduled-tasks>
<bean id="timeTask" class="com.cnk.travelerp.spring.batch.sample.TimeTask" /> -->


	<!--Quartz scheduler configuration -->

	<!-- <bean id="jobDetail" class="org.springframework.scheduling.quartz.JobDetailBean"> 
		<property name="jobClass" value="com.cnk.travelerp.spring.batch.sample.JobLauncherController" 
		/> </bean> <bean id="jobDetailTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean"> 
		<property name="jobDetail" ref="jobDetail" /> <property name="cronExpression" 
		value="0/5 * * * * ?" /> </bean> <bean id="scheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean"> 
		<property name="triggers"> <list> <ref bean="jobDetailTrigger" /> </list> 
		</property> <property name="jobFactory"> <bean class="org.springframework.scheduling.quartz.SpringBeanJobFactory" 
		/> </property> <property name="schedulerContextAsMap"> <map> <entry key="job" 
		value-ref="job" /> <entry key="jobLauncher" value-ref="jobLauncher" /> </map> 
		</property> </bean> -->

<!-- spring batch email scheduler   -->
	
	<task:scheduler id="scheduler" pool-size="5" />
	<task:scheduled-tasks scheduler="scheduler">
		<task:scheduled ref="jobLauncherController" method="emailTest" cron="0 0/1 * 1/1 * *" />
	</task:scheduled-tasks>
	

</beans>

infra
================
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
    http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
    http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-2.1.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">


	<!-- DATASOURCE, TRANSACTION MANAGER AND JDBC TEMPLATE -->

	<!-- <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"> 
		<property name="driverClassName" value="org.hsqldb.jdbcDriver" /> <property 
		name="url" value="jdbc:hsqldb:file:target/data/ledger" /> <property name="username" 
		value="SA" /> <property name="password" value="" /> </bean> -->

	<!-- <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"> 
		<property name="driverClassName" value="oracle.jdbc.OracleDriver" /> <property 
		name="url" value="jdbc:oracle:thin:@10.21.12.129:1521:XE" /> <property name="username" 
		value="dev_env" /> <property name="password" value="dev_env" /> </bean> -->

	<!-- <bean id="transactionManager" class="org.springframework.batch.support.transaction.ResourcelessTransactionManager"> 
		</bean> -->

	<!-- <jdbc:initialize-database data-source="dataSource"> <jdbc:script location="org/springframework/batch/core/schema-oracle10g.sql"/> 
		</jdbc:initialize-database> -->

	<!-- <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> 
		<property name="dataSource" ref="dataSource" /> </bean> -->

	<!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->

	<!-- <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"> 
		<property name="dataSource" ref="dataSource" /> </bean> -->


	<!-- JOB REPOSITORY - WE USE IN-MEMORY REPOSITORY FOR OUR EXAMPLE -->
	<bean id="jobRepository"
		class="org.springframework.batch.core.repository.support.JobRepositoryFactoryBean">
		<property name="transactionManager" ref="transactionManager" />
		<property name="dataSource" ref="dataSource"></property>

	</bean>

	<!-- LAUNCH JOBS FROM A REPOSITORY -->
	<bean id="jobLauncher"
		class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
		<property name="taskExecutor" ref="taskExecutor" />

	</bean>

	<!-- Task Executor for multiple jobs running -->
	<bean id="taskExecutor"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor"
		p:corePoolSize="1" p:maxPoolSize="10" />

	<!--JobRegistry for create runtime jobs -->
	<bean id="jobRegistry"
		class="org.springframework.batch.core.configuration.support.MapJobRegistry" />

	<bean
		class="org.springframework.batch.core.configuration.support.JobRegistryBeanPostProcessor"
		p:jobRegistry-ref="jobRegistry" />



</beans>

mailservice
============
package com.cnk.travelerp.spring.batch.email;

import java.io.File;
import java.io.FileFilter;

import javax.ejb.Stateless;
import javax.mail.Message;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

import org.springframework.core.io.FileSystemResource;
import org.springframework.mail.MailException;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.mail.javamail.MimeMessagePreparator;
 

@Stateless
public class EmailService {
	
    private JavaMailSender mailSender;
    private String senderAddress;
    private String recipient;
    private String attachmentFilePath;
 
    // set the fields
    public void setFields(JavaMailSender mailSender, String senderAddress, String recipient, String attachmentFilePath) {
 
        this.mailSender = mailSender;
        this.senderAddress = senderAddress;
        this.recipient = recipient;
        this.attachmentFilePath = attachmentFilePath;
    }
 
    public void sendMail() {
       System.out.println("send Email started");
        // read directory
        File directory = new File(attachmentFilePath);
        // get file from directory
        final File file = directory.listFiles(FILE_FILTER)[0];
 
        MimeMessagePreparator preparator = new MimeMessagePreparator() {
            public void prepare(MimeMessage mimeMessage) throws Exception {
                mimeMessage.setRecipient(Message.RecipientType.TO, new InternetAddress(recipient));
                mimeMessage.setFrom(new InternetAddress(senderAddress));
                mimeMessage.setSubject("Spring Batch Test");
                // MimeMessagesHelper is needed for the attachment. The Boolean value in
                // constructor is for multipart/data = true
                MimeMessageHelper helper = new MimeMessageHelper(mimeMessage, true);
                helper.addAttachment(file.getName(), new FileSystemResource(file));
                helper.setText("Text in Email Body");
            }
        };
        try {
            this.mailSender.send(preparator);
            System.out.println("send Email completed");
        } catch (MailException ex) {
        	System.out.println("send Email failed"+ ex);
        	}
        
    }
 
    public static FileFilter FILE_FILTER = new FileFilter() {
        public boolean accept(File file) {
            return !file.isDirectory();
        }
    };

}

tasklet
=============
package com.cnk.travelerp.spring.batch.email;

import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.core.step.tasklet.Tasklet;
import org.springframework.batch.repeat.RepeatStatus;
import org.springframework.mail.javamail.JavaMailSender;

public class SendMailTasklet implements Tasklet {
	
	 private EmailService sendMailService;
	    private JavaMailSender mailSender;
	    private String senderAddress;
	    private String recipient;
	    private String attachmentFilePath;
	 
	    public void setMailSender(JavaMailSender mailSender) {
	       this.mailSender = mailSender;
	    }
	    public void setSenderAddress(String senderAddress) {
	        this.senderAddress = senderAddress;
	    }
	 
	    public void setRecipient(String recipient) {
	        this.recipient = recipient;
	    }
	 
	    public void setAttachmentFilePath(String attachmentFilePath) {
	        this.attachmentFilePath = attachmentFilePath;
	    }
	 
	    public void setSendMailService(EmailService sendMailService) {
	        this.sendMailService = sendMailService;
	    }
	 
	   
	    public RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) throws Exception {
	    	System.out.println("execute(StepContribution contribution, ChunkContext chunkContext) begin");
	        sendMailService.setFields(mailSender, senderAddress, recipient, attachmentFilePath);
	        sendMailService.sendMail();
	        System.out.println("execute(StepContribution contribution, ChunkContext chunkContext) end");
	        return RepeatStatus.FINISHED;
	    }

}


controller
============
package com.cnk.travelerp.spring.batch.sample;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.JobParameter;
import org.springframework.batch.core.JobParameters;
import org.springframework.batch.core.JobParametersBuilder;
import org.springframework.batch.core.JobParametersInvalidException;
import org.springframework.batch.core.configuration.JobRegistry;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.batch.core.repository.JobExecutionAlreadyRunningException;
import org.springframework.batch.core.repository.JobInstanceAlreadyCompleteException;
import org.springframework.batch.core.repository.JobRestartException;
import org.springframework.batch.repeat.RepeatListener;
import org.springframework.batch.repeat.policy.SimpleCompletionPolicy;
import org.springframework.batch.repeat.support.RepeatTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.cnk.travelerp.spring.batch.filetodb.LedgerDAO;
import com.cnk.travelerp.spring.batch.repeat.MyRepeatCallback;
import com.cnk.travelerp.spring.batch.repeat.MyRepeatListener;
import com.cnk.travelerp.spring.batch.repeat.PrintMessage;

@Controller(value = "jobLauncherController")
public class JobLauncherController {

	@Autowired
	JobLauncher jobLauncher;

	@Autowired
	@Qualifier("batchJob")
	Job job1;

	@Autowired
	@Qualifier("textPrint")
	Job job2;
	@Autowired
	@Qualifier("repeatMessage")
	Job job3;
	
	@Autowired
	@Qualifier("sendMailJob")
	Job job4;
	
	@Autowired
	JobRegistry jobRegistry;

	@Autowired
	LedgerDAO itemDao;

	private static int counter = 0;

	private static String jobParameterName = null;

	// private static String jobParameterDate=null;

	@RequestMapping(value = "/jobLancher", method = RequestMethod.GET)
	public void handle(@RequestParam(value = "jobName") String jobParamName)
			throws Exception {
		jobParameterName = jobParamName;
		// jobParameterDate=date;
		// launch();
	}

	// @Scheduled(cron="0 29 18 * * MON-FRI")

	// @Scheduled(cron="0 0/1 * 1/1 * *")
	// @Scheduled(fixedRate=100000)
	public void launch() throws Exception {

		JobParametersBuilder jobparam = new JobParametersBuilder();
		jobparam.addDate("schedule.date", new Date());
		jobparam.addString("JobParamName", "JobName");
		JobParameters jobParameters = jobparam.toJobParameters();

		JobExecution result = jobLauncher.run(job1, jobParameters);

		System.out.print("Job status is " + result.getStatus() + ". ");
		System.out.print("Job has been started : " + result.getStartTime()
				+ " and finished: " + result.getEndTime() + ".\n");
	}

	// @Scheduled(cron="0 0/1 * 1/1 * *")
	public void launch1() throws Exception {
		JobParameters jobParams = createJobParameters();
		JobExecution result = jobLauncher.run(job2, jobParams);
	}

	private JobParameters createJobParameters() {
		Map<String, JobParameter> parametersMap = new HashMap<String, JobParameter>();

		parametersMap.put("JobName", new JobParameter("JobName" + ++counter));
		parametersMap.put("Date", new JobParameter(new Date()));
		JobParameters jobParameters = new JobParameters(parametersMap);
		return jobParameters;
	}

	// @Scheduled(cron = "0 0/1 * 1/1 * *")
	public void repeatTest() throws JobExecutionAlreadyRunningException,
			JobRestartException, JobInstanceAlreadyCompleteException,
			JobParametersInvalidException {

		/*
		 * RepeatTemplate template = new RepeatTemplate();
		 * 
		 * SimpleCompletionPolicy policy = new SimpleCompletionPolicy();
		 * policy.setChunkSize(5);
		 * 
		 * template.setCompletionPolicy(policy);
		 * 
		 * MyRepeatCallback callback = new MyRepeatCallback(); PrintMessage
		 * printMessage = new PrintMessage();
		 * 
		 * callback.setPrintMessage(printMessage);
		 * 
		 * RepeatListener[] listeners = {new MyRepeatListener()};
		 * template.setListeners(listeners);
		 * 
		 * template.iterate(callback);
		 */

		JobParameters jobParams = createJobParameters();
		JobExecution result = jobLauncher.run(job3, jobParams);
	}

	public void emailTest() throws JobExecutionAlreadyRunningException,
			JobRestartException, JobInstanceAlreadyCompleteException,
			JobParametersInvalidException {
		JobParameters jobParams = createJobParameters();
		JobExecution result = jobLauncher.run(job4, jobParams);
	}
}

pom
==============

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.cnk.travelerp</groupId>
		<artifactId>spring-bacth-poc</artifactId>
		<version>0.0.1-SNAPSHOT</version>
	</parent>
	<artifactId>spring-batch-web</artifactId>
	<packaging>war</packaging>

	<properties>
		<spring.batch.version>2.1.8.RELEASE</spring.batch.version>
		<spring.framework.version>3.1.0.RELEASE</spring.framework.version>
	</properties>

	<repositories>
		<repository>
			<id>com.springsource.repository.maven.release</id>
			<url>http://maven.springframework.org/release/</url>
		</repository>

		<repository>
			<id>com.springsource.repository.maven.milestone</id>
			<url>http://maven.springframework.org/milestone/</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
	</repositories>

	<dependencies>

		<!--spring mvc dependencies -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${spring.framework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${spring.framework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${spring.framework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${spring.framework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${spring.framework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${spring.framework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
			<version>${spring.framework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aop</artifactId>
			<version>${spring.framework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>${spring.framework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${spring.framework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webflow</artifactId>
			<version>1.0.6</version>
		</dependency>

		<!-- Spring Batch dependencies -->
		<dependency>
			<groupId>org.springframework.batch</groupId>
			<artifactId>spring-batch-core</artifactId>
			<version>${spring.batch.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.batch</groupId>
			<artifactId>spring-batch-infrastructure</artifactId>
			<version>${spring.batch.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.batch</groupId>
			<artifactId>spring-batch-test</artifactId>
			<version>${spring.batch.version}</version>
			<scope>test</scope>
		</dependency>

		<!-- Hibernate Framework 4.1.0.Final dependencies -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>4.1.0.Final</version>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-entitymanager</artifactId>
			<version>4.1.0.Final</version>
		</dependency>
		<!-- <dependency> <groupId>org.hibernate</groupId> <artifactId>hibernate-envers</artifactId> 
			<version>4.1.0.Final</version> </dependency> -->
		<!-- <dependency> <groupId>org.hibernate</groupId> <artifactId>hibernate-ehcache</artifactId> 
			<version>4.1.0.Final</version> </dependency> -->
		<!--web application enabled dependencies -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>2.5</version>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.10</version>
			<scope>test</scope>
		</dependency>
		<!--Data base Dependencies -->
		<dependency>
			<groupId>com.oracle</groupId>
			<artifactId>ojdbc6</artifactId>
			<version>11.2.0</version>
		</dependency>

		<!-- HSQLDB -->
		<dependency>
			<groupId>org.hsqldb</groupId>
			<artifactId>hsqldb</artifactId>
			<version>2.2.8</version>
		</dependency>
		<!-- commons -->
		<dependency>
			<groupId>commons-dbcp</groupId>
			<artifactId>commons-dbcp</artifactId>
			<version>1.2.2</version>
		</dependency>

		<!-- Quartz dependency -->
		<dependency>
			<groupId>org.quartz-scheduler</groupId>
			<artifactId>quartz</artifactId>
			<version>1.8.5</version>
		</dependency>

		<dependency>
			<groupId>javax.ejb</groupId>
			<artifactId>ejb-api</artifactId>
			<version>3.0-alpha-1</version>
		</dependency>

		<dependency>
			<groupId>javax.mail</groupId>
			<artifactId>mail</artifactId>
			<version>1.4</version>
		</dependency>


	</dependencies>

</project>


==================
1.
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:context="http://www.springframework.org/schema/context"

	xsi:schemaLocation="
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
    http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-2.1.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">


	<!-- Beans representing the 2 job steps. -->
	<!-- Step1 - print hello world -->
	<bean id="helloTask" class="com.cnk.travelerp.spring.batch.sample.HelloTask">
		<property name="taskStartMessage" value="Hello World - the time is now " />
	</bean>

	<!-- Step2 - print current time -->
	<bean id="timeTask" class="com.cnk.travelerp.spring.batch.sample.TimeTask" />



	<bean id="itemReader" class="org.springframework.batch.item.file.FlatFileItemReader">
		<property name="resource" value="classpath:ledger2.txt" />
		<!-- <property name="linesToSkip" value="1" /> -->
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="names"
							value="receiptDate,memberName,checkNumber,checkDate,paymentType,depositAmount,paymentAmount,comments" />
					</bean>
				</property>
				<property name="fieldSetMapper" ref="ledgerMapper" />
			</bean>
		</property>
	</bean>



	<!-- FINALLY OUR JOB DEFINITION. THIS IS A 3 STEP JOB -->
	<batch:job id="batchJob">
		<batch:listeners>
			<batch:listener ref="appJobExecutionListener" />
		</batch:listeners>
		<batch:step id="printMessage" next="printTime">
			<batch:tasklet ref="helloTask" allow-start-if-complete="false" />
		</batch:step>
		<batch:step id="printTime" next="readFile">
			<batch:tasklet ref="timeTask" allow-start-if-complete="false" />
		</batch:step>
		<batch:step id="readFile" next="readDB">
			<batch:tasklet allow-start-if-complete="false"
				start-limit="3">
				<batch:listeners>
					<batch:listener ref="itemFailureLoggerListener" />
				</batch:listeners>
				<batch:chunk reader="itemReader" writer="itemWriter"
					commit-interval="100" skip-limit="10" retry-limit="3" >
					<batch:skippable-exception-classes>
						<batch:include
							class="org.springframework.batch.item.file.FlatFileParseException" />
					</batch:skippable-exception-classes>
					<batch:retryable-exception-classes>
						<batch:include
							class="org.springframework.dao.OptimisticLockingFailureException" />
					</batch:retryable-exception-classes>
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
		<batch:step id="readDB">
			<batch:tasklet allow-start-if-complete="false">
				<batch:chunk reader="cursorReader" writer="flatFileWriter"
					commit-interval="100" />
			</batch:tasklet>
		</batch:step>
	</batch:job>


	<!-- printing text message multiple time -->



	<batch:job id="textPrint">
		<batch:step id="print">
			<batch:tasklet ref="helloTask" />
			<!-- <batch:tasklet> <batch:chunk reader="cursorReader" writer="flatFileWriter" 
				commit-interval="1000" /> </batch:tasklet> -->
		</batch:step>
	</batch:job>


	<bean id="cursorReader"
		class="org.springframework.batch.item.database.HibernateCursorItemReader">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="queryString" value="from Ledger" />
	</bean>

	<bean id="flatFileWriter" class="org.springframework.batch.item.file.FlatFileItemWriter">
		<property name="resource" value="file:c:/temp/ledgers-output.txt" />
		<property name="lineAggregator">
			<bean
				class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
				<property name="delimiter" value="," />
				<property name="fieldExtractor">
					<bean
						class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
						<property name="names" value="lid,receiptDate,memberName" />
					</bean>
				</property>
			</bean>
		</property>
	</bean>


</beans>

2.
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:context="http://www.springframework.org/schema/context"

	xsi:schemaLocation="
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
    http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-2.1.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">


	<!-- Step2 - print current time -->
	<bean id="timeTask" class="com.cnk.travelerp.spring.batch.sample.TimeTask" />
	
	<!-- <bean id="stepParent"
		class="org.springframework.batch.core.step.item.FaultTolerantStepFactoryBean"
		abstract="true">
		<property name="backOffPolicy">
			<bean class="org.springframework.batch.retry.backoff.FixedBackOffPolicy">
				<property name="backOffPeriod" value="200000" />
			</bean>
		</property>
	</bean> -->



	<batch:job id="repeatMessage">
		<batch:step id="repeat" next="steprepeat">
			<batch:tasklet>
				<batch:chunk reader="messageReader" writer="messageWriter" 
					commit-interval="10" />
			</batch:tasklet>
		</batch:step>

		<batch:step id="steprepeat">
			<batch:tasklet ref="timeTask" />
		</batch:step>
	</batch:job>


	<bean id="messageReader"
		class="org.springframework.batch.item.database.HibernateCursorItemReader">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="queryString" value="from Message" />
	</bean>
	



</beans>
3.
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
    http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-2.1.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">



	<bean id="jobDetail" class="org.springframework.scheduling.quartz.JobDetailBean">
		<property name="jobClass"
			value="com.cnk.travelerp.spring.batch.quartz.QuartzjobLanucher" />
	</bean>
	<bean id="jobDetailTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="jobDetail" />
		<property name="cronExpression" value="0 0/1 * 1/1 * ?" />
	</bean>
	<bean id="scheduler"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="jobDetailTrigger" />
			</list>
		</property>
		<property name="jobDetails"> <list> <ref bean="jobDetail" /> </list> 
		</property>
		<!-- <property name="jobFactory">
			<bean class="org.springframework.scheduling.quartz.SpringBeanJobFactory" />
		</property>
		<property name="schedulerContextAsMap">
			<map>
				<entry key="job" value-ref="quartzjob" />
				<entry key="jobLauncher" value-ref="jobLauncher" />
			</map>
		</property> -->
	</bean>

	<batch:job id="quartzjob">
		<batch:step id="stepQuartz">
			<batch:tasklet ref="timeTask" />
		</batch:step>
	</batch:job>
	<bean id="timeTask" class="com.cnk.travelerp.spring.batch.sample.TimeTask" />
<!-- 
	<bean id="jobRepository"
		class="org.springframework.batch.core.repository.support.JobRepositoryFactoryBean">
		<property name="transactionManager" ref="transactionManager" />
		<property name="dataSource" ref="dataSource"></property>

	</bean>

	LAUNCH JOBS FROM A REPOSITORY
	<bean id="jobLauncher"
		class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
	</bean>
 -->

</beans>

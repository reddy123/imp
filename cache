
Session Sharing b/w in web app using coherence demo:
===========================================================================

1. coherence.jar,coherence-web.jar put app lib or server lib
2. active-acche-1.0.jar, coherence-web-spi.war deploy in weblogic server as library and given refernce in weblogic.xml

session-cache-config.xml:

<?xml version="1.0" encoding="UTF-8"?>
<cache-config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xmlns="http://xmlns.oracle.com/coherence/coherence-cache-config"
              xsi:schemaLocation="http://xmlns.oracle.com/coherence/coherence-cache-config coherence-cache-config.xsd">
 
  <caching-scheme-mapping>
    <!--
    The clustered cache used to store Session management data.
    -->
    <cache-mapping>
      <cache-name>session-management</cache-name>
      <scheme-name>replicated</scheme-name>
    </cache-mapping>

    <!--
    The clustered cache used to store ServletContext attributes.
    -->
    <cache-mapping>
      <cache-name>servletcontext-storage</cache-name>
      <scheme-name>replicated</scheme-name>
    </cache-mapping>

    <!--
    The clustered cache used to store Session attributes.
    -->
    <cache-mapping>
      <cache-name>session-storage</cache-name>
      <scheme-name>session-near</scheme-name>
    </cache-mapping>

    <!--
    The clustered cache used to store the "overflowing" (split-out due to size)
    Session attributes. Only used for the "Split" model.
    -->
    <cache-mapping>
      <cache-name>session-overflow</cache-name>
      <scheme-name>session-distributed</scheme-name>
    </cache-mapping>

    <!--
    The clustered cache used to store IDs of "recently departed" Sessions.
    -->
    <cache-mapping>
      <cache-name>session-death-certificates</cache-name>
      <scheme-name>session-certificate</scheme-name>
    </cache-mapping>

    <!--
    The local cache used to store Sessions that are not yet distributed (if
    there is a distribution controller).
    -->
    <cache-mapping>
      <cache-name>local-session-storage</cache-name>
      <scheme-name>unlimited-local</scheme-name>
    </cache-mapping>

    <!--
    The local cache used to store Session attributes that are not distributed
    (if there is a distribution controller or attributes are allowed to become
    local when serialization fails).
    -->
    <cache-mapping>
      <cache-name>local-attribute-storage</cache-name>
      <scheme-name>unlimited-local</scheme-name>
    </cache-mapping>
  </caching-scheme-mapping>

  <caching-schemes>
    <!--
    Replicated caching scheme used by the Session management and ServletContext
    attribute caches.
    -->
    <replicated-scheme>
      <scheme-name>replicated</scheme-name>
      <service-name>ReplicatedSessionsMisc</service-name>
      <request-timeout>30s</request-timeout>
      <backing-map-scheme>
        <local-scheme>
          <scheme-ref>unlimited-local</scheme-ref>
        </local-scheme>
      </backing-map-scheme>
      <autostart>true</autostart>
    </replicated-scheme>

    <!--
    Near caching scheme used by the Session attribute cache. The front cache
    uses a Local caching scheme and the back cache uses a Distributed caching
    scheme.
    -->
    <near-scheme>
      <scheme-name>session-near</scheme-name>
      <front-scheme>
        <local-scheme>
          <scheme-ref>session-front</scheme-ref>
        </local-scheme>
      </front-scheme>
      <back-scheme>
        <distributed-scheme>
          <scheme-ref>session-distributed</scheme-ref>
        </distributed-scheme>
      </back-scheme>
      <invalidation-strategy>present</invalidation-strategy>
    </near-scheme>

    <local-scheme>
      <scheme-name>session-front</scheme-name>
      <eviction-policy>HYBRID</eviction-policy>
      <high-units>1000</high-units>
      <low-units>750</low-units>
    </local-scheme>

    <distributed-scheme>
      <scheme-name>session-distributed</scheme-name>
      <scheme-ref>session-base</scheme-ref>
      <backing-map-scheme>
        <local-scheme>
          <scheme-ref>unlimited-local</scheme-ref>
        </local-scheme>
        <!-- for disk overflow use this backing scheme instead:
        <overflow-scheme>
          <scheme-ref>session-paging</scheme-ref>
        </overflow-scheme>
        -->
      </backing-map-scheme>
    </distributed-scheme>

    <!--
    Distributed caching scheme used by the "recently departed" Session cache.
    -->
    <distributed-scheme>
      <scheme-name>session-certificate</scheme-name>
      <scheme-ref>session-base</scheme-ref>
      <backing-map-scheme>
        <local-scheme>
          <eviction-policy>HYBRID</eviction-policy>
          <high-units>4000</high-units>
          <low-units>3000</low-units>
          <expiry-delay>86400</expiry-delay>
        </local-scheme>
      </backing-map-scheme>
    </distributed-scheme>

    <!--
    "Base" Distributed caching scheme that defines common configuration.
    -->
    <distributed-scheme>
      <scheme-name>session-base</scheme-name>
      <service-name>DistributedSessions</service-name>
      <thread-count>0</thread-count>
      <lease-granularity>member</lease-granularity>
      <local-storage system-property="tangosol.coherence.session.localstorage">true</local-storage>
      <partition-count>257</partition-count>
      <backup-count>1</backup-count>
      <backup-storage>
        <type>on-heap</type>
      </backup-storage>
      <request-timeout>30s</request-timeout>
      <backing-map-scheme>
        <local-scheme>
          <scheme-ref>unlimited-local</scheme-ref>
        </local-scheme>
      </backing-map-scheme>
      <autostart>true</autostart>
    </distributed-scheme>

    <!--
    Disk-based Session attribute overflow caching scheme.
    -->
    <overflow-scheme>
      <scheme-name>session-paging</scheme-name>
      <front-scheme>
        <local-scheme>
          <scheme-ref>session-front</scheme-ref>
        </local-scheme>
      </front-scheme>
      <back-scheme>
        <external-scheme>
          <bdb-store-manager/>
        </external-scheme>
      </back-scheme>
    </overflow-scheme>

    <!--
    Local caching scheme definition used by all caches that do not require an
    eviction policy.
    -->
    <local-scheme>
      <scheme-name>unlimited-local</scheme-name>
      <service-name>LocalSessionCache</service-name>
    </local-scheme>

    <!--
    Clustered invocation service that manages sticky session ownership.
    -->
    <invocation-scheme>
      <service-name>SessionOwnership</service-name>
      <request-timeout>30s</request-timeout>
    </invocation-scheme>
  </caching-schemes>

</cache-config>


manifest.mf:

Extension-List: active-cache
active-cache-Extension-Name: active-cache
active-cache-Specification-Version: 1.0
active-cache-Implementation-Version: 1.0

web.xml:

<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	version="2.5">
	<display-name>session1</display-name>

	<!-- <context-param> <param-name>coherence-web-sessions-enabled</param-name> 
		<param-value>true</param-value> </context-param> <context-param> <param-name>coherence-session-weblogic-compatibility-mode</param-name> 
		<param-value>true</param-value> </context-param> <context-param> <param-name>coherence-factory-class</param-name> 
		<param-value>weblogic.servlet.internal.session.WebLogicSPIFactory</param-value> 
		</context-param> <context-param> <param-name>coherence-enable-sessioncontext</param-name> 
		<param-value>true</param-value> </context-param> -->

	<!-- <context-param> <param-name>coherence-session-cookie-path</param-name> 
		<param-value>/</param-value> </context-param> -->
<!-- 
	 <context-param>
		<param-name>coherence-sessioncollection-class</param-name>
		<param-value>com.tangosol.coherence.servlet.SplitHttpSessionCollection</param-value>
	</context-param> 

	<context-param>
		<param-name>coherence-attribute-overflow-threshold</param-name>
		<param-value>10240</param-value>
	</context-param> -->



	<context-param>
		<param-name>coherence-scopecontroller-class</param-name>
		<param-value>com.tangosol.coherence.servlet.AbstractHttpSessionCollection$GlobalScopeController</param-value>
	</context-param>

</web-app>


weblogic.xml:

<?xml version="1.0" encoding="UTF-8"?>
<weblogic-web-app xmlns="http://xmlns.oracle.com/weblogic/weblogic-web-app"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd http://xmlns.oracle.com/weblogic/weblogic-web-app http://xmlns.oracle.com/weblogic/weblogic-web-app/1.4/weblogic-web-app.xsd">
	<weblogic-version>12.1.1</weblogic-version>
	<context-root>session1</context-root>

	<session-descriptor>
		<cookie-name>JSESSIONID</cookie-name>
		<cookie-path>/</cookie-path>
	</session-descriptor>

	<session-descriptor>
		<persistent-store-type>coherence-web</persistent-store-type>
	</session-descriptor>
	<library-ref>
		<library-name>coherence-web-spi</library-name>
	</library-ref>
	<coherence-cluster-ref>
		<coherence-cluster-name>CoherenceCluster</coherence-cluster-name>
	</coherence-cluster-ref>

</weblogic-web-app>


pom.xml:

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.demo</groupId>
	<artifactId>session1</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>war</packaging>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<sonar.language>java</sonar.language>
	</properties>

	<dependencies>
		<dependency>
			<groupId>jstl</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>2.5</version>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jsp-api</artifactId>
			<version>2.0</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.tangosol.net</groupId>
			<artifactId>coherence</artifactId>
			<version>3.7</version>
		</dependency>
		<dependency>
			<groupId>org.tangosol.net</groupId>
			<artifactId>coherence-web</artifactId>
			<version>3.7</version>
		</dependency>

	</dependencies>
	<build>
		<finalName>session1</finalName>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<configuration>
					<webResources>
						<resource>
							<directory>${build.sourceDirectory}</directory>
							<targetPath>sources</targetPath>
						</resource>
					</webResources>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>sonar-maven-plugin</artifactId>
				<version>2.0</version>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<!-- Remove me as soon as all of droolsjbpm requires at least Java 6 -->
				<configuration>
					<source>1.7</source>
					<target>1.7</target>
				</configuration>
			</plugin>

		</plugins>

	</build>

</project>

counter.jsp:

<html>
<body>
	<h3>
		Counter :
		<%
		Integer counter = new Integer(1);
		HttpSession httpsession = request.getSession(true);
		if (httpsession.isNew()) {
			httpsession.setAttribute("count", counter);
			out.println(counter);
		} else {
			int count = ((Integer) httpsession.getAttribute("count"))
					.intValue();
			httpsession.setAttribute("count", new Integer(++count));
			//out.println(httpsession.getAttribute("data"));
			out.println(count);
		}
	%>
	</h3>
</body>
</html>




Starting nodemanager:
==========================================================================

1. find nodemanger folder in weblogic home directory

D:\Weblogic\wls1211_dev\wlserver\common\nodemanager

2. open cmd set WM_HOME,JAVA_HOME,COHERENCE_HOME

3. change directiry to D:\Weblogic\wls1211_dev\wlserver\server\bin

	==>installNodeMgrSvc.cmd 

4. create nodemanger.properties file in nodemanger floder
	D:\Weblogic\wls1211_dev\wlserver\common\nodemanager

nodemanager.properties

#Fri Aug 23 11:49:40 IST 2013
NativeVersionEnabled=false
PropertiesVersion=10.3
ListenAddress=10.21.12.86
ListenPort=5566
ListenBacklog=50
SecureListener=false
AuthenticationEnabled=false

if nodemanager.domains not there create

nodemanager.domains:

#Domains and directories created by Configuration Wizard
#Tue Aug 06 16:35:12 IST 2013
mydomain=C\:\\home\\myhome\\domain

	
5.start nodemanger using cmd ==>startNodeManager.cmd


create meachine in weblogic and give nodemanger. create coherence serever and start and alse check meachine  monitoring tab ...

reference: http://cerebro.com.au/2013/04/07/coherence-server-started-by-node-manager/








==========================================================================
tangosol-coherence-override.xml:

<coherence xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://xmlns.oracle.com/coherence/coherence-operational-config"
	xsi:schemaLocation="http://xmlns.oracle.com/coherence/coherence-operational-config coherence-operational-config.xsd">
	<cluster-config>
		<member-identity>
			<cluster-name system-property="tangosol.coherence.cluster">DemoCluster</cluster-name>
		</member-identity>
		<unicast-listener>
			<address system-property="tangosol.coherence.localhost">localhost</address>
			<port system-property="tangosol.coherence.localport">2014</port>
			<!-- <port-auto-adjust system-property="tangosol.coherence.localport.adjust">true
			</port-auto-adjust> -->
		</unicast-listener>
		<multicast-listener>
			<address system-property="tangosol.coherence.clusteraddress">224.5.0.255</address>
			<port system-property="tangosol.coherence.clusterport">4545</port>
			<time-to-live system-property="tangosol.coherence.ttl">3</time-to-live>
			<join-timeout-milliseconds>30000</join-timeout-milliseconds>
			<multicast-threshold-percent>25</multicast-threshold-percent>
		</multicast-listener>
	</cluster-config>
</coherence>

example-client-config.xml:

<?xml version="1.0" encoding="UTF-8"?>
<cache-config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://xmlns.oracle.com/coherence/coherence-cache-config"
	xsi:schemaLocation="http://xmlns.oracle.com/coherence/coherence-cache-config
   coherence-cache-config.xsd">
	<caching-scheme-mapping>
		<cache-mapping>
			<cache-name>VirtualCache</cache-name>
			<scheme-name>extend</scheme-name>
		</cache-mapping>
	</caching-scheme-mapping>

	<caching-schemes>
		<distributed-scheme>
			<scheme-name>extend</scheme-name>
			<lease-granularity>member</lease-granularity>
			<backing-map-scheme>
				<local-scheme />
			</backing-map-scheme>
			<autostart>true</autostart>
		</distributed-scheme>

		<!-- <proxy-scheme>
			<scheme-name>extend</scheme-name>
			<service-name>ExtendTcpProxyService</service-name>
			<acceptor-config>
				<tcp-acceptor>
					<local-address>
						<address system-property="tangosol.coherence.extend.address">localhost</address>
						<port system-property="tangosol.coherence.extend.port">9099</port>
					</local-address>
				</tcp-acceptor>
			</acceptor-config>
			<autostart system-property="tangosol.coherence.extend.enabled">true</autostart>
		</proxy-scheme> -->
	</caching-schemes>
</cache-config>
